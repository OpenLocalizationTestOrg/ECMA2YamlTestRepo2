<Type Name="DataGrid" FullName="System.Windows.Controls.DataGrid">
  <TypeSignature Language="C#" Value="public class DataGrid : System.Windows.Controls.Primitives.MultiSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi DataGrid extends System.Windows.Controls.Primitives.MultiSelector" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.MultiSelector</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a control that displays data in a customizable grid.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataGrid control provides a flexible way to display a collection of data in rows and columns. The DataGrid includes built-in column types and a template column for hosting custom content. The built-in row type includes a drop-down details section that you can use to display additional content below the cell values.  
  
## Binding to Data  
 To bind the DataGrid to data, set the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> property to an <xref:System.Collections.IEnumerable> implementation. Each row in the data grid is bound to an object in the data source, and each column in the data grid is bound to a property of the data object. In order for the DataGrid user interface to update automatically when items are added to or removed from the source data, the DataGrid must be bound to a collection that implements the <xref:System.Collections.Specialized.INotifyCollectionChanged> interface, such as an <xref:System.Collections.ObjectModel.ObservableCollection%601>. To automatically reflect property changes, the objects in the source collection must implement the <xref:System.ComponentModel.INotifyPropertyChanged> interface. For more information, see [Data Binding (WPF)](~/add/includes/ajax-current-ext-md.md).  
  
## Columns  
 By default, the DataGrid control generates columns automatically when you set the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> property. The type of column that is generated depends on the type of data in the column. The following table lists the generated columns types.  
  
|Generated Column Type|Data Type|  
|---------------------------|---------------|  
|<xref:System.Windows.Controls.DataGridTextColumn>|<xref:System.String>|  
|<xref:System.Windows.Controls.DataGridCheckBoxColumn>|<xref:System.Boolean>|  
|<xref:System.Windows.Controls.DataGridComboBoxColumn>|<xref:System.Enum>|  
|<xref:System.Windows.Controls.DataGridHyperlinkColumn>|<xref:System.Uri>|  
  
 The following illustration shows each of the column types.  
  
 ![DataGrid with all four default column types](~/add/media/ndp-datagriddefault.png "DataGrid with all four default column types")  
  
 When columns are auto-generated, you can handle the <xref:System.Windows.Controls.DataGrid.AutoGeneratingColumn> event to customize or cancel columns before they are added to the DataGrid. If you add both user-defined columns and auto-generated columns to the DataGrid, the user-defined columns are added first. To rearrange the display order of the columns, you can set the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> property for individual columns.  
  
 You can prevent automatic column generation by setting the <xref:System.Windows.Controls.DataGrid.AutoGenerateColumns%2A> property to `false`. This is useful if you want to create and configure all columns explicitly.  
  
 Use the <xref:System.Windows.Controls.DataGridTemplateColumn> type to define a custom column if the built-in column types do not meet your needs. The <xref:System.Windows.Controls.DataGridTemplateColumn> type provides <xref:System.Windows.Controls.DataGridTemplateColumn.CellTemplate%2A> and <xref:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate%2A> properties that enable you to specify content templates for both display and editing modes. For example, you could define a custom column for dates. The <xref:System.Windows.Controls.DataGridTemplateColumn.CellTemplate%2A> could define a <xref:System.Windows.Controls.TextBlock> to display a date, and the <xref:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate%2A> could define a <xref:System.Windows.Controls.DatePicker> control to edit the date.  
  
 You can use the <xref:System.Windows.Controls.DataGrid.Columns%2A> collection to programmatically add, insert, remove, and change any columns in the control at run time. Check the <xref:System.Windows.Controls.DataGridColumn.IsAutoGenerated%2A> property to determine whether a column is auto generated or user defined. Auto-generated columns will be automatically added, removed, or regenerated when the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> changes.  
  
## Selection  
 By default, the entire row is selected when a user clicks a cell in a DataGrid, and a user can select multiple rows. You can set the <xref:System.Windows.Controls.DataGrid.SelectionMode%2A> property to specify whether a user can select cells, full rows, or both. Set the <xref:System.Windows.Controls.DataGrid.SelectionUnit%2A> property to specify whether multiple rows or cells can be selected, or only single rows or cells.  
  
 You can get information about the cells that are selected from the <xref:System.Windows.Controls.DataGrid.SelectedCells%2A> property. You can get information about cells for which selection has changed in the <xref:System.Windows.Controls.SelectedCellsChangedEventArgs> of the <xref:System.Windows.Controls.DataGrid.SelectedCellsChanged> event. Call the <xref:System.Windows.Controls.DataGrid.SelectAllCells%2A> or <xref:System.Windows.Controls.DataGrid.UnselectAllCells%2A> methods to programmatically select or unselect all cells. For more information, see [Default Keyboard and Mouse Behavior in the DataGrid Control](~/add/includes/ajax-current-ext-md.md).  
  
## Grouping, Sorting, and Filtering  
 By default, you can sort items in a DataGrid by clicking the column header. You can customize sorting by handling the <xref:System.Windows.Controls.DataGrid.Sorting> event. To cancel the default sort, set the <xref:System.Windows.Controls.DataGridSortingEventArgs.Handled%2A> property to `true`. You can also sort the source data before it is displayed in the DataGrid.  
  
 To group, sort, and filter data in the DataGrid, you bind the DataGrid to an <xref:System.ComponentModel.ICollectionView> implementation that supports these operations. You then perform the operations on the collection view. When items are grouped in the DataGrid, you can define a <xref:System.Windows.Controls.GroupStyle> that specifies the appearance of each group. You apply the <xref:System.Windows.Controls.GroupStyle> by adding it to the <xref:System.Windows.Controls.ItemsControl.GroupStyle%2A> collection of the DataGrid. If you have multiple levels of grouping, you can apply different styles to each group level. Styles are applied in the order in which they are defined. For more information, see [How to: Group, Sort, and Filter Data in the DataGrid Control](~/add/includes/ajax-current-ext-md.md).  
  
## Editing  
 By default, you can edit items directly in the DataGrid. To guarantee that edits can be committed and canceled correctly, the objects in the DataGrid must implement the <xref:System.ComponentModel.IEditableObject> interface. Alternatively, you can set the <xref:System.Windows.Controls.DataGrid.IsReadOnly%2A> property to `true` to disable editing in the DataGrid.  
  
 The DataGrid has built-in support for the following editing commands:  
  
|Command|Default Input Binding|  
|-------------|---------------------------|  
|<xref:System.Windows.Controls.DataGrid.BeginEditCommand>|F2|  
|<xref:System.Windows.Controls.DataGrid.CancelEditCommand>|ESC|  
|<xref:System.Windows.Controls.DataGrid.CommitEditCommand>|ENTER|  
|<xref:System.Windows.Controls.DataGrid.DeleteCommand%2A>|DELETE|  
  
 You put the current cell into edit mode by clicking it or pressing F2. A cell-level edit is committed when you move to another cell in the same row or press ENTER while the cell is in edit mode. All edits in a row are committed when you move to another row or press ENTER while the row is in edit mode. You cancel a cell edit by pressing ESC one time, and cancel all edits in a row by pressing ESC two times. For more information about programmatically committing and canceling edits, see the <xref:System.Windows.Controls.DataGrid.BeginEdit%2A>, <xref:System.Windows.Controls.DataGrid.CommitEdit%2A>, and <xref:System.Windows.Controls.DataGrid.CancelEdit%2A> methods. For more information about edit-related events, see <xref:System.Windows.Controls.DataGrid.BeginningEdit>, <xref:System.Windows.Controls.DataGrid.PreparingCellForEdit>, <xref:System.Windows.Controls.DataGrid.CellEditEnding>, and <xref:System.Windows.Controls.DataGrid.RowEditEnding>.  
  
 Set the <xref:System.Windows.Controls.DataGrid.CanUserAddRows%2A> and <xref:System.Windows.Controls.DataGrid.CanUserDeleteRows%2A> properties to specify whether a user can add or delete rows. A user can delete selected rows by pressing the DELETE key. If the <xref:System.Windows.Controls.DataGrid.CanUserAddRows%2A> property is set to `true`, a new item row is added as the last row in the DataGrid. You can set default values for new items by handling the <xref:System.Windows.Controls.DataGrid.InitializingNewItem> event.  
  
> [!NOTE]
>  Whether editing actions are allowed is influenced by a variety of additional factors, including the <xref:System.Windows.Controls.DataGrid.IsReadOnly%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> state of the DataGrid, and whether the underlying data collection allows the action.  
  
## Validation  
 The DataGrid enables you to perform validation at both the cell and row level. With cell-level validation, you validate individual properties of a bound data object when a user updates a value. With row-level validation, you validate entire data objects when a user commits changes to a row. You can provide customized visual feedback for row-level validation errors by setting the <xref:System.Windows.Controls.DataGrid.RowValidationErrorTemplate%2A> property, or you can use the default error indicator. To create a custom validation rule, create a class that derives from the <xref:System.Windows.Controls.ValidationRule> class and implement the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. Add the custom validation rule to the <xref:System.Windows.Controls.DataGrid.RowValidationRules%2A> collection.  
  
## Customizing the DataGrid Control  
 The DataGrid control supports common table formatting options, such as alternating row backgrounds and the ability to show or hide headers, gridlines, and scroll bars. Additionally, the control provides several style and template properties that you can use to completely change the appearance of the control and its rows, columns, headers, and cells.  
  
 To customize DataGrid behavior, you can handle events for selection change, cell editing, and column re-ordering. The DataGrid also exposes several events for row recycling that you can handle to customize rows.  
  
 To apply the same property settings to multiple DataGrid controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property. You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance. For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/add/includes/ajax-current-ext-md.md). To see the parts and states that are specific to the DataGrid, see [DataGrid Styles and Templates](~/add/includes/ajax-current-ext-md.md).  
  
 Dependency properties for this control might be set by the control’s default style. If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running. For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Setting a visual property will only have an effect if that property is both present in the DataGrid control's default template and is set by using a . You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md).  
  
## Common Tasks  
 The following table provides information about tasks that are typically associated with the DataGrid.  
  
|Task|Implementation|  
|----------|--------------------|  
|Set alternating row background colors|Set the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A> property to 2 or more, and then assign a <xref:System.Windows.Media.Brush> to the <xref:System.Windows.Controls.DataGrid.RowBackground%2A> and <xref:System.Windows.Controls.DataGrid.AlternatingRowBackground%2A> properties.|  
|Define cell and row selection behavior|Set the <xref:System.Windows.Controls.DataGrid.SelectionMode%2A> and <xref:System.Windows.Controls.DataGrid.SelectionUnit%2A> properties.|  
|Customize the visual appearance of headers, cells and rows|Apply a new <xref:System.Windows.Style> to the <xref:System.Windows.Controls.DataGrid.ColumnHeaderStyle%2A>, <xref:System.Windows.Controls.DataGrid.RowHeaderStyle%2A>, <xref:System.Windows.Controls.DataGrid.CellStyle%2A>, or <xref:System.Windows.Controls.DataGrid.RowStyle%2A> properties.|  
|Set sizing options|Set the <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.MaxHeight%2A>, <xref:System.Windows.FrameworkElement.MinHeight%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.MaxWidth%2A>, or <xref:System.Windows.FrameworkElement.MinWidth%2A> properties. For more information, see [Sizing Options in the DataGrid Control](~/add/includes/ajax-current-ext-md.md).|  
|Access selected items|Check the <xref:System.Windows.Controls.DataGrid.SelectedCells%2A> property to get the selected cells and check the <xref:System.Windows.Controls.Primitives.MultiSelector.SelectedItems%2A> property to get the selected rows. For more information, see the <xref:System.Windows.Controls.DataGrid.SelectedCells%2A> property.|  
|Customize end-user interactions|Set the <xref:System.Windows.Controls.DataGrid.CanUserAddRows%2A>, <xref:System.Windows.Controls.DataGrid.CanUserDeleteRows%2A>, <xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A>, <xref:System.Windows.Controls.DataGrid.CanUserResizeColumns%2A>, <xref:System.Windows.Controls.DataGrid.CanUserResizeRows%2A>, and <xref:System.Windows.Controls.DataGrid.CanUserSortColumns%2A> properties.|  
|Cancel or change auto-generated columns|Handle the <xref:System.Windows.Controls.DataGrid.AutoGeneratingColumn> event.|  
|Freeze a column|Set the <xref:System.Windows.Controls.DataGrid.FrozenColumnCount%2A> property to 1 and move the column to the left-most position by setting the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> property to 0.|  
|Use XML data as the data source|Bind the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> on the DataGrid to the XPath query representing the collection of items. Create each column in the DataGrid. Bind each column by setting the XPath on the binding to the query that gets the property on the item source. For an example, see <xref:System.Windows.Controls.DataGridTextColumn>.|  
|Group items|Bind to a <xref:System.Windows.Data.CollectionView> or <xref:System.Windows.Data.CollectionViewSource> that supports grouping. For more information, see [How to: Group, Sort, and Filter Data in the DataGrid Control](../Topic/How%20to:%20Group,%20Sort,%20and%20Filter%20Data%20in%20the%20DataGrid%20Control.md).|  
|Display the details section for a row|Define a <xref:System.Windows.Controls.DataGrid.RowDetailsTemplate%2A> to specify the appearance of the details section. Set the <xref:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode%2A> to specify when the details section is shown. For more information, see [How to: Add Row Details to a DataGrid Control](~/add/includes/ajax-current-ext-md.md).|  
  
   
  
## Examples  
 The following example shows how to bind a DataGrid to a <xref:System.Data.DataTable> and use column auto-generation. The <xref:System.Data.DataTable> is populated by using the <xref:System.Data.Common.DataAdapter.Fill%2A> method of a <xref:System.Data.Common.DataAdapter> from a <xref:System.Data.DataSet>. For more information, see [Creating a DataSet](~/add/includes/ajax-current-ext-md.md) and [Populating a DataSet from a DataAdapter](~/add/includes/ajax-current-ext-md.md). To use the [!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)], see [Bind WPF controls to data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-xml[DataGrid1#1](~/add/codesnippet/xaml/datagrid1/window1.xaml#1)]  
  
 [!code-cs[DataGrid1#2](~/add/codesnippet/csharp/datagrid1/window1.xaml.cs#2)]
 [!code-vb[DataGrid1#2](~/add/codesnippet/visualbasic/datagrid1_vb/window1.xaml.vb#2)]  
  
 The following example shows how to create a DataGrid with a customized <xref:System.Windows.Controls.DataGrid.Columns%2A> collection.  
  
 [!code-xml[DataGrid_CustomColumns#All1](~/add/codesnippet/xaml/datagrid_customcolumns/window1.xaml#all1)]  
  
 [!code-cs[DataGrid_CustomColumns#Using](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#using)]
 [!code-vb[DataGrid_CustomColumns#Using](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#using)]  
[!code-cs[DataGrid_CustomColumns#Top](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#top)]
[!code-vb[DataGrid_CustomColumns#Top](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#top)]  
[!code-cs[DataGrid_CustomColumns#All2](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#all2)]
[!code-vb[DataGrid_CustomColumns#All2](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#all2)]  
[!code-cs[DataGrid_CustomColumns#CustomerClass](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#customerclass)]
[!code-vb[DataGrid_CustomColumns#CustomerClass](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#customerclass)]  
[!code-cs[DataGrid_CustomColumns#AllEnd](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#allend)]
[!code-vb[DataGrid_CustomColumns#AllEnd](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#allend)]  
[!code-cs[DataGrid_CustomColumns#Enum](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#enum)]
[!code-vb[DataGrid_CustomColumns#Enum](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#enum)]  
[!code-cs[DataGrid_CustomColumns#Hyperlink3](~/add/codesnippet/csharp/datagrid_customcolumns/window1.xaml.cs#hyperlink3)]
[!code-vb[DataGrid_CustomColumns#Hyperlink3](~/add/codesnippet/visualbasic/datagrid_customcolumns_vb/window1.xaml.vb#hyperlink3)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataGrid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGrid" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddingNewItem">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.AddingNewItemEventArgs&gt; AddingNewItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.AddingNewItemEventArgs&gt; AddingNewItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.AddingNewItemEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a new item is added to the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowBackground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush AlternatingRowBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush AlternatingRowBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background brush for use on alternating rows.</summary>
        <value>The <see cref="T:System.Windows.Media.Brush" /> that paints the background of every nth row where n is defined by the &lt;xref:System.Windows.Controls.ItemsControl.AlternationCount%2A&gt; property. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AlternatingRowBackground, <xref:System.Windows.Controls.DataGrid.RowBackground%2A>, and <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> properties together determine the appearance of each row's background.  
  
 If <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> is less than 2, setting the AlternatingRowBackground property sets <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> to 2.  
  
   
  
## Examples  
 The following example shows how to set alternating row background colors on the <xref:System.Windows.Controls.DataGrid>.  
  
 [!code-xml[DataGrid1#1](~/add/codesnippet/xaml/datagrid1/window1.xaml#1)]  
  
 The following illustration shows how this code looks when it runs.  
  
 ![Three alternating colors for the row background](~/add/media/wpf-alternatingrowback.png "Three alternating colors for the row background")  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowBackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AlternatingRowBackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AlternatingRowBackgroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.AlternatingRowBackground%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AreRowDetailsFrozen">
      <MemberSignature Language="C#" Value="public bool AreRowDetailsFrozen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreRowDetailsFrozen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the row details can scroll horizontally.</summary>
        <value>
          <see langword="true" /> if row details cannot scroll; otherwise, <see langword="false" />. The registered default is <see langword="false" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property to `true` to make sure that the contents of the row details sections are not scrolled out of view horizontally.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AreRowDetailsFrozenProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreRowDetailsFrozenProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreRowDetailsFrozenProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.AreRowDetailsFrozen%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumns">
      <MemberSignature Language="C#" Value="public bool AutoGenerateColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the columns are created automatically.</summary>
        <value>
          <see langword="true" /> if columns are created automatically; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting AutoGenerateColumns to `true` or `false` creates or removes auto-generated columns. When the AutoGenerateColumns property is set to `true`, the <xref:System.Windows.Controls.DataGrid.AutoGeneratingColumn> event will be raised for each column that is created. You can change or cancel the column being created in the <xref:System.Windows.Controls.DataGrid.AutoGeneratingColumn> event handler.  
  
 When auto-generation of all columns is complete, the <xref:System.Windows.Controls.DataGrid.AutoGeneratedColumns> event is raised.  
  
> [!NOTE]
>  <xref:System.Windows.Controls.DataGrid> cannot auto-generate columns when the source is XML data. In this case, create a custom <xref:System.Windows.Controls.DataGrid.Columns%2A> collection. For an example, see <xref:System.Windows.Controls.DataGridTextColumn>.  
  
   
  
## Examples  
 The following example shows how to auto-generate columns and change the columns at creation time in the <xref:System.Windows.Controls.DataGrid.AutoGeneratingColumn> event handler.  
  
 [!code-xml[DataGrid_AutoGenColumns#1](~/add/codesnippet/xaml/datagrid_autogencolumns/window1.xaml#1)]  
  
 [!code-vb[DataGrid_AutoGenColumns#2](~/add/codesnippet/visualbasic/datagrid_autogencolumns_vb/window1.xaml.vb#2)]
 [!code-cs[DataGrid_AutoGenColumns#2](~/add/codesnippet/csharp/datagrid_autogencolumns/window1.xaml.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumnsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AutoGenerateColumnsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AutoGenerateColumnsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.AutoGenerateColumns%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGeneratedColumns">
      <MemberSignature Language="C#" Value="public event EventHandler AutoGeneratedColumns;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoGeneratedColumns" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when auto generation of all columns is completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Controls.DataGrid.AutoGenerateColumns%2A> property is set to `true`, the <xref:System.Windows.Controls.DataGrid.AutoGeneratingColumn> event is raised for each column created. When all columns are created, this event will occur.  
  
> [!NOTE]
>  The AutoGeneratedColumns event is raised every time the <xref:System.Windows.Controls.DataGrid> attempts to generate columns. For example, AutoGeneratedColumns is raised when the <xref:System.Windows.Controls.DataGrid> is initialized, <xref:System.Windows.Controls.DataGrid.AutoGenerateColumns%2A> is set to `true`, or the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> is changed, even if the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> is `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGeneratingColumn">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs&gt; AutoGeneratingColumn;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs&gt; AutoGeneratingColumn" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an individual column is auto-generated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can change or cancel the column being created in the AutoGeneratingColumn event handler.  
  
 When all columns are auto-generated, the <xref:System.Windows.Controls.DataGrid.AutoGeneratedColumns> event occurs.  
  
   
  
## Examples  
 The following example shows how to auto-generate columns and change the columns at creation time in the AutoGeneratingColumn event handler.  
  
 [!code-xml[DataGrid_AutoGenColumns#1](~/add/codesnippet/xaml/datagrid_autogencolumns/window1.xaml#1)]  
  
 [!code-vb[DataGrid_AutoGenColumns#2](~/add/codesnippet/visualbasic/datagrid_autogencolumns_vb/window1.xaml.vb#2)]
 [!code-cs[DataGrid_AutoGenColumns#2](~/add/codesnippet/csharp/datagrid_autogencolumns/window1.xaml.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public bool BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes the BeginEdit command, which will place the current cell or row into edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell or row enters edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the command is enabled, this will cause the <xref:System.Windows.Controls.DataGrid.BeginningEdit> and <xref:System.Windows.Controls.DataGrid.PreparingCellForEdit>overrides and events to occur.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public bool BeginEdit (System.Windows.RoutedEventArgs editingEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginEdit(class System.Windows.RoutedEventArgs editingEventArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editingEventArgs" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="editingEventArgs">If called from an event handler, the event arguments. May be <see langword="null" />.</param>
        <summary>Invokes the &lt;xref:System.Windows.Controls.DataGrid.BeginEdit%2A&gt; command, which will place the current cell or row into edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell or row enters edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the command is enabled, this will cause the <xref:System.Windows.Controls.DataGrid.BeginningEdit> and <xref:System.Windows.Controls.DataGrid.PreparingCellForEdit>overrides and events to occur.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEditCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand BeginEditCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand BeginEditCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the command that indicates the intention to begin editing the current cell or row of the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginningEdit">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridBeginningEditEventArgs&gt; BeginningEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridBeginningEditEventArgs&gt; BeginningEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridBeginningEditEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a row or cell enters edit mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event lets you perform special processing before a cell or row enters edit mode. Additionally, this event provides information about the keyboard or mouse gesture that was used to enter editing mode, and gives you the option of canceling edit mode.  
  
 If this event is not canceled, the <xref:System.Windows.Controls.DataGrid.PreparingCellForEdit> event is raised when this event completes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CancelEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes the <see cref="F:System.Windows.Controls.DataGrid.CancelEditCommand" /> command for the cell or row currently in edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell or row exits edit mode, or if no cells or rows are in edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a cell is currently in edit mode, the CancelEdit method cancels the cell edit, but not any pending row edits. If a cell is not in edit mode, CancelEdit cancels all pending row edits.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit (System.Windows.Controls.DataGridEditingUnit editingUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CancelEdit(valuetype System.Windows.Controls.DataGridEditingUnit editingUnit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editingUnit" Type="System.Windows.Controls.DataGridEditingUnit" />
      </Parameters>
      <Docs>
        <param name="editingUnit">One of the enumeration values that specifies whether to cancel row or cell edits.</param>
        <summary>Invokes the <see cref="F:System.Windows.Controls.DataGrid.CancelEditCommand" /> command for the specified cell or row in edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell or row exits edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method reverts any pending editing changes for the specified <xref:System.Windows.Controls.DataGridEditingUnit> and exits edit mode.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelEditCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand CancelEditCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand CancelEditCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the command that indicates the intention to cancel any pending changes to the current cell or row and revert to the state before the <see cref="F:System.Windows.Controls.DataGrid.BeginEditCommand" /> command was executed.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserAddRows">
      <MemberSignature Language="C#" Value="public bool CanUserAddRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUserAddRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can add new rows to the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>
          <see langword="true" /> if the user can add new rows; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to `true` a blank row is displayed at the bottom of the <xref:System.Windows.Controls.DataGrid>. A user can enter a new item into the blank row. Adding a new row adds an item to the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>. You can set default values for the new item by handling the <xref:System.Windows.Controls.DataGrid.InitializingNewItem> event and setting the values programmatically.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserAddRowsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanUserAddRowsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanUserAddRowsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CanUserAddRows%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserDeleteRows">
      <MemberSignature Language="C#" Value="public bool CanUserDeleteRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUserDeleteRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can delete rows from the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>
          <see langword="true" /> if the user can delete rows; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the user can delete rows by selecting one or more rows and pressing the DELETE key. Deleting a row removes the item that the row represents from the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>. If the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> does not allow deletions, the user cannot delete rows even if this property is set to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserDeleteRowsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanUserDeleteRowsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanUserDeleteRowsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CanUserDeleteRows%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserReorderColumns">
      <MemberSignature Language="C#" Value="public bool CanUserReorderColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUserReorderColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can change the column display order by dragging column headers with the mouse.</summary>
        <value>
          <see langword="true" /> if the user can reorder columns; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can set this reorder behavior for individual columns by setting the <xref:System.Windows.Controls.DataGridColumn.CanUserReorder%2A?displayProperty=fullName> property. If the <xref:System.Windows.Controls.DataGridColumn.CanUserReorder%2A?displayProperty=fullName> property and the CanUserReorderColumns property are both set, a value of `false` will take precedence over a value of `true`.  
  
 Columns can be frozen by setting the <xref:System.Windows.Controls.DataGrid.FrozenColumnCount%2A> property greater than 0. Frozen columns are always the leftmost columns in display order. You cannot drag frozen columns into the group of unfrozen columns or drag unfrozen columns into the group of frozen columns.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserReorderColumnsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanUserReorderColumnsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanUserReorderColumnsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserResizeColumns">
      <MemberSignature Language="C#" Value="public bool CanUserResizeColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUserResizeColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can adjust the width of columns by using the mouse.</summary>
        <value>
          <see langword="true" /> if the user can adjust the column width; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property does not affect whether column widths can be changed programmatically, such as by changing the <xref:System.Windows.Controls.DataGridColumn.Width%2A?displayProperty=fullName> property.  
  
 You can set this resize behavior for individual columns by setting the <xref:System.Windows.Controls.DataGridColumn.CanUserResize%2A?displayProperty=fullName> property. If the <xref:System.Windows.Controls.DataGridColumn.CanUserResize%2A?displayProperty=fullName> property and the CanUserResizeColumns property are both set, a value of `false` takes precedence over a value of `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserResizeColumnsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanUserResizeColumnsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanUserResizeColumnsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CanUserResizeColumns%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserResizeRows">
      <MemberSignature Language="C#" Value="public bool CanUserResizeRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUserResizeRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can adjust the height of rows by using the mouse.</summary>
        <value>
          <see langword="true" /> if the user can change the height of the rows; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property does not affect whether the height of rows can be changed programmatically, such as by changing the <xref:System.Windows.Controls.DataGrid.RowHeight%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserResizeRowsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanUserResizeRowsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanUserResizeRowsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CanUserResizeRows%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserSortColumns">
      <MemberSignature Language="C#" Value="public bool CanUserSortColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUserSortColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can sort columns by clicking the column header.</summary>
        <value>
          <see langword="true" /> if the user can sort the columns; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can set this sorting behavior for individual columns by setting the <xref:System.Windows.Controls.DataGridColumn.CanUserSort%2A?displayProperty=fullName> property. If the <xref:System.Windows.Controls.DataGridColumn.CanUserSort%2A?displayProperty=fullName> property and the CanUserSortColumns property are both set, a value of `false` takes precedence over a value of `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUserSortColumnsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanUserSortColumnsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanUserSortColumnsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CanUserSortColumns%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellEditEnding">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridCellEditEndingEventArgs&gt; CellEditEnding;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridCellEditEndingEventArgs&gt; CellEditEnding" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridCellEditEndingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a cell edit is committed or canceled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can cancel this event by setting the <xref:System.Windows.Controls.DataGridCellEditEndingEventArgs.Cancel%2A> property of the `e` argument to `true` in the event handler. If canceled, the cell remains in edit mode.  
  
 If this event is not canceled, the specified <xref:System.Windows.Controls.DataGridCellEditEndingEventArgs.EditAction%2A> will be performed to commit or cancel the edit.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellsPanelHorizontalOffset">
      <MemberSignature Language="C#" Value="public double CellsPanelHorizontalOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 CellsPanelHorizontalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal offset for the <see cref="T:System.Windows.Controls.DataGridCellsPanel" />.</summary>
        <value>The horizontal offset for the cells panel. The registered default is 0.0. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.DataGridCellsPanel> is the layout container for rows. When scrolling, the panels have to compute an offset to know which part of the panel should appear in the view port.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellsPanelHorizontalOffsetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CellsPanelHorizontalOffsetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CellsPanelHorizontalOffsetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CellsPanelHorizontalOffset%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style CellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style CellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style applied to all cells in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The style applied to the cells in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apply a <xref:System.Windows.Style> to update the visual appearance of all the cells in the <xref:System.Windows.Controls.DataGrid>. To define a <xref:System.Windows.Style> for a cell, specify a <xref:System.Windows.Style.TargetType%2A> of <xref:System.Windows.Controls.DataGridCell>.  
  
 A <xref:System.Windows.Style> can be applied to a cell at the table, column, or cell level. To apply a <xref:System.Windows.Style> to all cells in a column, set the <xref:System.Windows.Controls.DataGridColumn.CellStyle%2A?displayProperty=fullName> property. This will take precedence over the CellStyle property. To apply a <xref:System.Windows.Style> to an individual cell, set the <xref:System.Windows.FrameworkElement.Style%2A> property directly on the <xref:System.Windows.Controls.DataGridCell>. This will take precedence over all other styles applied to the cell.  
  
   
  
## Examples  
 The following example uses a trigger to change the <xref:System.Windows.Controls.Control.Background%2A> color of a <xref:System.Windows.Controls.DataGridCell> when the cell is selected.  
  
 [!code-xml[DataGrid_CellStyle#1](~/add/codesnippet/xaml/datagrid_cellstyle/window1.xaml#1)]
 [!code-xml[DataGrid_CellStyle#1](~/add/codesnippet/xaml/p-system.windows.control_331_1.xaml)]  
  
 The following illustration shows the output.  
  
 ![A selected cell with a green background](~/add/media/ndp-wpf-cellstyle.png "A selected cell with a green background")  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CellStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CellStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CellStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override void ClearContainerForItemOverride (System.Windows.DependencyObject element, object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearContainerForItemOverride(class System.Windows.DependencyObject element, object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="element">The <see cref="T:System.Windows.Controls.DataGridRow" /> to clear.</param>
        <param name="item">The data item that the row contains.</param>
        <summary>Unloads the row for the specified item.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearDetailsVisibilityForItem">
      <MemberSignature Language="C#" Value="public void ClearDetailsVisibilityForItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearDetailsVisibilityForItem(object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The data item in the row for which &lt;xref:System.Windows.Controls.DataGridRow.DetailsVisibility%2A&gt; is cleared.</param>
        <summary>Clears the &lt;xref:System.Windows.Controls.DataGridRow.DetailsVisibility%2A&gt; property for the <see cref="T:System.Windows.Controls.DataGridRow" /> that represents the specified data item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clearing the value does not necessarily restore the default visibility. For more information, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClipboardCopyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridClipboardCopyMode ClipboardCopyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridClipboardCopyMode ClipboardCopyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridClipboardCopyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates how content is copied to the clipboard.</summary>
        <value>One of the enumeration values that indicates how content is copied to the clipboard. The registered default is <see cref="T:System.Windows.Controls.DataGridClipboardCopyMode" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property to specify whether users can copy data from a <xref:System.Windows.Controls.DataGrid> control to the clipboard and whether column header values are included.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClipboardCopyModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipboardCopyModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipboardCopyModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.ClipboardCopyMode%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridColumnEventArgs&gt; ColumnDisplayIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridColumnEventArgs&gt; ColumnDisplayIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridColumnEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A&gt; property on one of the columns changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> property of a <xref:System.Windows.Controls.DataGridColumn> can be changed programmatically or when a user moves a column by dragging the header. Users can change the column order by dragging column headers only if the <xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A> property is `true`.  
  
 If the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> of a column changes, the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> of all columns to the right of the column in the <xref:System.Windows.Controls.DataGrid> are also changed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnFromDisplayIndex">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridColumn ColumnFromDisplayIndex (int displayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Controls.DataGridColumn ColumnFromDisplayIndex(int32 displayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridColumn</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="displayIndex">The zero-based index of the column to retrieve.</param>
        <summary>Gets the <see cref="T:System.Windows.Controls.DataGridColumn" /> at the specified index.</summary>
        <returns>The <see cref="T:System.Windows.Controls.DataGridColumn" /> at the specified &lt;xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A&gt;.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="displayIndex" /> is less than 0, or greater than or equal to the number of columns.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderDragCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.Primitives.DragCompletedEventArgs&gt; ColumnHeaderDragCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.Primitives.DragCompletedEventArgs&gt; ColumnHeaderDragCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.Primitives.DragCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user releases a column header after dragging it by using the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Users can change the column order by dragging column headers only if the <xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A> property is `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderDragDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.Primitives.DragDeltaEventArgs&gt; ColumnHeaderDragDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.Primitives.DragDeltaEventArgs&gt; ColumnHeaderDragDelta" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.Primitives.DragDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs every time the mouse position changes while the user drags a column header.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Users can change the column order by dragging column headers only if the <xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A> property is `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderDragStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.Primitives.DragStartedEventArgs&gt; ColumnHeaderDragStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.Primitives.DragStartedEventArgs&gt; ColumnHeaderDragStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.Primitives.DragStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user begins dragging a column header by using the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Users can change the column order by dragging column headers only if the <xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A> property is `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderHeight">
      <MemberSignature Language="C#" Value="public double ColumnHeaderHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ColumnHeaderHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the column headers row.</summary>
        <value>The height of the column headers row, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is &lt;xref:System.Double&gt;. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property to <xref:System.Double.NaN> to make the size of the column header automatically adjust to fit its content.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ColumnHeaderHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ColumnHeaderHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.ColumnHeaderHeight%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style ColumnHeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style ColumnHeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style applied to all column headers in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The style applied to all column headers in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apply a <xref:System.Windows.Style> to update the visual appearance of all the column headers in the <xref:System.Windows.Controls.DataGrid>. To define a <xref:System.Windows.Style> for a column header, specify a <xref:System.Windows.Style.TargetType%2A> of <xref:System.Windows.Controls.Primitives.DataGridColumnHeader>.  
  
 A <xref:System.Windows.Style> can be applied to all column headers, or to an individual column header. To apply a <xref:System.Windows.Style> to an individual header, set the <xref:System.Windows.Controls.DataGridColumn.HeaderStyle%2A?displayProperty=fullName> property, which takes precedence over the ColumnHeaderStyle property.  
  
   
  
## Examples  
 The following example uses a style resource to change the style of column headers in the <xref:System.Windows.Controls.DataGrid>. The style of the first column header is then set with an inline style that overrides the ColumnHeaderStyle.  
  
 [!code-xml[DataGrid_ColumnHeaderStyle#1](~/add/codesnippet/xaml/datagrid_columnheaderstyle/mainwindow.xaml#1)]
 [!code-xml[DataGrid_ColumnHeaderStyle#1](~/add/codesnippet/xaml/p-system.windows.control_173_1.xaml)]  
  
 The following illustration shows the output.  
  
 ![Styled DataGrid Column Headers](~/add/media/wpf-datagridcolumnheader.png "Styled DataGrid Column Headers")  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ColumnHeaderStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ColumnHeaderStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.ColumnHeaderStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridColumnEventArgs&gt; ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridColumnEventArgs&gt; ColumnReordered" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridColumnEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a column moves to a new position in the display order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Users can change the column order by dragging column headers only if the <xref:System.Windows.Controls.DataGrid.CanUserReorderColumns%2A> property is `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordering">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridColumnReorderingEventArgs&gt; ColumnReordering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridColumnReorderingEventArgs&gt; ColumnReordering" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridColumnReorderingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a column moves to a new position in the display order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle this event to customize the visual display of a column header drag operation, or to replace the default drag behavior completely. To customize the appearance of the dragged column header and the drop location indicator, set the <xref:System.Windows.Controls.DataGridColumnReorderingEventArgs.DragIndicator%2A> and <xref:System.Windows.Controls.DataGridColumnReorderingEventArgs.DropLocationIndicator%2A> properties. Alternatively, you can set the <xref:System.Windows.Controls.DataGrid.DragIndicatorStyle%2A> and <xref:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle%2A> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ObservableCollection&lt;System.Windows.Controls.DataGridColumn&gt; Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;class System.Windows.Controls.DataGridColumn&gt; Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;System.Windows.Controls.DataGridColumn&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection that contains all the columns in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The collection of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Columns collection to add columns, remove columns, or update properties on the columns.  
  
> [!NOTE]
>  The order of columns in the collection does not determine the order that they will appear in the <xref:System.Windows.Controls.DataGrid>. The <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> property determines the column order.  
  
 Each column in the Columns collection defines a column in the <xref:System.Windows.Controls.DataGrid>. The following table lists the four column types that the <xref:System.Windows.Controls.DataGrid> provides.  
  
|Column Type|Data Display|  
|-----------------|------------------|  
|<xref:System.Windows.Controls.DataGridHyperlinkColumn>|Use to display URI data.|  
|<xref:System.Windows.Controls.DataGridComboBoxColumn>|Use to display enumeration data.|  
|<xref:System.Windows.Controls.DataGridTextColumn>|Use to display text.|  
|<xref:System.Windows.Controls.DataGridCheckBoxColumn>|Use to display Boolean data.|  
  
 In addition, you can define your own custom column by using <xref:System.Windows.Controls.DataGridTemplateColumn>. Columns in the collection must derive from <xref:System.Windows.Controls.DataGridColumn>. Note that <xref:System.Windows.Controls.DataGridBoundColumn>, which adds support for binding, derives from <xref:System.Windows.Controls.DataGridColumn> and is the base for several of the defined column types.  
  
 All columns in the collection use the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> property defined by the <xref:System.Windows.Controls.DataGrid>.  
  
 You can modify the Columns collection at run time regardless of whether it contains generated columns.  
  
   
  
## Examples  
 The following example shows how to add a column to the collection.  
  
 [!code-xml[DataGrid_ColumnsManipulation#DataGrid2](~/add/codesnippet/xaml/datagrid_columnsmanipulation/window1.xaml#datagrid2)]  
  
 [!code-cs[DataGrid_ColumnsManipulation#Add1](~/add/codesnippet/csharp/datagrid_columnsmanipulation/window1.xaml.cs#add1)]
 [!code-vb[DataGrid_ColumnsManipulation#Add1](~/add/codesnippet/visualbasic/datagrid_columnsmanipulation_vb/window1.xaml.vb#add1)]  
[!code-cs[DataGrid_ColumnsManipulation#Add2](~/add/codesnippet/csharp/datagrid_columnsmanipulation/window1.xaml.cs#add2)]
[!code-vb[DataGrid_ColumnsManipulation#Add2](~/add/codesnippet/visualbasic/datagrid_columnsmanipulation_vb/window1.xaml.vb#add2)]  
  
 The following example shows how to remove a column from the collection.  
  
 [!code-xml[DataGrid_ColumnsManipulation#Delete](~/add/codesnippet/xaml/datagrid_columnsmanipulation/window1.xaml#delete)]  
[!code-xml[DataGrid_ColumnsManipulation#DataGrid](~/add/codesnippet/xaml/datagrid_columnsmanipulation/window1.xaml#datagrid)]  
  
 [!code-cs[DataGrid_ColumnsManipulation#Delete2](~/add/codesnippet/csharp/datagrid_columnsmanipulation/window1.xaml.cs#delete2)]
 [!code-vb[DataGrid_ColumnsManipulation#Delete2](~/add/codesnippet/visualbasic/datagrid_columnsmanipulation_vb/window1.xaml.vb#delete2)]  
  
 The following example shows how to set properties on columns in the collection when they are auto-generated and when an event occurs.  
  
 [!code-xml[DataGrid_ColumnsManipulation#Visible](~/add/codesnippet/xaml/datagrid_columnsmanipulation/window1.xaml#visible)]  
[!code-xml[DataGrid_ColumnsManipulation#DataGrid](~/add/codesnippet/xaml/datagrid_columnsmanipulation/window1.xaml#datagrid)]  
  
 [!code-cs[DataGrid_ColumnsManipulation#Visible2](~/add/codesnippet/csharp/datagrid_columnsmanipulation/window1.xaml.cs#visible2)]
 [!code-vb[DataGrid_ColumnsManipulation#Visible2](~/add/codesnippet/visualbasic/datagrid_columnsmanipulation_vb/window1.xaml.vb#visible2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridLength ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridLength ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridLength</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the standard width and sizing mode of columns and headers in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The width and sizing mode of the columns and headers, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is &lt;xref:System.Windows.Controls.DataGridLength.SizeToHeader%2A&gt;. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.DataGridColumn.Width%2A> property set on an individual <xref:System.Windows.Controls.DataGridColumn> takes precedence over the ColumnWidth property.  
  
 The <xref:System.Windows.Controls.DataGridLength.DisplayValue%2A> of the ColumnWidth property is constrained by the following properties if they are set, in order of precedence:  
  
-   <xref:System.Windows.Controls.DataGridColumn.MaxWidth%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Controls.DataGrid.MaxColumnWidth%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Controls.DataGridColumn.MinWidth%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Controls.DataGrid.MinColumnWidth%2A?displayProperty=fullName>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ColumnWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ColumnWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.ColumnWidth%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes the <see cref="F:System.Windows.Controls.DataGrid.CommitEditCommand" /> command for the cell or row currently in edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell or row exits edit mode, or if no cells or rows are in edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a cell is currently being edited, this method commits any pending changes to the cell without committing any pending changes to the row. This means that changes are propagated from the cell editing control to the pending row. If a cell is not currently being edited, all pending row edits are committed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit (System.Windows.Controls.DataGridEditingUnit editingUnit, bool exitEditingMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit(valuetype System.Windows.Controls.DataGridEditingUnit editingUnit, bool exitEditingMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editingUnit" Type="System.Windows.Controls.DataGridEditingUnit" />
        <Parameter Name="exitEditingMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="editingUnit">One of the enumeration values that specifies whether to commit row or cell edits.</param>
        <param name="exitEditingMode">
          <see langword="true" /> to exit edit mode; otherwise, <see langword="false" />.</param>
        <summary>Invokes the <see cref="F:System.Windows.Controls.DataGrid.CommitEditCommand" /> command for the specified cell or row currently in edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell or row exits edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method commits any pending changes for the specified <xref:System.Windows.Controls.DataGridEditingUnit> and exits edit mode.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommitEditCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand CommitEditCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand CommitEditCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the command that indicates the intention to commit pending changes to the current cell or row and exit edit mode.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyingRowClipboardContent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowClipboardEventArgs&gt; CopyingRowClipboardContent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowClipboardEventArgs&gt; CopyingRowClipboardContent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowClipboardEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the default row content is prepared.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Event listeners can modify or add to the row clipboard content.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCell">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridCellInfo CurrentCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridCellInfo CurrentCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridCellInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cell that has focus.</summary>
        <value>Information about the cell that has focus.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned is a structure that provides information about the cell and the data item associated with the cell. It is not an actual reference to the <xref:System.Windows.Controls.DataGridCell>container.  
  
 To set properties on the selected cells, you can set a trigger in the <xref:System.Windows.Controls.DataGrid.CellStyle%2A> property. For more information, see <xref:System.Windows.Controls.DataGrid.CellStyle%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;EventArgs&gt; CurrentCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; CurrentCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Controls.DataGrid.CurrentCell%2A&gt; property has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of <xref:System.Windows.Controls.DataGrid.CurrentCell%2A> property can change as a result of mouse or keyboard gestures, or because of a change to the <xref:System.Windows.Controls.DataGrid.CurrentColumn%2A> property value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CurrentCellProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CurrentCellProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CurrentCell%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentColumn">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridColumn CurrentColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataGridColumn CurrentColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the column that contains the current cell.</summary>
        <value>The column that contains the current cell. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A value of `null` indicates that an individual cell does not have focus. For example, a row has focus.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentColumnProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CurrentColumnProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CurrentColumnProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CurrentColumn%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentItem">
      <MemberSignature Language="C#" Value="public object CurrentItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data item bound to the row that contains the current cell.</summary>
        <value>The data item bound to the row that contains the current cell. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property gets the data item for the row that either has focus, or contains the cell that has focus. It is equivalent to the <xref:System.Windows.Controls.DataGridCellInfo.Item%2A?displayProperty=fullName> value returned by the <xref:System.Windows.Controls.DataGrid.CurrentCell%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentItemProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CurrentItemProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CurrentItemProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.CurrentItem%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteCommand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the command that indicates the intention to delete the current row.</summary>
        <value>The &lt;xref:System.Windows.Input.ApplicationCommands.Delete%2A?displayProperty=fullName&gt; command that indicates the intention to delete the current row.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DragIndicatorStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style DragIndicatorStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style DragIndicatorStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style that is used when rendering the drag indicator that is displayed while dragging a column header.</summary>
        <value>The style applied to a column header when dragging. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To define a <xref:System.Windows.Style> for the drag indicator, specify a <xref:System.Windows.Style.TargetType%2A> of <xref:System.Windows.Controls.Control>.  
  
 You can set properties in the style to change the appearance of certain elements of the drag indicator, such as the border around the column header. However, the default template for the drag indicator uses a <xref:System.Windows.Media.VisualBrush> to paint a <xref:System.Windows.Controls.Canvas> with an image of the original column header that is being dragged. As a result, if you set some properties in your style, such as <xref:System.Windows.Controls.Control.Background%2A> or <xref:System.Windows.Controls.Control.Foreground%2A>, they will appear to not be applied. To change the appearance of the column header while it is being dragged, apply a new template that does not use the default <xref:System.Windows.Media.VisualBrush>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DragIndicatorStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DragIndicatorStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DragIndicatorStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.DragIndicatorStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DropLocationIndicatorStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style DropLocationIndicatorStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style DropLocationIndicatorStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style that is applied to indicate the drop location when dragging a column header.</summary>
        <value>The style applied to a column header. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To define a <xref:System.Windows.Style> for the drop location indicator, specify a <xref:System.Windows.Style.TargetType%2A> of <xref:System.Windows.Controls.Separator>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DropLocationIndicatorStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DropLocationIndicatorStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DropLocationIndicatorStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableColumnVirtualization">
      <MemberSignature Language="C#" Value="public bool EnableColumnVirtualization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableColumnVirtualization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether column virtualization is enabled.</summary>
        <value>
          <see langword="true" /> if column virtualization is enabled; otherwise, <see langword="false" />. The registered default is <see langword="false" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableColumnVirtualizationProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EnableColumnVirtualizationProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EnableColumnVirtualizationProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.EnableColumnVirtualization%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableRowVirtualization">
      <MemberSignature Language="C#" Value="public bool EnableRowVirtualization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRowVirtualization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether row virtualization is enabled.</summary>
        <value>
          <see langword="true" /> if row virtualization is enabled; otherwise, <see langword="false" />. The registered default is <see langword="true" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To improve performance, the EnableRowVirtualization property is set to `true` by default. When the EnableRowVirtualization property is set to `true`, the <xref:System.Windows.Controls.DataGrid> does not instantiate a <xref:System.Windows.Controls.DataGridRow> object for each data item in the bound data source. Instead, the <xref:System.Windows.Controls.DataGrid> creates <xref:System.Windows.Controls.DataGridRow> objects only when they are needed, and reuses them as much as it can. For example, the <xref:System.Windows.Controls.DataGrid> creates a <xref:System.Windows.Controls.DataGridRow> object for each data item that is currently in view and recycles the row when it scrolls out of view.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableRowVirtualizationProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EnableRowVirtualizationProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EnableRowVirtualizationProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.EnableRowVirtualization%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FocusBorderBrushKey">
      <MemberSignature Language="C#" Value="public static System.Windows.ComponentResourceKey FocusBorderBrushKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.ComponentResourceKey FocusBorderBrushKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ComponentResourceKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the key that references the default border brush for a focused cell.</summary>
        <value>The key that references the default brush for a focused cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default style for <xref:System.Windows.Controls.DataGrid> references this brush to create a thicker border around a focused cell.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FrozenColumnCount">
      <MemberSignature Language="C#" Value="public int FrozenColumnCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FrozenColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of non-scrolling columns.</summary>
        <value>The number of non-scrolling columns. The registered default is 0. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Frozen columns are columns that are always displayed and cannot be scrolled out of visibility. Frozen columns are always the leftmost columns in display order. You cannot drag frozen columns into the group of unfrozen columns or drag unfrozen columns into the group of frozen columns.  
  
 To freeze columns, set the FrozenColumnCount property. The leftmost columns specified by the FrozenColumnCount number will become frozen. For example, if you set the FrozenColumnCount to 2, the two left columns in the display are frozen. To determine whether a column is already frozen, check the <xref:System.Windows.Controls.DataGridColumn.IsFrozen%2A> property on the <xref:System.Windows.Controls.DataGridColumn>.  
  
   
  
## Examples  
 The following example shows how to make a column frozen when "Freeze Column" is selected from the <xref:System.Windows.Controls.ContextMenu>. Columns are moved to the left in order to be included in the frozen columns.  
  
 [!code-xml[DataGrid_FrozenColumn#1](~/add/codesnippet/xaml/datagrid_frozencolumns/window1.xaml#1)]  
  
 [!code-cs[DataGrid_FrozenColumn#2](~/add/codesnippet/csharp/datagrid_frozencolumns/window1.xaml.cs#2)]
 [!code-vb[DataGrid_FrozenColumn#2](~/add/codesnippet/visualbasic/datagrid_frozencolumn_vb/window1.xaml.vb#2)]  
[!code-cs[DataGrid_FrozenColumn#3](~/add/codesnippet/csharp/datagrid_frozencolumns/window1.xaml.cs#3)]
[!code-vb[DataGrid_FrozenColumn#3](~/add/codesnippet/visualbasic/datagrid_frozencolumn_vb/window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FrozenColumnCountProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FrozenColumnCountProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FrozenColumnCountProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.FrozenColumnCount%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GenerateColumns">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.DataGridColumn&gt; GenerateColumns (System.ComponentModel.IItemProperties itemProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.DataGridColumn&gt; GenerateColumns(class System.ComponentModel.IItemProperties itemProperties) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.DataGridColumn&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemProperties" Type="System.ComponentModel.IItemProperties" />
      </Parameters>
      <Docs>
        <param name="itemProperties">The properties of the object to be in the columns.</param>
        <summary>Generates columns for the specified properties of an object.</summary>
        <returns>The collection of columns for the properties of the object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each row in the data grid is bound to an object in the data source, and each column in the data grid is bound to a property of the data object. This method generates a collection that contains a column for each property.  
  
 Calling the GenerateColumns method provides the same functionality as setting the <xref:System.Windows.Controls.DataGrid.AutoGenerateColumns%2A> property to `true`. You will typically not call this method from your code.  
  
 This method is provided to enable designer tools to generate a collection of columns that can be edited by the user and then placed into the data grid. A designer tool can use the GenerateColumns method to return a collection of auto-generated columns. The designer tool can then provide a user interface to enable the user to edit the column types, and add or remove columns as necessary. The column collection can then be used to populate the <xref:System.Windows.Controls.DataGrid.Columns%2A> collection of the data grid by adding each column to the collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="itemProperties" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.DependencyObject GetContainerForItemOverride ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.DependencyObject GetContainerForItemOverride() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Instantiates a new <see cref="T:System.Windows.Controls.DataGridRow" />.</summary>
        <returns>The row that is the container.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDetailsVisibilityForItem">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility GetDetailsVisibilityForItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Visibility GetDetailsVisibilityForItem(object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The data item in the row for which &lt;xref:System.Windows.Controls.DataGridRow.DetailsVisibility%2A&gt; is returned.</param>
        <summary>Gets the &lt;xref:System.Windows.Controls.DataGridRow.DetailsVisibility%2A&gt; property for the <see cref="T:System.Windows.Controls.DataGridRow" /> that represents the specified data item.</summary>
        <returns>The visibility for the row that contains the <paramref name="item" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridLinesVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridGridLinesVisibility GridLinesVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridGridLinesVisibility GridLinesVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridGridLinesVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates which grid lines are shown.</summary>
        <value>One of the enumeration values that specifies which grid lines are shown in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see cref="T:System.Windows.Controls.DataGridGridLinesVisibility" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies whether the lines that separate rows and columns are visible. The appearance of the lines when they are visible is specified by the <xref:System.Windows.Controls.DataGrid.VerticalGridLinesBrush%2A> and <xref:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush%2A> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridLinesVisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty GridLinesVisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty GridLinesVisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.GridLinesVisibility%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HandlesScrolling">
      <MemberSignature Language="C#" Value="protected override bool HandlesScrolling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandlesScrolling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.DataGrid" /> supports custom keyboard scrolling.</summary>
        <value>
          <see langword="true" /> in all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is used to notify the <xref:System.Windows.Controls.ScrollViewer> of the <xref:System.Windows.Controls.DataGrid> that keyboard input has been handled by the <xref:System.Windows.Controls.DataGrid>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeadersVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridHeadersVisibility HeadersVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridHeadersVisibility HeadersVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridHeadersVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value that specifies the visibility of the row and column headers.</summary>
        <value>One of the enumeration values that indicates the visibility of row and column headers. The registered default is <see cref="T:System.Windows.Controls.DataGridHeadersVisibility" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies whether the row and column headers are visible. The appearance of the headers when they are visible is specified by the <xref:System.Windows.Controls.DataGrid.RowHeaderStyle%2A> and <xref:System.Windows.Controls.DataGrid.ColumnHeaderStyle%2A> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeadersVisibilityConverter">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.IValueConverter HeadersVisibilityConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Data.IValueConverter HeadersVisibilityConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the converter that converts a <see cref="T:System.Windows.Controls.DataGridHeadersVisibility" /> to a <see cref="T:System.Windows.Visibility" />.</summary>
        <value>The converter that converts a <see cref="T:System.Windows.Controls.DataGridHeadersVisibility" /> to a <see cref="T:System.Windows.Visibility" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can be used in the <xref:System.Windows.Controls.DataGrid> template to control which parts of the <xref:System.Windows.Controls.DataGrid> are visible for a particular <xref:System.Windows.Controls.DataGridHeadersVisibility>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeadersVisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeadersVisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeadersVisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.HeadersVisibility%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalGridLinesBrush">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush HorizontalGridLinesBrush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush HorizontalGridLinesBrush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the brush that is used to draw the horizontal grid lines.</summary>
        <value>The brush that is used to draw the horizontal grid lines in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is a black <see cref="T:System.Windows.Media.SolidColorBrush" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Horizontal grid lines separate the rows in the <xref:System.Windows.Controls.DataGrid>. This property has no effect if the <xref:System.Windows.Controls.DataGrid.GridLinesVisibility%2A> property is set to <xref:System.Windows.Controls.DataGridGridLinesVisibility> or <xref:System.Windows.Controls.DataGridGridLinesVisibility>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalGridLinesBrushProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalGridLinesBrushProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalGridLinesBrushProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBarVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates how horizontal scroll bars are displayed in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>One of the enumeration values that specifies the visibility of horizontal scroll bars in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see cref="T:System.Windows.Controls.ScrollBarVisibility" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBarVisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalScrollBarVisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalScrollBarVisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitializingNewItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.InitializingNewItemEventHandler InitializingNewItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.InitializingNewItemEventHandler InitializingNewItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.InitializingNewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a new item is created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event enables event handler to initialize the new item with custom default values.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsItemItsOwnContainerOverride">
      <MemberSignature Language="C#" Value="protected override bool IsItemItsOwnContainerOverride (object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsItemItsOwnContainerOverride(object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The item to test.</param>
        <summary>Determines if an item is a <see cref="T:System.Windows.Controls.DataGridRow" />.</summary>
        <returns>
          <see langword="true" /> if the item is a <see cref="T:System.Windows.Controls.DataGridRow" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can edit values in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>
          <see langword="true" /> if the rows and cells are read-only; otherwise, <see langword="false" />. The registered default is <see langword="false" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set the IsReadOnly property to `true` to make all the cells in the <xref:System.Windows.Controls.DataGrid> read-only. To make individual columns or cells read-only, set the <xref:System.Windows.Controls.DataGridColumn.IsReadOnly%2A?displayProperty=fullName> or <xref:System.Windows.Controls.DataGridCell.IsReadOnly%2A?displayProperty=fullName> properties. If a conflict exists between the settings at the <xref:System.Windows.Controls.DataGrid>, column, or cell levels, a value of `true` takes precedence over a value of `false`.  
  
 If this property is set to `true` while the control is in editing mode, all pending edits are discarded.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnlyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsReadOnlyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsReadOnlyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.IsReadOnly%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadingRow">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowEventArgs&gt; LoadingRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowEventArgs&gt; LoadingRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a <see cref="T:System.Windows.Controls.DataGridRow" /> is instantiated, so that you can customize it before it is used.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To improve performance, the <xref:System.Windows.Controls.DataGrid.EnableRowVirtualization%2A> property is set to `true` by default. When the <xref:System.Windows.Controls.DataGrid.EnableRowVirtualization%2A> property is set to `true`, the <xref:System.Windows.Controls.DataGrid> does not instantiate a <xref:System.Windows.Controls.DataGridRow> object for each data item in the bound data source. Instead, the <xref:System.Windows.Controls.DataGrid> creates <xref:System.Windows.Controls.DataGridRow> objects only when they are needed, and reuses them as much as it can. For example, the <xref:System.Windows.Controls.DataGrid> creates a <xref:System.Windows.Controls.DataGridRow> object for each data item that is currently in view and recycles the row when it scrolls out of view.  
  
 This event enables you to make any necessary changes to a row before it is used. To undo these customizations before a row is reused, handle the <xref:System.Windows.Controls.DataGrid.UnloadingRow>event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadingRowDetails">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowDetailsEventArgs&gt; LoadingRowDetails;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowDetailsEventArgs&gt; LoadingRowDetails" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowDetailsEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a new row details template is applied to a row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs one time for each row to which a new row details template is applied. A new details template is applied to a row in one of the following cases:  
  
-   The row <xref:System.Windows.Controls.DataGridRow.DetailsTemplate%2A> property value changes.  
  
-   The row <xref:System.Windows.Controls.DataGridRow.DetailsTemplate%2A> property value is `null` and the <xref:System.Windows.Controls.DataGrid.RowDetailsTemplate%2A> property value changes.  
  
 This event enables you to make any necessary changes to the row details element before it is used. To undo these customizations before the row details element is reused, handle the <xref:System.Windows.Controls.DataGrid.UnloadingRowDetails>event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxColumnWidth">
      <MemberSignature Language="C#" Value="public double MaxColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum width constraint of the columns and headers in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The maximum width of the columns and headers in the <see cref="T:System.Windows.Controls.DataGrid" />, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is &lt;xref:System.Double.PositiveInfinity&gt;. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set a value for the MaxColumnWidth property, it must be greater than or equal to 0.0.  
  
 <xref:System.Double.NaN?displayProperty=fullName> is not a valid value for this property. The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set a value that is not valid, a run-time exception is thrown.  
  
 The <xref:System.Windows.Controls.DataGridLength.DisplayValue%2A> of the <xref:System.Windows.Controls.DataGrid.ColumnWidth%2A?displayProperty=fullName> and <xref:System.Windows.Controls.DataGridColumn.Width%2A?displayProperty=fullName> properties are constrained by the following properties if they are set, in order of precedence:  
  
-   <xref:System.Windows.Controls.DataGridColumn.MaxWidth%2A?displayProperty=fullName>  
  
-   MaxColumnWidth  
  
-   <xref:System.Windows.Controls.DataGridColumn.MinWidth%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Controls.DataGrid.MinColumnWidth%2A?displayProperty=fullName>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxColumnWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxColumnWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxColumnWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.MaxColumnWidth%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The maximum size that the <see cref="T:System.Windows.Controls.DataGrid" /> can occupy.</param>
        <summary>Determines the desired size of the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <returns>The desired size of the <see cref="T:System.Windows.Controls.DataGrid" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinColumnWidth">
      <MemberSignature Language="C#" Value="public double MinColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum width constraint of the columns and headers in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The minimum width of the columns and headers, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is 20. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set a value for the MinColumnWidth property, it must be greater than or equal to 0.0.  
  
 <xref:System.Double.PositiveInfinity?displayProperty=fullName> and <xref:System.Double.NaN?displayProperty=fullName> are not valid values for this property. The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set a value that is not valid, a run-time exception is thrown.  
  
 The <xref:System.Windows.Controls.DataGridLength.DisplayValue%2A> of the <xref:System.Windows.Controls.DataGrid.ColumnWidth%2A?displayProperty=fullName> and <xref:System.Windows.Controls.DataGridColumn.Width%2A?displayProperty=fullName> properties are constrained by the following properties if they are set, in order of precedence:  
  
-   <xref:System.Windows.Controls.DataGridColumn.MaxWidth%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Controls.DataGrid.MaxColumnWidth%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Controls.DataGridColumn.MinWidth%2A?displayProperty=fullName>  
  
-   MinColumnWidth  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinColumnWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinColumnWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinColumnWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.MinColumnWidth%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinRowHeight">
      <MemberSignature Language="C#" Value="public double MinRowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinRowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum height constraint of the rows and headers in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The minimum height constraint of rows, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is 0.0. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set a value for the MinRowHeight property, it must be greater than or equal to 0.0.  
  
 <xref:System.Double.PositiveInfinity?displayProperty=fullName> and <xref:System.Double.NaN?displayProperty=fullName> are not valid values for this property. The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set a value that is not valid, a run-time exception is thrown.  
  
 If a conflict exists between the MinRowHeight property and the <xref:System.Windows.Controls.DataGrid.RowHeight%2A> property, MinRowHeight takes precedence. However, the <xref:System.Windows.FrameworkElement.Height%2A> property set on an individual <xref:System.Windows.Controls.DataGridRow> has higher precedence than a property set at the <xref:System.Windows.Controls.DataGrid> level and is not constrained by the MinRowHeight property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinRowHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinRowHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinRowHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.MinRowHeight%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewItemMargin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness NewItemMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness NewItemMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the margin for the new item row.</summary>
        <value>The margin for the new item row.  
  
 The registered default is 0. For more information about what can influence the value, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_NewItemMargin"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.DataGrid.NewItemMarginProperty>|  
|Metadata properties set to `True`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewItemMarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NewItemMarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NewItemMarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.NewItemMargin%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NonFrozenColumnsViewportHorizontalOffset">
      <MemberSignature Language="C#" Value="public double NonFrozenColumnsViewportHorizontalOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 NonFrozenColumnsViewportHorizontalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal offset of the scrollable columns in the view port.</summary>
        <value>The horizontal offset of the scrollable columns. The registered default is 0.0. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NonFrozenColumnsViewportHorizontalOffsetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NonFrozenColumnsViewportHorizontalOffsetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NonFrozenColumnsViewportHorizontalOffsetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.NonFrozenColumnsViewportHorizontalOffset%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAddingNewItem">
      <MemberSignature Language="C#" Value="protected virtual void OnAddingNewItem (System.Windows.Controls.AddingNewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAddingNewItem(class System.Windows.Controls.AddingNewItemEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.AddingNewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.AddingNewItem" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public override void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnApplyTemplate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked whenever application code or internal processes call &lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoGeneratedColumns">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoGeneratedColumns (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoGeneratedColumns(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratedColumns" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAutoGeneratedColumns method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoGeneratingColumn">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoGeneratingColumn (System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoGeneratingColumn(class System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAutoGeneratingColumn method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeginningEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeginningEdit (System.Windows.Controls.DataGridBeginningEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeginningEdit(class System.Windows.Controls.DataGridBeginningEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridBeginningEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.BeginningEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables derived classes to prevent the cell from entering edit mode.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnBeginningEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCanExecuteBeginEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCanExecuteBeginEdit (System.Windows.Input.CanExecuteRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCanExecuteBeginEdit(class System.Windows.Input.CanExecuteRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event associated with the <see cref="F:System.Windows.Controls.DataGrid.BeginEditCommand" /> command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCanExecuteCancelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCanExecuteCancelEdit (System.Windows.Input.CanExecuteRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCanExecuteCancelEdit(class System.Windows.Input.CanExecuteRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event associated with the <see cref="F:System.Windows.Controls.DataGrid.CancelEditCommand" /> command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCanExecuteCommitEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCanExecuteCommitEdit (System.Windows.Input.CanExecuteRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCanExecuteCommitEdit(class System.Windows.Input.CanExecuteRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event associated with the <see cref="F:System.Windows.Controls.DataGrid.CommitEditCommand" /> command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCanExecuteCopy">
      <MemberSignature Language="C#" Value="protected virtual void OnCanExecuteCopy (System.Windows.Input.CanExecuteRoutedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCanExecuteCopy(class System.Windows.Input.CanExecuteRoutedEventArgs args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event associated with the &lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt; command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCanExecuteDelete">
      <MemberSignature Language="C#" Value="protected virtual void OnCanExecuteDelete (System.Windows.Input.CanExecuteRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCanExecuteDelete(class System.Windows.Input.CanExecuteRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event associated with the &lt;xref:System.Windows.Controls.DataGrid.DeleteCommand%2A&gt; command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellEditEnding">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEditEnding (System.Windows.Controls.DataGridCellEditEndingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEditEnding(class System.Windows.Controls.DataGridCellEditEndingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridCellEditEndingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.CellEditEnding" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables derived classes to cancel the operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellEditEnding method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDisplayIndexChanged (System.Windows.Controls.DataGridColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnDisplayIndexChanged(class System.Windows.Controls.DataGridColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.DataGrid> requires that the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> property of all columns must be unique integers from 0 to<xref:System.Windows.Controls.DataGrid.Columns%2A><xref:System.Windows.Controls.ColumnDefinitionCollection.Count%2A> -1. Therefore, when the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> of one column changes, the change will typically cause the <xref:System.Windows.Controls.DataGridColumn.DisplayIndex%2A> of other columns to change too.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnDisplayIndexChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderDragCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderDragCompleted (System.Windows.Controls.Primitives.DragCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnHeaderDragCompleted(class System.Windows.Controls.Primitives.DragCompletedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.Primitives.DragCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeaderDragCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderDragDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderDragDelta (System.Windows.Controls.Primitives.DragDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnHeaderDragDelta(class System.Windows.Controls.Primitives.DragDeltaEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.Primitives.DragDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnHeaderDragDelta" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeaderDragDelta method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderDragStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderDragStarted (System.Windows.Controls.Primitives.DragStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnHeaderDragStarted(class System.Windows.Controls.Primitives.DragStartedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.Primitives.DragStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnHeaderDragStarted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeaderDragStarted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Controls.DataGridColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Controls.DataGridColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordered" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnReordered method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordering">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordering (System.Windows.Controls.DataGridColumnReorderingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnReordering(class System.Windows.Controls.DataGridColumnReorderingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridColumnReorderingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordering" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnReordering method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected override void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The item whose context menu was opened.</param>
        <summary>Selects a cell if its context menu is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called when a context menu is opened on an unselected cell or row.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCopyingRowClipboardContent">
      <MemberSignature Language="C#" Value="protected virtual void OnCopyingRowClipboardContent (System.Windows.Controls.DataGridRowClipboardEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCopyingRowClipboardContent(class System.Windows.Controls.DataGridRowClipboardEventArgs args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.Controls.DataGridRowClipboardEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.CopyingRowClipboardContent" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method prepares the clipboard content for each selected row before the <xref:System.Windows.Controls.DataGrid.CopyingRowClipboardContent> event is raised. The value of the <xref:System.Windows.Controls.DataGrid.ClipboardCopyMode%2A> property specifies whether the column header content is prepared in addition to the row content.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the automation peer for this <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <returns>The automation peer for this <see cref="T:System.Windows.Controls.DataGrid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Automation.Peers.DataGridAutomationPeer> exposes the <xref:System.Windows.Controls.DataGrid> to UI automation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.CurrentCellChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCurrentCellChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExecutedBeginEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnExecutedBeginEdit (System.Windows.Input.ExecutedRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExecutedBeginEdit(class System.Windows.Input.ExecutedRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event associated with the <see cref="F:System.Windows.Controls.DataGrid.BeginEditCommand" /> command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExecutedCancelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnExecutedCancelEdit (System.Windows.Input.ExecutedRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExecutedCancelEdit(class System.Windows.Input.ExecutedRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event associated with the <see cref="F:System.Windows.Controls.DataGrid.CancelEditCommand" /> command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExecutedCommitEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnExecutedCommitEdit (System.Windows.Input.ExecutedRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExecutedCommitEdit(class System.Windows.Input.ExecutedRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event associated with the <see cref="F:System.Windows.Controls.DataGrid.CommitEditCommand" /> command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExecutedCopy">
      <MemberSignature Language="C#" Value="protected virtual void OnExecutedCopy (System.Windows.Input.ExecutedRoutedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExecutedCopy(class System.Windows.Input.ExecutedRoutedEventArgs args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event associated with the &lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt; command.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">&lt;xref:System.Windows.Controls.DataGrid.ClipboardCopyMode%2A&gt; is set to <see cref="T:System.Windows.Controls.DataGridClipboardCopyMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExecutedDelete">
      <MemberSignature Language="C#" Value="protected virtual void OnExecutedDelete (System.Windows.Input.ExecutedRoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExecutedDelete(class System.Windows.Input.ExecutedRoutedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event associated with the &lt;xref:System.Windows.Controls.DataGrid.DeleteCommand%2A&gt; command.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInitializingNewItem">
      <MemberSignature Language="C#" Value="protected virtual void OnInitializingNewItem (System.Windows.Controls.InitializingNewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitializingNewItem(class System.Windows.Controls.InitializingNewItemEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.InitializingNewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.InitializingNewItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables derived classes to initialize the item with custom default values.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnInitializingNewItem method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected override void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Called when the &lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt; property changes on this element.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemsChanged">
      <MemberSignature Language="C#" Value="protected override void OnItemsChanged (System.Collections.Specialized.NotifyCollectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnItemsChanged(class System.Collections.Specialized.NotifyCollectionChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Performs column auto generation and updates validation flags when items change.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemsSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnItemsSourceChanged (System.Collections.IEnumerable oldValue, System.Collections.IEnumerable newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnItemsSourceChanged(class System.Collections.IEnumerable oldValue, class System.Collections.IEnumerable newValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.Collections.IEnumerable" />
        <Parameter Name="newValue" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="oldValue">The old source.</param>
        <param name="newValue">The new source.</param>
        <summary>Invoked when the &lt;xref:System.Windows.Controls.ItemsControl.ItemsSource%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Controls.DataGrid.AutoGenerateColumns%2A> property is `true`, columns are regenerated when the <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> property changes. If possible, the cell or row selection will be maintained.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The Information about the event.</param>
        <summary>Invoked when the <see cref="E:System.Windows.UIElement.KeyDown" /> event is received.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about default keyboard behavior in the <xref:System.Windows.Controls.DataGrid>, see [Default Keyboard and Mouse Behavior in the DataGrid Control](~/add/includes/ajax-current-ext-md.md)  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLoadingRow">
      <MemberSignature Language="C#" Value="protected virtual void OnLoadingRow (System.Windows.Controls.DataGridRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoadingRow(class System.Windows.Controls.DataGridRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRow" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLoadingRow method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLoadingRowDetails">
      <MemberSignature Language="C#" Value="protected virtual void OnLoadingRowDetails (System.Windows.Controls.DataGridRowDetailsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoadingRowDetails(class System.Windows.Controls.DataGridRowDetailsEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridRowDetailsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowDetails" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLoadingRowDetails method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The mouse data.</param>
        <summary>Updates the collection of items that are selected due to the user dragging the mouse in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreparingCellForEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnPreparingCellForEdit (System.Windows.Controls.DataGridPreparingCellForEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreparingCellForEdit(class System.Windows.Controls.DataGridPreparingCellForEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridPreparingCellForEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.PreparingCellForEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables derived classes to modify the contents of the cell before it enters edit mode. This method is invoked from <xref:System.Windows.Controls.DataGridCell> (instead of <xref:System.Windows.Controls.DataGrid>) when it has entered edit mode.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPreparingCellForEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDetailsVisibilityChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDetailsVisibilityChanged (System.Windows.Controls.DataGridRowDetailsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowDetailsVisibilityChanged(class System.Windows.Controls.DataGridRowDetailsEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridRowDetailsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDetailsVisibilityChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowEditEnding">
      <MemberSignature Language="C#" Value="protected virtual void OnRowEditEnding (System.Windows.Controls.DataGridRowEditEndingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowEditEnding(class System.Windows.Controls.DataGridRowEditEndingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridRowEditEndingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.RowEditEnding" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables derived classes to cancel the operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowEditEnding method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedCellsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedCellsChanged (System.Windows.Controls.SelectedCellsChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedCellsChanged(class System.Windows.Controls.SelectedCellsChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.SelectedCellsChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.SelectedCellsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSelectedCellsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectionChanged (System.Windows.Controls.SelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectionChanged(class System.Windows.Controls.SelectionChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.SelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Invoked when the selection changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method changes the selected items in the <xref:System.Windows.Controls.DataGrid>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSorting">
      <MemberSignature Language="C#" Value="protected virtual void OnSorting (System.Windows.Controls.DataGridSortingEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorting(class System.Windows.Controls.DataGridSortingEventArgs eventArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="System.Windows.Controls.DataGridSortingEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.Sorting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method causes a default sort to occur on the column that raised the event if the sort event is not marked as handled.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSorting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTemplateChanged">
      <MemberSignature Language="C#" Value="protected override void OnTemplateChanged (System.Windows.Controls.ControlTemplate oldTemplate, System.Windows.Controls.ControlTemplate newTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTemplateChanged(class System.Windows.Controls.ControlTemplate oldTemplate, class System.Windows.Controls.ControlTemplate newTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldTemplate" Type="System.Windows.Controls.ControlTemplate" />
        <Parameter Name="newTemplate" Type="System.Windows.Controls.ControlTemplate" />
      </Parameters>
      <Docs>
        <param name="oldTemplate">The old template.</param>
        <param name="newTemplate">The new template.</param>
        <summary>Called whenever the template of the <see cref="T:System.Windows.Controls.DataGrid" /> changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected override void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation marks the <xref:System.Windows.UIElement.TextInput> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUnloadingRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUnloadingRow (System.Windows.Controls.DataGridRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnloadingRow(class System.Windows.Controls.DataGridRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRow" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnUnloadingRow method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUnloadingRowDetails">
      <MemberSignature Language="C#" Value="protected virtual void OnUnloadingRowDetails (System.Windows.Controls.DataGridRowDetailsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnloadingRowDetails(class System.Windows.Controls.DataGridRowDetailsEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.DataGridRowDetailsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The data for the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowDetails" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnUnloadingRowDetails method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrepareContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override void PrepareContainerForItemOverride (System.Windows.DependencyObject element, object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PrepareContainerForItemOverride(class System.Windows.DependencyObject element, object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="element">The new <see cref="T:System.Windows.Controls.DataGridRow" />.</param>
        <param name="item">The data item that the row contains.</param>
        <summary>Prepares a new row for the specified item.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreparingCellForEdit">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridPreparingCellForEditEventArgs&gt; PreparingCellForEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridPreparingCellForEditEventArgs&gt; PreparingCellForEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridPreparingCellForEditEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell enters edit mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle this event to modify a cell when it enters edit mode.  
  
 This event occurs after the <xref:System.Windows.Controls.DataGrid.BeginningEdit> event if that event is not canceled.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowBackground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush RowBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush RowBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default brush for the row background.</summary>
        <value>The brush that paints the background of a row. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowBackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowBackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowBackgroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowBackground%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsScrollingConverter">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.IValueConverter RowDetailsScrollingConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Data.IValueConverter RowDetailsScrollingConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the converter that converts a Boolean value to a <see cref="T:System.Windows.Controls.SelectiveScrollingOrientation" />.</summary>
        <value>The converter that converts a Boolean value to a <see cref="T:System.Windows.Controls.SelectiveScrollingOrientation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can be used in the <xref:System.Windows.Controls.DataGrid> template to control how the row details scroll based on the <xref:System.Windows.Controls.DataGrid.AreRowDetailsFrozen%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate RowDetailsTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate RowDetailsTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template that is used to display the row details.</summary>
        <value>The template that is used to display the row details. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can customize the data presentation in the <xref:System.Windows.Controls.DataGrid> by adding a row details section. Adding a row details section enables you to group some data in a template that is optionally visible or collapsed.  
  
 You define the row details template as either inline XAML or as a resource. A data template that is added as a resource can be used throughout the project without re-creating the template. A data template that is added as inline XAML is only accessible from the control where it is defined.  
  
 You can modify the RowDetailsTemplate before it is displayed by handling the <xref:System.Windows.Controls.DataGrid.LoadingRowDetails> event. You should handle the <xref:System.Windows.Controls.DataGrid.UnloadingRowDetails> event to undo changes that are made while loading the row details.  
  
   
  
## Examples  
 The following example shows a <xref:System.Windows.Controls.DataGrid> with a RowDetailsTemplate defined inline. The <xref:System.Windows.Controls.DataGrid> displays three values in each row and three more values in the details section when the row is selected. This example is part of a larger example available in the [How to: Add Row Details to a DataGrid Control](~/add/includes/ajax-current-ext-md.md) topic.  
  
 [!code-xml[DataGrid_RowDetails#1](~/add/codesnippet/xaml/wpfapplication1/mainwindow.xaml#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowDetailsTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowDetailsTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowDetailsTemplate%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector RowDetailsTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector RowDetailsTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template selector that is used for the row details.</summary>
        <value>The template selector that is used for the row details. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowDetailsTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowDetailsTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowDetailsTemplateSelector%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsVisibilityChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowDetailsEventArgs&gt; RowDetailsVisibilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowDetailsEventArgs&gt; RowDetailsVisibilityChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowDetailsEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the visibility of a row details element changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs once for each row details element that is shown or collapsed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsVisibilityMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridRowDetailsVisibilityMode RowDetailsVisibilityMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridRowDetailsVisibilityMode RowDetailsVisibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridRowDetailsVisibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates when the details section of a row is displayed.</summary>
        <value>One of the enumeration values that specifies the visibility of row details. The registered default is <see cref="T:System.Windows.Controls.DataGridRowDetailsVisibilityMode" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the row details section is displayed for selected rows if a <xref:System.Windows.Controls.DataGrid.RowDetailsTemplate%2A> is defined. Set this property to <xref:System.Windows.Controls.DataGridRowDetailsVisibilityMode> to show the details for all rows or <xref:System.Windows.Controls.DataGridRowDetailsVisibilityMode> to hide the details for all rows.  
  
 The <xref:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged> event occurs when this property is changed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDetailsVisibilityModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowDetailsVisibilityModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowDetailsVisibilityModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowEditEnding">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowEditEndingEventArgs&gt; RowEditEnding;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowEditEndingEventArgs&gt; RowEditEnding" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowEditEndingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a row edit is committed or canceled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can cancel this event by setting the <xref:System.Windows.Controls.DataGridRowEditEndingEventArgs.Cancel%2A> property of the `e` argument to `true` in the event handler. If canceled, the row remains in edit mode.  
  
 If this event is not canceled, the specified <xref:System.Windows.Controls.DataGridRowEditEndingEventArgs.EditAction%2A> will be performed to commit or cancel the edit.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderActualWidth">
      <MemberSignature Language="C#" Value="public double RowHeaderActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RowHeaderActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered width of the row headers column.</summary>
        <value>The rendered width of the row header, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is 0.0. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This value is computed from the measure of all the visible row headers during layout. The value is set by the layout system itself, based on an actual rendering pass. For more information about how layout is computed, see [Layout](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowHeaderActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowHeaderActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowHeaderActualWidth%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style RowHeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style RowHeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style applied to all row headers.</summary>
        <value>The style applied to all row headers in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apply a <xref:System.Windows.Style> to update the visual appearance of all the row headers in the <xref:System.Windows.Controls.DataGrid>. To define a <xref:System.Windows.Style> for a row header, specify a <xref:System.Windows.Style.TargetType%2A> of <xref:System.Windows.Controls.Primitives.DataGridRowHeader>.  
  
 You can also use the RowHeaderStyle property to update any property of <xref:System.Windows.Controls.Primitives.DataGridRowHeader>.  
  
 A <xref:System.Windows.Style> can be applied to all row headers, or to an individual row header. To apply a <xref:System.Windows.Style> to an individual header, set the <xref:System.Windows.Controls.DataGridRow.HeaderStyle%2A?displayProperty=fullName> property, which takes precedence over the RowHeaderStyle property.  
  
   
  
## Examples  
 The following example shows how to display numbered rows in the row header by applying a binding with a value converter to the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Primitives.DataGridRowHeader>. The converter is created as a resource by mapping the namespace and creating an instance of the class. For more information, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-xml[DataGrid_RowHeader#1](~/add/codesnippet/xaml/datagrid_rowheader/window1.xaml#1)]  
  
 [!code-vb[DataGrid_RowHeader#2](~/add/codesnippet/visualbasic/datagrid_rowheader_vb/window1.xaml.vb#2)]
 [!code-cs[DataGrid_RowHeader#2](~/add/codesnippet/csharp/datagrid_rowheader/window1.xaml.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowHeaderStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowHeaderStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowHeaderStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate RowHeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate RowHeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or set the template for the row headers.</summary>
        <value>The template for the row headers. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowHeaderTemplate property defines the <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> for the <xref:System.Windows.Controls.Primitives.DataGridRowHeader>. The RowHeaderTemplate does not inherit the data context from the <xref:System.Windows.Controls.DataGrid>. To set the row header content to display values based on the row data, bind to the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Primitives.DataGridRowHeader> by using the <xref:System.Windows.Controls.DataGrid.RowHeaderStyle%2A> property. For more information, see <xref:System.Windows.Controls.DataGrid.RowHeaderStyle%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowHeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowHeaderTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowHeaderTemplate%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector RowHeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector RowHeaderTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template selector for row headers.</summary>
        <value>The template selector for row headers. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowHeaderTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowHeaderTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowHeaderTemplateSelector%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderWidth">
      <MemberSignature Language="C#" Value="public double RowHeaderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RowHeaderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the row header column.</summary>
        <value>The width of the row header column, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is &lt;xref:System.Double&gt;. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set a value for the RowHeaderWidth property, it must be equal to or greater than 0.0. Set this property to <xref:System.Double.NaN> ("Auto" in XAML) to make the row header automatically adjust its size to fit its content.  
  
 <xref:System.Double.PositiveInfinity?displayProperty=fullName> is not a valid value for this property. The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set a value that is not valid, a run-time exception is thrown.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowHeaderWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowHeaderWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowHeaderWidth%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeight">
      <MemberSignature Language="C#" Value="public double RowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the suggested height for all rows.</summary>
        <value>The height of the rows, in [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]. The registered default is &lt;xref:System.Double&gt;. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set a value for the RowHeight property, it must be equal to or greater than 0.0. Set this property to <xref:System.Double.NaN> ("Auto" in XAML) to make the row automatically adjust its size to fit its content.  
  
 <xref:System.Double.PositiveInfinity?displayProperty=fullName> is not a valid value for this property. The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism. If you attempt to set a value that is not valid, a run-time exception is thrown.  
  
 The RowHeight property is applied to each <xref:System.Windows.Controls.DataGridRow> that does not have its <xref:System.Windows.FrameworkElement.Height%2A> property set. If a conflict exists between the RowHeight property and the <xref:System.Windows.Controls.DataGrid.MinRowHeight%2A> property, <xref:System.Windows.Controls.DataGrid.MinRowHeight%2A> takes precedence.  
  
 Setting RowHeight tells the layout system the amount of space requested by each row. The return value of this property is always the value that it was set to. To get the actual amount of space allocated, use the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property of the <xref:System.Windows.Controls.DataGridRow>. For more information about space allocation, see [Layout](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowHeight%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style RowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style RowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style applied to all rows.</summary>
        <value>The style applied to all rows in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apply a <xref:System.Windows.Style> to change the visual appearance of all rows in the <xref:System.Windows.Controls.DataGrid>. To define a <xref:System.Windows.Style> for a row, specify a <xref:System.Windows.Style.TargetType%2A> of <xref:System.Windows.Controls.DataGridRow>.  
  
 A <xref:System.Windows.Style> can be applied to all rows in the <xref:System.Windows.Controls.DataGrid> or to an individual row. To apply a <xref:System.Windows.Style> to an individual row, set the <xref:System.Windows.FrameworkElement.Style%2A> property directly on the <xref:System.Windows.Controls.DataGridRow>, which takes precedence over the RowStyle property.  
  
 If this property has a non-null value, it will override the value of the <xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A> property.  
  
   
  
## Examples  
 The following example sets the <xref:System.Windows.Controls.Control.Background%2A> color of all the rows and uses a trigger to change the <xref:System.Windows.Controls.Control.Background%2A> and <xref:System.Windows.Controls.Control.Foreground%2A> colors when the mouse pointer is over the row.  
  
 [!code-xml[DataGrid_RowStyle#1](~/add/codesnippet/xaml/p-system.windows.control_98_1.xaml)]
 [!code-xml[DataGrid_RowStyle#1](~/add/codesnippet/xaml/datagrid_rowstyle/mainwindow.xaml#1)]  
  
 The following illustration shows the output.  
  
 ![Custom DataGrid Row Style](~/add/media/wpf-datagridrowstyle.png "Custom DataGrid Row Style")  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowStyleSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.StyleSelector RowStyleSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.StyleSelector RowStyleSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.StyleSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style selector for the rows.</summary>
        <value>The style selector for the rows. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property has a non-null value, it will override the value of the <xref:System.Windows.Controls.ItemsControl.ItemContainerStyleSelector%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowStyleSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowStyleSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowStyleSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowStyleSelector%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowValidationErrorTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ControlTemplate RowValidationErrorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ControlTemplate RowValidationErrorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ControlTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template that is used to visually indicate an error in row validation.</summary>
        <value>The template that is used to visually indicate an error in row validation. The registered default is <see langword="null" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.DataGrid> control enables you to perform validation at both the cell and row level. With cell-level validation, you validate individual properties of a bound data object when a user updates a value. With row-level validation, you validate entire data objects when a user commits changes to a row. You can provide customized visual feedback for row-level validation errors by specifying a <xref:System.Windows.Controls.ControlTemplate> that defines the appearance of the error indicator. Set the RowValidationErrorTemplate property to `null` to use the default error indicator.  
  
   
  
## Examples  
 The following example replaces the default row validation feedback with a more visible indicator. When a user enters an invalid value, a red circle with a white exclamation mark appears in the row header. The associated error message is displayed in a ToolTip. This code example is part of a larger example provided for the [How to: Implement Validation with the DataGrid Control](~/add/includes/ajax-current-ext-md.md) topic.  
  
 [!code-xml[DataGrid_Validation#RowValidationFeedbackXaml](~/add/codesnippet/xaml/datagridvalidation/mainwindow.xaml#rowvalidationfeedbackxaml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowValidationErrorTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RowValidationErrorTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RowValidationErrorTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.RowValidationErrorTemplate%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ObservableCollection&lt;System.Windows.Controls.ValidationRule&gt; RowValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;class System.Windows.Controls.ValidationRule&gt; RowValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rules that are used to validate the data in each row.</summary>
        <value>The rules that are used to validate the data in each row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.DataGrid> control enables you to perform validation at both the cell and row level. With cell-level validation, you validate individual properties of a bound data object when a user updates a value. With row-level validation, you validate entire data objects when a user commits changes to a row. To create a custom validation rule, create a class that derives from the <xref:System.Windows.Controls.ValidationRule> class and implement the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. Add the custom validation rule to the RowValidationRules collection.  
  
 If the <xref:System.Windows.Controls.ItemsControl.ItemBindingGroup%2A> property is used, the RowValidationRules property is ignored.  
  
   
  
## Examples  
 The following example demonstrates a <xref:System.Windows.Controls.ValidationRule> that checks whether the `StartDate` property value for a `Course` object is earlier than its `EndDate` property value. This code example is part of a larger example provided for the [How to: Implement Validation with the DataGrid Control](~/add/includes/ajax-current-ext-md.md) topic.  
  
 [!code-cs[DataGrid_Validation#CourseValidationRule](~/add/codesnippet/csharp/datagridvalidation/mainwindow.xaml.cs#coursevalidationrule)]
 [!code-vb[DataGrid_Validation#CourseValidationRule](~/add/codesnippet/visualbasic/datagridvalidation/mainwindow.xaml.vb#coursevalidationrule)]  
  
 The following example sets the RowValidationRules property in XAML. The <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> property is set to <xref:System.Windows.Controls.ValidationStep> so that the validation occurs only after the bound data object is updated. When a user specifies an end date that is earlier than the start date, a red exclamation mark (!) appears in the row header.  
  
 [!code-xml[DataGrid_Validation#RowValidationRulesXaml](~/add/codesnippet/xaml/datagridvalidation/mainwindow.xaml#rowvalidationrulesxaml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The data item to bring into view.</param>
        <summary>Scrolls the <see cref="T:System.Windows.Controls.DataGrid" /> vertically to display the row for the specified data item.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (object item, System.Windows.Controls.DataGridColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(object item, class System.Windows.Controls.DataGridColumn column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="column" Type="System.Windows.Controls.DataGridColumn" />
      </Parameters>
      <Docs>
        <param name="item">The data item to bring into view.</param>
        <param name="column">The column to bring into view.</param>
        <summary>Scrolls the <see cref="T:System.Windows.Controls.DataGrid" /> vertically and horizontally to display a cell for the specified data item and column.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `column` is `null`, only a vertical scroll is performed. If `item` is `null`, only a horizontal scroll is performed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectAllCells">
      <MemberSignature Language="C#" Value="public void SelectAllCells ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectAllCells() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selects all the cells in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default shortcut key for selecting all cells is CTRL+A.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectAllCommand">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectAllCommand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectAllCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the command that indicates the intention to select all cells in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>The &lt;xref:System.Windows.Input.ApplicationCommands.SelectAll%2A?displayProperty=fullName&gt; command that indicates the intention to select all cells in the <see cref="T:System.Windows.Controls.DataGrid" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedCells">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Windows.Controls.DataGridCellInfo&gt; SelectedCells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Controls.DataGridCellInfo&gt; SelectedCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Windows.Controls.DataGridCellInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of cells that are currently selected.</summary>
        <value>The list of cells that are currently selected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There are three selection modes for <xref:System.Windows.Controls.DataGrid>. The selection mode is set with the <xref:System.Windows.Controls.DataGrid.SelectionUnit%2A> property. Depending on the <xref:System.Windows.Controls.DataGrid.SelectionUnit%2A>, SelectedCells or <xref:System.Windows.Controls.Primitives.MultiSelector.SelectedItems%2A> will contain a collection of selected items as defined in the following table.  
  
|<xref:System.Windows.Controls.DataGridSelectionUnit> value|SelectedCells value|<xref:System.Windows.Controls.Primitives.MultiSelector.SelectedItems%2A> value|  
|------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Controls.DataGridSelectionUnit>|Collection of selected cells|Empty|  
|<xref:System.Windows.Controls.DataGridSelectionUnit>|Collection of cells in the selected rows|Collection of selected rows|  
|<xref:System.Windows.Controls.DataGridSelectionUnit>|Collection of selected cells, including all cells in a selected row|Collection of selected rows or empty if no full rows are selected|  
  
 When a cell is selected, the <xref:System.Windows.Controls.DataGridCell.Selected?displayProperty=fullName> event is raised, the <xref:System.Windows.Controls.DataGridCell.IsSelected%2A?displayProperty=fullName> property is set to `true`, and the cell is added to the SelectedCells collection.  
  
 When a row is selected, the <xref:System.Windows.Controls.DataGridRow.Selected?displayProperty=fullName> event is raised, the <xref:System.Windows.Controls.DataGridRow.IsSelected%2A?displayProperty=fullName> property is set to `true`, and the row is added to the <xref:System.Windows.Controls.Primitives.MultiSelector.SelectedItems%2A> collection.  
  
 When the selection changes, the <xref:System.Windows.Controls.Primitives.Selector.SelectionChanged> and <xref:System.Windows.Controls.DataGrid.SelectedCellsChanged> events are raised if the new or old selection contains a row. The <xref:System.Windows.Controls.Primitives.Selector.SelectionChanged> event is not raised if the new or old selection contains only cells.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedCellsChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.SelectedCellsChangedEventHandler SelectedCellsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.SelectedCellsChangedEventHandler SelectedCellsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SelectedCellsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Controls.DataGrid.SelectedCells%2A&gt; collection changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle the SelectedCellsChanged event to be notified when the collection of selected cells is changed. If the selection includes full rows, the <xref:System.Windows.Controls.Primitives.Selector.SelectionChanged?displayProperty=fullName> event is also raised.  
  
 You can retrieve the <xref:System.Windows.Controls.SelectedCellsChangedEventArgs.AddedCells%2A> and <xref:System.Windows.Controls.SelectedCellsChangedEventArgs.RemovedCells%2A> from the <xref:System.Windows.Controls.SelectedCellsChangedEventArgs> in the event handler.  
  
   
  
## Examples  
 The following example shows how to handle the SelectedCellsChanged event and clear the values in the newly selected cells.  
  
 [!code-xml[DataGrid_CellSelection#1](~/add/codesnippet/xaml/datagrid_cellselection/window1.xaml#1)]  
  
 [!code-cs[DataGrid_CellSelection#3](~/add/codesnippet/csharp/datagrid_cellselection/window1.xaml.cs#3)]
 [!code-vb[DataGrid_CellSelection#3](~/add/codesnippet/visualbasic/datagrid_cellselection_vb/window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridSelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridSelectionMode SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridSelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates how rows and cells are selected in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>One of the enumeration values that specifies how rows and cells are selected in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see cref="T:System.Windows.Controls.DataGridSelectionMode" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectionMode and <xref:System.Windows.Controls.DataGrid.SelectionUnit%2A> properties together define the selection behavior for the <xref:System.Windows.Controls.DataGrid>.  
  
 If the selection mode is <xref:System.Windows.Controls.DataGridSelectionMode>, the user can select multiple items where the item type is defined by the <xref:System.Windows.Controls.DataGrid.SelectionUnit%2A> property. If the selection mode is <xref:System.Windows.Controls.DataGridSelectionMode>, the user can only select single items.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectionModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectionModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.SelectionMode%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionUnit">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataGridSelectionUnit SelectionUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.DataGridSelectionUnit SelectionUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridSelectionUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether rows, cells, or both can be selected in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>One of the enumeration values that specifies whether rows, cells, or both can be selected in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see cref="T:System.Windows.Controls.DataGridSelectionUnit" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.DataGrid.SelectionMode%2A> and SelectionUnit properties together define the selection behavior for the <xref:System.Windows.Controls.DataGrid>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionUnitProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectionUnitProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectionUnitProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.SelectionUnit%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetDetailsVisibilityForItem">
      <MemberSignature Language="C#" Value="public void SetDetailsVisibilityForItem (object item, System.Windows.Visibility detailsVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDetailsVisibilityForItem(object item, valuetype System.Windows.Visibility detailsVisibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="detailsVisibility" Type="System.Windows.Visibility" />
      </Parameters>
      <Docs>
        <param name="item">The object in the row for which &lt;xref:System.Windows.Controls.DataGridRow.DetailsVisibility%2A&gt; is being set.</param>
        <param name="detailsVisibility">The <see cref="T:System.Windows.Visibility" /> to set for the row that contains the item.</param>
        <summary>Sets the value of the &lt;xref:System.Windows.Controls.DataGridRow.DetailsVisibility%2A&gt; property for the <see cref="T:System.Windows.Controls.DataGridRow" /> that contains the specified object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SetDetailsVisibilityForItem method when a <xref:System.Windows.Controls.DataGridRow> does not currently exist for an `item`; for example, while a row is being auto-generated.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.DataGridSortingEventHandler Sorting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.DataGridSortingEventHandler Sorting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataGridSortingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a column is being sorted.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UnloadingRow">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowEventArgs&gt; UnloadingRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowEventArgs&gt; UnloadingRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Windows.Controls.DataGridRow" /> object becomes available for reuse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To improve performance, the <xref:System.Windows.Controls.DataGrid.EnableRowVirtualization%2A> property is set to `true` by default. When the <xref:System.Windows.Controls.DataGrid.EnableRowVirtualization%2A> property is set to `true`, the <xref:System.Windows.Controls.DataGrid> does not instantiate a <xref:System.Windows.Controls.DataGridRow> object for each data item in the bound data source. Instead, the <xref:System.Windows.Controls.DataGrid> creates <xref:System.Windows.Controls.DataGridRow> objects only when they are needed, and reuses them as much as it can. For example, the <xref:System.Windows.Controls.DataGrid> creates a <xref:System.Windows.Controls.DataGridRow> object for each data item that is currently in view and recycles the row when it scrolls out of view.  
  
 This event enables you to make any necessary changes to a row before it is reused. You typically use this event to undo any changes that were made in a <xref:System.Windows.Controls.DataGrid.LoadingRow> event handler.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UnloadingRowDetails">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.DataGridRowDetailsEventArgs&gt; UnloadingRowDetails;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.DataGridRowDetailsEventArgs&gt; UnloadingRowDetails" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.DataGridRowDetailsEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row details element becomes available for reuse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs one time for each row to which a new row details template is applied or for which a row details template is removed. A new details template is applied or removed in one of the following cases:  
  
-   The row <xref:System.Windows.Controls.DataGridRow.DetailsTemplate%2A> property value changes.  
  
-   The row <xref:System.Windows.Controls.DataGridRow.DetailsTemplate%2A> property value is `null` and the <xref:System.Windows.Controls.DataGrid.RowDetailsTemplate%2A> property value changes.  
  
 This event enables you to make any necessary changes to the row details element before it is reused. You will typically use this event to undo any changes that were made in a <xref:System.Windows.Controls.DataGrid.LoadingRowDetails> event handler.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UnselectAllCells">
      <MemberSignature Language="C#" Value="public void UnselectAllCells ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnselectAllCells() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unselects all the cells in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalGridLinesBrush">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush VerticalGridLinesBrush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush VerticalGridLinesBrush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the brush that is used to draw the vertical grid lines.</summary>
        <value>The brush that is used to draw the vertical grid lines in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is a black <see cref="T:System.Windows.Media.SolidColorBrush" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vertical grid lines separate the columns in the <xref:System.Windows.Controls.DataGrid>. This property has no effect if the <xref:System.Windows.Controls.DataGrid.GridLinesVisibility%2A> property is set to <xref:System.Windows.Controls.DataGridGridLinesVisibility> or <xref:System.Windows.Controls.DataGridGridLinesVisibility>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalGridLinesBrushProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalGridLinesBrushProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalGridLinesBrushProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.VerticalGridLinesBrush%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBarVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates how vertical scroll bars are displayed in the <see cref="T:System.Windows.Controls.DataGrid" />.</summary>
        <value>One of the enumeration values that specifies the visibility of vertical scroll bars in the <see cref="T:System.Windows.Controls.DataGrid" />. The registered default is <see cref="T:System.Windows.Controls.ScrollBarVisibility" />. For more information about what can influence the value, see <see cref="T:System.Windows.DependencyProperty" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBarVisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalScrollBarVisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalScrollBarVisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>