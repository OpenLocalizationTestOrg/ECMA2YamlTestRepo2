<Type Name="HeaderedItemsControl" FullName="System.Windows.Controls.HeaderedItemsControl">
  <TypeSignature Language="C#" Value="public class HeaderedItemsControl : System.Windows.Controls.ItemsControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HeaderedItemsControl extends System.Windows.Controls.ItemsControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ItemsControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Header")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Menu)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a control that contains multiple items and has a header.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this class to create a control that contains a heading (or title) and multiple items. The <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A?displayProperty=fullName> property can be any type. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] ships three controls that inherit from HeaderedItemsControl:  
  
-   <xref:System.Windows.Controls.MenuItem>  
  
-   <xref:System.Windows.Controls.ToolBar>  
  
-   <xref:System.Windows.Controls.TreeViewItem>  
  
 A HeaderedItemsControl has a limited default style. To create a HeaderedItemsControl with a custom appearance, create a new <xref:System.Windows.Controls.ControlTemplate>.  
  
 Set the <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A> property to specify the label of the HeaderedItemsControl.  <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A> can be any type of object.  Set the <xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A> property to a <xref:System.Windows.DataTemplate> to customize the header.  For more information about data templates, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).  
  
 Dependency properties for this control might be set by the control’s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
   
  
## Examples  
 The following example creates a <xref:System.Windows.Controls.TreeViewItem>. The <xref:System.Windows.Controls.TreeView> control contains a single <xref:System.Windows.Controls.TreeViewItem>, which is labeled `TreeViewItem 1`, and has the following items:  
  
-   A string.  
  
-   A <xref:System.DateTime> object.  
  
-   A <xref:System.Windows.Controls.TreeViewItem> object that contains a <xref:System.Windows.Shapes.Rectangle> in its <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>.  
  
-   A <xref:System.Windows.Controls.TreeViewItem> object whose <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A> property is set to a <xref:System.Windows.Controls.StackPanel> that contains two objects.  
  
> [!NOTE]
>  The example explicitly creates <xref:System.Windows.Controls.TreeViewItem> objects for the last two items because <xref:System.Windows.Shapes.Rectangle> and <xref:System.Windows.Controls.StackPanel> inherit from the <xref:System.Windows.Media.Visual> class. The default style for the <xref:System.Windows.Controls.TreeViewItem> sets the <xref:System.Windows.Controls.Control.Foreground%2A> property. The child objects inherit the property value from the explicitly created <xref:System.Windows.Controls.TreeViewItem>, which is typically the desired behavior.  
  
 [!code-xml[ControlContentOverviewSnippets#17](~/add/codesnippet/xaml/ControlContentOverviewSnippets/Window1.xaml#17)]  
  
 The following example creates a <xref:System.Windows.Controls.ControlTemplate> for a HeaderedItemsControl.  
  
 [!code-xml[HeaderedItemsControl#HeaderedItemsControl_Style](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_style)]  
[!code-xml[HeaderedItemsControl#HeaderedItemsControl](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HeaderedItemsControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasHeader">
      <MemberSignature Language="C#" Value="public bool HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> has a header.</summary>
        <value>
          <see langword="true" /> if the control has a header; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A> property is `null`, this property returns `false`.  
  
<a name="dependencyPropertyInfo_HasHeader"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedItemsControl.HasHeaderProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to use this property to determine whether the control has a header.  
  
 [!code-cs[HeaderedItemsControl#HeaderedItemsControl_HasHeader](~/add/codesnippet/csharp/HeaderedItemsControlSimple/Page1.xaml.cs#headereditemscontrol_hasheader)]
 [!code-vb[HeaderedItemsControl#HeaderedItemsControl_HasHeader](~/add/codesnippet/visualbasic/headereditemscontrolsimple/page1.xaml.vb#headereditemscontrol_hasheader)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasHeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasHeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasHeaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HasHeader%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public object Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Header" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the item that labels the control.</summary>
        <value>An object that labels the <see cref="T:System.Windows.Controls.HeaderedItemsControl" />. The default is <see langword="null" />. A header can be a string or a <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the Header property is of type <xref:System.Object>, there are no restrictions on what you can put in the Header. The Header is displayed by a <xref:System.Windows.Controls.ContentPresenter>, which is in the <xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A> of the <xref:System.Windows.Controls.HeaderedItemsControl>. For more information about how the <xref:System.Windows.Controls.ContentPresenter> displays the Header, see <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="xamlAttributeUsage_Header"></a>   
## XAML Attribute Usage  
  
```  
<object Header="headerString"/>  
```  
  
<a name="xamlPropertyElementUsage_Header"></a>   
## XAML Property Element Usage  
  
```  
<object>  
  <object.Header>  
    <UIElement />  
  </object.Header>  
</object>  
  
```  
  
<a name="xamlValues_Header"></a>   
## XAML Values  
 *headerString*  
 The string to use as a heading.  
  
<a name="dependencyPropertyInfo_Header"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedItemsControl.HeaderProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to create and use a header template to specify the appearance of the header.  
  
 [!code-xml[HeaderedItemsControl#HeaderedItemsControl_Style](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_style)]  
[!code-xml[HeaderedItemsControl#HeaderedItemsControl_Template1](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_template1)]  
[!code-xml[HeaderedItemsControl#HeaderedItemsControl_Template2](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_template2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedItemsControl.Header%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormat">
      <MemberSignature Language="C#" Value="public string HeaderStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a composite string that specifies how to format the &lt;xref:System.Windows.Controls.HeaderedItemsControl.Header%2A&gt; property if it is displayed as a string.</summary>
        <value>A composite string that specifies how to format the &lt;xref:System.Windows.Controls.HeaderedItemsControl.Header%2A&gt; property if it is displayed as a string.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderStringFormatProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template used to display the contents of the control's header.</summary>
        <value>A data template used to display a control's header. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To customize the heading of the <xref:System.Windows.Controls.HeaderedItemsControl>, set this property to a <xref:System.Windows.DataTemplate>. For more information on data templates, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_HeaderTemplate"></a>   
## XAML Attribute Usage  
  
```  
<object HeaderTemplate="{ResourceExtension TemplateResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplate"></a>   
## XAML Property Element Usage  
  
<a name="xamlValues_HeaderTemplate"></a>   
## XAML Values  
 *ResourceExtension*  
 One of the following: `StaticResource`, or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *TemplateResourceKey*  
 The key that identifies the template being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Property element syntax is technically possible, but not recommended. See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md). A binding reference using  or  is also possible, but uncommon.  
  
<a name="dependencyPropertyInfo_HeaderTemplate"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to create and use a header template to specify the appearance of the header.  
  
 [!code-xml[HeaderedItemsControl#HeaderedItemsControl_Style](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_style)]  
[!code-xml[HeaderedItemsControl#HeaderedItemsControl_Template1](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_template1)]  
[!code-xml[HeaderedItemsControl#HeaderedItemsControl_Template2](~/add/codesnippet/xaml/HeaderedItemsControlSimple/Page1.xaml#headereditemscontrol_template2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object that provides custom selection logic for a template used to display the header of each item.</summary>
        <value>A data template selector. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that, then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. After your class is defined, you can assign an instance of the class to the template selector property of your element.  
  
 If both the HeaderTemplateSelector and the <xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A> properties are set, the template selector property is ignored.  
  
<a name="xamlAttributeUsage_HeaderTemplateSelector"></a>   
## XAML Attribute Usage  
  
```  
<object HeaderTemplateSelector="{ResourceExtension DataTemplateSelectorClassKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplateSelector"></a>   
## XAML Property Element Usage  
  
```  
<object>  
  <object.HeaderTemplateSelector>  
    <MyDataTemplateSelectorImplementation .../>  
  </object.HeaderTemplateSelector>  
</object>  
```  
  
<a name="xamlValues_HeaderTemplateSelector"></a>   
## XAML Values  
 *MyDataTemplateSelectorImplementation*  
 A class derived from <xref:System.Windows.Controls.DataTemplateSelector> that implements a practical <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> override. For information about how to map your custom class, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  
  
 *ResourceExtension*  
 One of the following: `StaticResource`, or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *DataTemplateSelectorClassKey*  
 The key that identifies the selector implementation being requested. The key refers to a derived class that implements a practical <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> override. For information about how to map your custom class, see [XAML Namespaces and Namespace Mapping for WPF XAML](../Topic/XAML%20Namespaces%20and%20Namespace%20Mapping%20for%20WPF%20XAML.md). You can also programmatically add an instance of your <xref:System.Windows.Controls.DataTemplateSelector> class as a resource to a resource dictionary.  
  
<a name="dependencyPropertyInfo_HeaderTemplateSelector"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelectorProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator to the logical child elements of the <see cref="T:System.Windows.Controls.HeaderedItemsControl" />.</summary>
        <value>An enumerator. The default is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderChanged (object oldHeader, object newHeader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderChanged(object oldHeader, object newHeader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeader" Type="System.Object" />
        <Parameter Name="newHeader" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldHeader">The old value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.Header%2A&gt; property.</param>
        <param name="newHeader">The new value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.Header%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedItemsControl.Header%2A&gt; property of a <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderStringFormatChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderStringFormatChanged (string oldHeaderStringFormat, string newHeaderStringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderStringFormat" Type="System.String" />
        <Parameter Name="newHeaderStringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldHeaderStringFormat">The old value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat%2A&gt; property.</param>
        <param name="newHeaderStringFormat">The new value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat%2A&gt; property.</param>
        <summary>Occurs when the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateChanged (System.Windows.DataTemplate oldHeaderTemplate, System.Windows.DataTemplate newHeaderTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateChanged(class System.Windows.DataTemplate oldHeaderTemplate, class System.Windows.DataTemplate newHeaderTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="newHeaderTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplate">The old value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A&gt; property.</param>
        <param name="newHeaderTemplate">The new value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateSelectorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateSelectorChanged (System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateSelectorChanged(class System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, class System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
        <Parameter Name="newHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplateSelector">The old value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector%2A&gt; property.</param>
        <param name="newHeaderTemplateSelector">The new value of the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the string representation of a <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> object.</summary>
        <returns>A string that represents this object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns a string that contains information about the header property and the number of items in the <xref:System.Windows.Controls.ItemsControl.Items%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>