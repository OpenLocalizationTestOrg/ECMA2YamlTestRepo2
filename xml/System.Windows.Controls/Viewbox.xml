<Type Name="Viewbox" FullName="System.Windows.Controls.Viewbox">
  <TypeSignature Language="C#" Value="public class Viewbox : System.Windows.Controls.Decorator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Viewbox extends System.Windows.Controls.Decorator" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Decorator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines a content decorator that can stretch and scale a single child to fill the available space.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A Viewbox can only have one <xref:System.Windows.Controls.Viewbox.Child%2A>. If you add an additional <xref:System.Windows.Controls.Viewbox.Child%2A>, you cause an <xref:System.ArgumentException> at run time.  
  
   
  
## Examples  
 The following example shows how to create an instance of a Viewbox and set common properties in code.  
  
 [!code-cs[ViewBoxCode#2](~/add/codesnippet/csharp/ViewboxCode/ViewboxCode.cs#2)]
 [!code-cpp[ViewBoxCode#2](~/add/codesnippet/cpp/viewboxcode/ViewboxCode.cpp#2)]
 [!code-vb[ViewBoxCode#2](~/add/codesnippet/visualbasic/ViewBoxCodeVB/ViewBoxCodeVB.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Viewbox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Viewbox" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeSize">The <see cref="T:System.Windows.Size" /> this element uses to arrange its child elements.</param>
        <summary>Arranges the content of a <see cref="T:System.Windows.Controls.Viewbox" /> element.</summary>
        <returns>
          <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.Viewbox" /> element and its child elements.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Viewbox> always sets its <xref:System.Windows.Controls.Viewbox.Child%2A> to the <xref:System.Windows.UIElement.DesiredSize%2A>. It then computes and applies a transformation from that <xref:System.Windows.Size> to the available space. <xref:System.Windows.Controls.Viewbox> determines available space by subtracting the margin of its <xref:System.Windows.Controls.Viewbox.Child%2A> from the input <xref:System.Windows.Size> of its elements.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Child">
      <MemberSignature Language="C#" Value="public override System.Windows.UIElement Child { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Child" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the single child of a <see cref="T:System.Windows.Controls.Viewbox" /> element.</summary>
        <value>The single child of a <see cref="T:System.Windows.Controls.Viewbox" /> element. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you add an additional child element to a <xref:System.Windows.Controls.Viewbox> it causes an <xref:System.ArgumentException> at run time.  
  
   
  
## Examples  
 The following example shows how to create an instance of a <xref:System.Windows.Controls.Viewbox> and then set its child property by using code.  
  
 [!code-cs[ViewBoxCode#1](~/add/codesnippet/csharp/ViewboxCode/ViewboxCode.cs#1)]
 [!code-cpp[ViewBoxCode#1](~/add/codesnippet/cpp/viewboxcode/ViewboxCode.cpp#1)]
 [!code-vb[ViewBoxCode#1](~/add/codesnippet/visualbasic/ViewBoxCodeVB/ViewBoxCodeVB.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index position of the wanted <see cref="T:System.Windows.Media.Visual" /> child.</param>
        <summary>Gets a <see cref="T:System.Windows.Media.Visual" /> child at the specified <paramref name="index" /> position.</summary>
        <returns>A <see cref="T:System.Windows.Media.Visual" /> child of the parent <see cref="T:System.Windows.Controls.Viewbox" /> element.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator that can iterate the logical children of this <see cref="T:System.Windows.Controls.Viewbox" /> element.</summary>
        <value>An &lt;xref:System.Collections.IEnumerator&gt;. This property has no default value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size constraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="constraint">A <see cref="T:System.Windows.Size" /> limit that <see cref="T:System.Windows.Controls.Viewbox" /> cannot exceed.</param>
        <summary>Measures the child elements of a <see cref="T:System.Windows.Controls.Viewbox" /> prior to arranging them during the &lt;xref:System.Windows.Controls.WrapPanel.ArrangeOverride%2A&gt; pass.</summary>
        <returns>The <see cref="T:System.Windows.Size" /> that represents the element size you want.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The parent <xref:System.Windows.UIElement> for <xref:System.Windows.Controls.Viewbox> typically calls this method, which performs the first layout pass.  
  
 <xref:System.Windows.Controls.Viewbox> measures its child at an infinite `constraint`, allowing the child to be as large as it requires.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Stretch">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Stretch Stretch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Stretch Stretch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Stretch</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Controls.Viewbox" /> <see cref="T:System.Windows.Media.Stretch" /> mode, which determines how content fits into the available space.</summary>
        <value>A <see cref="T:System.Windows.Media.Stretch" /> that determines how content fits in the available space. The default is <see cref="T:System.Windows.Media.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_Stretch"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Viewbox.StretchProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 The following example shows how to create an instance of <xref:System.Windows.Controls.Viewbox> and then set the Stretch property by using code.  
  
 [!code-cs[ViewBoxCode#2](~/add/codesnippet/csharp/ViewboxCode/ViewboxCode.cs#2)]
 [!code-cpp[ViewBoxCode#2](~/add/codesnippet/cpp/viewboxcode/ViewboxCode.cpp#2)]
 [!code-vb[ViewBoxCode#2](~/add/codesnippet/visualbasic/ViewBoxCodeVB/ViewBoxCodeVB.vb#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StretchDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.StretchDirection StretchDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.StretchDirection StretchDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.StretchDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Controls.StretchDirection" />, which determines how scaling is applied to the contents of a <see cref="T:System.Windows.Controls.Viewbox" />.</summary>
        <value>A <see cref="T:System.Windows.Controls.StretchDirection" /> that determines how scaling is applied to the contents of a <see cref="T:System.Windows.Controls.Viewbox" />. The default is <see cref="T:System.Windows.Controls.StretchDirection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property determines the scaling restrictions that apply to the contents of a <xref:System.Windows.Controls.Viewbox>. For example, use this property to prevent the contents of a <xref:System.Windows.Controls.Viewbox> from being smaller or larger than its original size.  
  
<a name="dependencyPropertyInfo_StretchDirection"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Viewbox.StretchDirectionProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 The following example shows how to create an instance of <xref:System.Windows.Controls.Viewbox> and then set the StretchDirection property by using code.  
  
 [!code-cs[ViewBoxCode#2](~/add/codesnippet/csharp/ViewboxCode/ViewboxCode.cs#2)]
 [!code-cpp[ViewBoxCode#2](~/add/codesnippet/cpp/viewboxcode/ViewboxCode.cpp#2)]
 [!code-vb[ViewBoxCode#2](~/add/codesnippet/visualbasic/ViewBoxCodeVB/ViewBoxCodeVB.vb#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StretchDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StretchDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StretchDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Viewbox.StretchDirection%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StretchProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StretchProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StretchProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Viewbox.Stretch%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of child <see cref="T:System.Windows.Media.Visual" /> objects in this instance of <see cref="T:System.Windows.Controls.Viewbox" />.</summary>
        <value>The number of <see cref="T:System.Windows.Media.Visual" /> children.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property always returns 1.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>