<Type Name="GroupStyle" FullName="System.Windows.Controls.GroupStyle">
  <TypeSignature Language="C#" Value="public class GroupStyle : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi GroupStyle extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines how you want the group to look at each level.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following examples show an <xref:System.Windows.Controls.ItemsControl> that is bound to an <xref:System.Windows.Data.XmlDataProvider> and the code-behind content that contains the logic to add and remove grouping. When the check box is checked, the content of the <xref:System.Windows.Controls.ItemsControl> is grouped by the `Type` attribute.  
  
 Each group is of type <xref:System.Windows.Data.CollectionViewGroup>. The GroupStyle <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> is specified so that it appears as a <xref:System.Windows.Controls.TextBlock> that displays the <xref:System.Windows.Data.CollectionViewGroup.Name%2A> of each the group. In this case, the <xref:System.Windows.Data.CollectionViewGroup.Name%2A> is either `Work` or `Home`.  
  
 [!code-xml[GroupingSample#XAML](~/add/codesnippet/xaml/GroupingSample/Window1.xaml#xaml)]  
  
 [!code-cs[GroupingSample#Code](~/add/codesnippet/csharp/GroupingSample/Window1.xaml.cs#code)]
 [!code-vb[GroupingSample#Code](~/add/codesnippet/visualbasic/groupingsample/window1.xaml.vb#code)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GroupStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.GroupStyle" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternationCount">
      <MemberSignature Language="C#" Value="public int AlternationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AlternationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of alternating <see cref="T:System.Windows.Controls.GroupItem" /> objects.</summary>
        <value>The number of alternating <see cref="T:System.Windows.Controls.GroupItem" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AlternationCount property and the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName> attached property enable you to specify the appearance for two or more alternating <xref:System.Windows.Controls.GroupItem> objects. For example, you can specify alternating background colors for every third <xref:System.Windows.Controls.GroupItem> in an <xref:System.Windows.Controls.ItemsControl>.  The <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName> is assigned to each <xref:System.Windows.Controls.GroupItem> in the <xref:System.Windows.Controls.ItemsControl>.  <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName> begins at 0, increments until it is AlternationCount minus 1, and then restarts at 0. For example, if AlternationCount is 3 and there are seven <xref:System.Windows.Controls.GroupItem> objects in the <xref:System.Windows.Controls.ItemsControl>, the following table lists the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName> for each item.  
  
|Position of <xref:System.Windows.Controls.GroupItem> in the <xref:System.Windows.Controls.ItemsControl>|<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName>|  
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|1|0|  
|2|1|  
|3|2|  
|4|0|  
|5|1|  
|6|2|  
|7|0|  
  
 There are several methods you can use to specify different appearances for the alternating <xref:System.Windows.Controls.GroupItem> objects. One method is to bind properties in the <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> or <xref:System.Windows.Controls.GroupStyle.ContainerStyle%2A> of the <xref:System.Windows.Controls.GroupStyle> to the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName>. You can then use an <xref:System.Windows.Controls.AlternationConverter> to specify which value should be applied to the <xref:System.Windows.Controls.GroupItem> that has a certain <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName> value. You can also use triggers to change the value of a property depending on the value of its <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example creates a <xref:System.Windows.Controls.ListBox> that is bound to a <xref:System.Windows.Data.CollectionViewSource> that groups the items in the collection. The example alternates the background for the header of each <xref:System.Windows.Controls.GroupItem> between two colors by doing the following:  
  
-   Sets AlternationCount to 2.  
  
-   Creates an <xref:System.Windows.Controls.AlternationConverter> that returns a <xref:System.Windows.Media.SolidColorBrush>, depending on the value of <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName>.  
  
-   Binds the <xref:System.Windows.Controls.TextBlock.Background%2A> of the <xref:System.Windows.Controls.TextBlock> in the <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> to the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName> property and provides the <xref:System.Windows.Controls.AlternationConverter>. Note that the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A> attached property is set on the <xref:System.Windows.Controls.GroupItem>, and the binding uses <xref:System.Windows.Data.RelativeSourceMode> to get its value.  
  
 The example also alternates the background of the items in the <xref:System.Windows.Controls.ListBox> between three colors by setting the <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> on the <xref:System.Windows.Controls.ListBox> and binding the <xref:System.Windows.Controls.Control.Background%2A> of each <xref:System.Windows.Controls.ListBox> to the <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=fullName>. In this case, the background alternates between three colors.  
  
 The <xref:System.Windows.Data.CollectionViewSource> that groups the items is not shown.  For information on how to group item, see [How to: Sort and Group Data Using a View in XAML](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-xml[AlternationIndexSnippets#3](~/add/codesnippet/xaml/AltnerationIndexSnippets/Window1.xaml#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContainerStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style ContainerStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style ContainerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style that is applied to the <see cref="T:System.Windows.Controls.GroupItem" /> generated for each item.</summary>
        <value>The style that is applied to the <see cref="T:System.Windows.Controls.GroupItem" /> generated for each item. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is a rare case where creating a <xref:System.Windows.Style> inline in property element syntax, rather than creating the style as a resource, is a reasonable alternative methodology.  
  
<a name="xamlAttributeUsage_ContainerStyle"></a>   
## XAML Attribute Usage  
  
```  
<object ContainerStyle="{ResourceExtension StyleResourceKey}"/>  
```  
  
<a name="xamlValues_ColumnHeaderContainerStyle"></a>   
## XAML Values  
 *ResourceExtension*  
 One of the following: `StaticResource`, or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *StyleResourceKey*  
 The key that identifies the style being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContainerStyleSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.StyleSelector ContainerStyleSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.StyleSelector ContainerStyleSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.StyleSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables the application writer to provide custom selection logic for a style to apply to each generated <see cref="T:System.Windows.Controls.GroupItem" />.</summary>
        <value>An object that derives from <see cref="T:System.Windows.Controls.StyleSelector" />. The default is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.GroupStyle Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.GroupStyle Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.GroupStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default style of the group.</summary>
        <value>The default style of the group.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Default"></a>   
## XAML Property Element Usage  
  
```  
<object>  
  <object.property>  
    <x:Static Member="GroupStyle.Default" …/>  
  </object.property>  
</object>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultGroupPanel">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Controls.ItemsPanelTemplate DefaultGroupPanel;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Controls.ItemsPanelTemplate DefaultGroupPanel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ItemsPanelTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the default <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that creates the panel used to layout the items.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a default panel is needed this is the panel that is supplied.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormat">
      <MemberSignature Language="C#" Value="public string HeaderStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a composite string that specifies how to format the header if it is displayed as a string.</summary>
        <value>A composite string that specifies how to format the header if it is displayed as a string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HeaderStringFormat can be a predefined, composite, or custom string format. For more information about string formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md). If you set the <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> or <xref:System.Windows.Controls.GroupStyle.HeaderTemplateSelector%2A> property of a <xref:System.Windows.Controls.GroupStyle>, the HeaderStringFormat property is ignored.  
  
   
  
## Examples  
 The following example creates a <xref:System.Windows.Controls.ListBox> that groups a collection of items by price range.  The converter, `GroupByPrice`, returns an integer value that is above each item's price. For example, if an item's price is between 0 and 100, the converter returns 100. The example uses the HeaderStringFormat to create a string that includes the upper limit for each price range. For example, in the United States, items that are under 100 dollars are grouped under a heading that says "Items under $100".  
  
 [!code-xml[ContentStringSnippets#GroupStyleHeaderStringFormat](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#groupstyleheaderstringformat)]  
  
 The following example shows the `GroupByPrice` class, the `PurchaseItem` class, and the collection that the <xref:System.Windows.Controls.ListBox> is bound to.  
  
 [!code-cs[ContentStringSnippets#GroupStyleData](~/add/codesnippet/csharp/ContentStringSnippets/Window1.xaml.cs#groupstyledata)]
 [!code-vb[ContentStringSnippets#GroupStyleData](~/add/codesnippet/visualbasic/contentstringsnippets/window1.xaml.vb#groupstyledata)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template that is used to display the group header.</summary>
        <value>A <see cref="T:System.Windows.DataTemplate" /> object that is used to display the group header. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following examples show an <xref:System.Windows.Controls.ItemsControl> that is bound to an <xref:System.Windows.Data.XmlDataProvider> and the code-behind content that contains the logic to add and remove grouping. When the check box is checked, the content of the <xref:System.Windows.Controls.ItemsControl> is grouped by the `Type` attribute.  
  
 Each group is of type <xref:System.Windows.Data.CollectionViewGroup>. The <xref:System.Windows.Controls.GroupStyle> HeaderTemplate is specified so that it appears as a <xref:System.Windows.Controls.TextBlock> that displays the <xref:System.Windows.Data.CollectionViewGroup.Name%2A> of each the group. In this case, the <xref:System.Windows.Data.CollectionViewGroup.Name%2A> is either `Work` or `Home`.  
  
 [!code-xml[GroupingSample#XAML](~/add/codesnippet/xaml/GroupingSample/Window1.xaml#xaml)]  
  
 [!code-cs[GroupingSample#Code](~/add/codesnippet/csharp/GroupingSample/Window1.xaml.cs#code)]
 [!code-vb[GroupingSample#Code](~/add/codesnippet/visualbasic/groupingsample/window1.xaml.vb#code)]  
  
 The following example shows how to use the HeaderTemplate property:  
  
 [!code-xml[DataBindingLab#GroupStyle](~/add/codesnippet/xaml/DataBindingLab/MainWindow.xaml#groupstyle)]  
  
 The following is the definition of the `groupingHeaderTemplate`<xref:System.Windows.DataTemplate>:  
  
 [!code-xml[DataBindingLab#HeaderTemplate](~/add/codesnippet/xaml/DataBindingLab/MainWindow.xaml#headertemplate)]  
  
 For the complete sample, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables the application writer to provide custom selection logic for a template that is used to display the group header.</summary>
        <value>An object that derives from <see cref="T:System.Windows.Controls.DataTemplateSelector" />. The default is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HidesIfEmpty">
      <MemberSignature Language="C#" Value="public bool HidesIfEmpty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidesIfEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether items corresponding to empty groups should be displayed.</summary>
        <value>
          <see langword="true" /> to not display empty groups; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Arguments of the event being raised.</param>
        <summary>Raises the <see cref="E:System.Windows.Controls.GroupStyle.PropertyChanged" /> event using the provided arguments.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Panel">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ItemsPanelTemplate Panel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ItemsPanelTemplate Panel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ItemsPanelTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a template that creates the panel used to layout the items.</summary>
        <value>An <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> object that creates the panel used to layout the items.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a property value changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>