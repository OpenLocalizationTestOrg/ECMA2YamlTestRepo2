<Type Name="StripLine" FullName="System.Web.UI.DataVisualization.Charting.StripLine">
  <TypeSignature Language="C#" Value="public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StripLine extends System.Web.UI.DataVisualization.Charting.ChartElement implements class System.Web.UI.DataVisualization.Charting.IChartMapArea" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataVisualization.Charting.ChartElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.DataVisualization.Charting.IChartMapArea</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("IntervalOffset")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the strip lines on a chart.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strip lines, or strips, are horizontal or vertical ranges that shade the background of a chart in regular or custom intervals. You can use strip lines to:  
  
-   Improve readability for looking up individual values on the chart.  
  
-   Separate data points when reading the chart.  
  
-   Highlight dates that occur at regular intervals, for example, to identify weekend data points.  
  
-   Highlight a specific key range of data.  
  
-   Add a threshold line at a specific constant value.  
  
 A single StripLine object can either be drawn once, or repeatedly, for a given interval. This action is controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property. When a value of -1 is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, one strip line will be drawn. When a non-zero value is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, a strip line will be drawn repeatedly at each given interval. The location where a strip line is drawn is also affected by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> properties of the strip line.  
  
 Strip lines are always associated with an <xref:System.Web.UI.DataVisualization.Charting.Axis> object. They can be added at both design time and run time.  
  
 To add a horizontal or vertical line to display a threshold, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value of 0.0. This will result in a line being drawn. You can use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties for the color, width and style of the line. No chart background properties (`Back*`) are used when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0.  
  
 Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> property of the strip line to associate text with a strip line. The placement and orientation of this text can be controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> property.  
  
 When multiple strip lines are defined for the same axis, it is possible that the strip lines will overlap. The Z-order of StripLine objects is determined by their order of occurrence in the <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> object. This means that the first occurrence is drawn first; the second occurrence is drawn second, and so on.  
  
 Strip lines are not supported for the following chart types: Pie, Doughnut, Funnel, Pyramid, Kagi, ThreeLineBreak, PointAndFigure, Polar and Radar.  
  
   
  
## Examples  
 The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ' Adds a week of data with values between 20 and 35.   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ' Adds repeating horizontal strip lines at intervals of 5.   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()  
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ' Adds strip lines to highlight weekend values.   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ' Adds a horizontal threshold strip line at the mean value of the first series.  
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StripLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the strip line.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> structure. The default color is &lt;xref:System.Drawing.Color.White%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can set this property to any valid ARGB (alpha, red, green, blue) value.  
  
 To set a gradient for the strip line, set the BackColor and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.  
  
 If you set this color to "transparent"—in other words, set the alpha value to 0—no color will be assigned to the background of the element. As a result, the background will be transparent.  
  
 If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property.  
  
   
  
## Examples  
 The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackGradientStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.GradientEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.GradientStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the gradient style of the strip line.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="T:System.Web.UI.DataVisualization.Charting.GradientStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.  
  
 To use gradient colors:  
  
-   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.  
  
-   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.  
  
-   Set this BackGradientStyle property of the chart element to the desired gradient style.  
  
 This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackHatchStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.HatchStyleEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartHatchStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hatching style of the strip line.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="T:System.Web.UI.DataVisualization.Charting.ChartHatchStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The hatch pattern consists of a solid background color and lines drawn over the background. The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties. This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackImage">
      <MemberSignature Language="C#" Value="public string BackImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ImageValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background image of the strip line.</summary>
        <value>A <see langword="string" /> value that represents an image file URL. The default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL.  
  
 To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties.  
  
 You can also specify that one color will be displayed by the image as "transparent" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property.  
  
 An image can be any valid graphics file supported by .NET Framework, including icons.  
  
 This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.  
  
 Background images take precedence over other background properties, such as gradient colors.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackImageAlignment">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background image alignment.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value. The default value is <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.  
  
 For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackImageTransparentColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackImageTransparentColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackImageTransparentColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of a strip line background image that will be implemented as transparent.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackImageWrapMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartImageWrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the drawing mode of the background image of the strip line.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode" /> integer enumeration. The default is <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property determines how the image is displayed; that is, tiled, scaled, and so forth.  
  
 If an image is scaled, it will be stretched to fit within the bounding strip line. If the image is tiled, it is repeatedly drawn, starting from the top-left corner.  
  
 For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic.  
  
 If the BackImageWrapMode property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting.  
  
 This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackSecondaryColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackSecondaryColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackSecondaryColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the secondary color of the strip line background.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> value used for the secondary color of a background with hatching or gradient fill. The default color is <see cref="T:System.Drawing.Color" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.  
  
 You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.  
  
 If hatching is used, the BackSecondaryColor property determines the color of the hatching lines.  
  
 To use gradient colors for the background of a chart element:  
  
-   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.  
  
-   Use this BackSecondaryColor property to set the secondary color.  
  
-   Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style.  
  
 This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border color of a strip line.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="T:System.Drawing.Color" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can set this property to any valid ARGB (alpha, red, green, blue) value.  
  
 If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderDashStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style of the strip line.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the strip line.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies the line style used for a border. The line can be solid, dotted or some variation of solid and dotted.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public int BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border width of the strip line.</summary>
        <value>An <see langword="integer" /> value that determines the width of the strip line's border, in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is measured in pixels.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" /> to release both managed and unmanaged resources; <see langword="False" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> and optionally releases the managed resources.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Font), "Microsoft Sans Serif, 8pt")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the font used for the strip line text.</summary>
        <value>A <see cref="T:System.Drawing.Font" /> value that represents the font of the strip line text.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the strip line text.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> value that represents the text color of a strip line. The default value is &lt;xref:System.Drawing.Color.Black%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can specify any valid ARGB color for this property. This property is only applicable when a text value is specified for the strip line.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.</summary>
        <value>A <see langword="double" /> value that represents the interval between strip lines. The default value is 0.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set the Interval property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. When you set Interval to a value of other than zero, multiple strip lines will be shown. The unit that is used for the Interval property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataVisualization.Charting.AxisLabelDateValueConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.</summary>
        <value>A <see langword="double" /> value that represents the interval offset.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The interval offset of minor tick marks and grid lines is never affected by the value of the <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> property of the <xref:System.Web.UI.DataVisualization.Charting.Axis> object.  
  
 The IntervalOffset property setting defines the units of measurement of the offset.  
  
 The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> can be a negative value.  
  
 The default value is `Auto` (`0`).  
  
   
  
## Examples  
 The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the interval offset type of the strip line.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type. The default value is <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, this property is set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; the actual value of this property is determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the interval type of a <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> object.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type. The default value is <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale.  
  
 The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn.  
  
   
  
## Examples  
 The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MapAreaAttributes">
      <MemberSignature Language="C#" Value="public string MapAreaAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MapAreaAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the map area attributes of the strip line.</summary>
        <value>A <see langword="string" /> value that represents the attributes of the chart element's corresponding map area.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("StripLine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the strip line.</summary>
        <value>A <see langword="string" /> value that represents the name of the strip line.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PostBackValue">
      <MemberSignature Language="C#" Value="public string PostBackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the postback value that can be processed on a <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> event.</summary>
        <value>A string value that represents the postback value that is passed to a <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> event.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StripWidth">
      <MemberSignature Language="C#" Value="public double StripWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StripWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of a strip line.</summary>
        <value>A <see langword="double" /> value that determines whether a strip or a line is drawn. The default value is 0.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property cannot be set to a value less than 0.0, otherwise an exception will be raised.  
  
 A setting of 0.0 will result in a line being drawn; this line will use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> property settings for its color, width and style. None of the `Back*` properties in this class are utilized when the value of StripWidth is 0.0.  
  
 If you set the StripWidth property to a value greater than 0.0, a strip will be created. The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties only apply to the border of the strip; all of the `Back*` properties are then used for the background properties of the strip.  
  
 If the value of the StripWidth property is greater than 0.0, the units are determined by the relevant axis scale.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StripWidthType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the unit of measurement for the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property.</summary>
        <value>A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the width type. The default value is <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. For example, to set a strip line to represent "one week", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0).  
  
 You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text for the strip line.</summary>
        <value>A <see langword="string" /> value that represents the text of a strip line.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to add text to a strip line.  
  
   
  
## Examples  
 The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Far")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text alignment of the strip line.</summary>
        <value>A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the strip line text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextLineAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextLineAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextLineAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Near")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text line alignment of strip line text.</summary>
        <value>A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the text line.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextOrientation">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TextOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text orientation.</summary>
        <value>A TextOrientation value that represents the alignment of the text orientation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, the text is oriented based on the chart type. For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line. For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.  
  
   
  
## Examples  
 The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  
  
```vb#  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```c#  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tooltip of a strip line.</summary>
        <value>A <see langword="string" /> value that represents the tooltip of the strip line.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you set this property, a client-side image map will automatically be created, and a map area will be created with the Title attribute set to the specified tooltip string. The map area will use the dimensions that correspond to the strip line.  
  
 Setting this property will have no effect if the <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> property is set to `false`. The default value is true.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public string Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.UrlValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.Attribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the destination URL or anchor point of the strip line.</summary>
        <value>A <see langword="string" /> value that represents the destination URL or anchor point of the strip line.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To use an absolute URL, start the string expression with either "http://" or "www.". If the string does not start with either of these prefixes, it will be treated as a relative URL.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>