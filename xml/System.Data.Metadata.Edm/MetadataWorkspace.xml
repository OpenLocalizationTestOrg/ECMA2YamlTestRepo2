<Type Name="MetadataWorkspace" FullName="System.Data.Metadata.Edm.MetadataWorkspace">
  <TypeSignature Language="C#" Value="public sealed class MetadataWorkspace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataWorkspace extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the [!INCLUDE[vstecado](~/add/includes/vstecado-md.md)] metadata runtime service component that provides support for retrieving metadata from various sources.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Metadata.Edm.MetadataWorkSpace> class provides a central runtime service component that you can use to interact with conceptual model metadata in the context of a given application. For more information, see [Metadata Workspace](http://msdn.microsoft.com/en-us/601aee56-3eda-4caa-9082-a01df76c5e84).  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataWorkspace (System.Collections.Generic.IEnumerable&lt;string&gt; paths, System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; assembliesToConsider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; paths, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; assembliesToConsider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paths" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="assembliesToConsider" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="paths">The paths to workspace metadata.</param>
        <param name="assembliesToConsider">The names of assemblies used to construct workspace.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> class using the specified paths and assemblies.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearCache">
      <MemberSignature Language="C#" Value="public static void ClearCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCache() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears all the metadata cache entries.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateEntitySqlParser">
      <MemberSignature Language="C#" Value="public System.Data.Common.EntitySql.EntitySqlParser CreateEntitySqlParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.EntitySql.EntitySqlParser CreateEntitySqlParser() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.EntitySql.EntitySqlParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an <see cref="T:System.Data.Common.EntitySql.EntitySqlParser" /> configured to use the <see cref="T:System.Data.Metadata.Edm.DataSpace" /> data space.</summary>
        <returns>The created parser object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateQueryCommandTree">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbQueryCommandTree CreateQueryCommandTree (System.Data.Common.CommandTrees.DbExpression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.CommandTrees.DbQueryCommandTree CreateQueryCommandTree(class System.Data.Common.CommandTrees.DbExpression query) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbQueryCommandTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="query">A <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the query.</param>
        <summary>Creates a new <see cref="T:System.Data.Common.CommandTrees.DbQueryCommandTree" /> bound to this metadata workspace based on the specified query expression.</summary>
        <returns>A new <see cref="T:System.Data.Common.CommandTrees.DbQueryCommandTree" /> with the specified expression as it's &lt;xref:System.Data.Common.CommandTrees.DbQueryCommandTree.Query%2A&gt; property.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="query" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEdmSpaceType">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EnumType GetEdmSpaceType (System.Data.Metadata.Edm.EnumType objectSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EnumType GetEdmSpaceType(class System.Data.Metadata.Edm.EnumType objectSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EnumType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectSpaceType" Type="System.Data.Metadata.Edm.EnumType" />
      </Parameters>
      <Docs>
        <param name="objectSpaceType">A &lt;xref:System.Data.Metadata.Edm.EnumlType&gt; that supplies the type in the object space.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />.</summary>
        <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />. If there is no matched type, this method returns null.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEdmSpaceType">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.StructuralType GetEdmSpaceType (System.Data.Metadata.Edm.StructuralType objectSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.StructuralType GetEdmSpaceType(class System.Data.Metadata.Edm.StructuralType objectSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.StructuralType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectSpaceType" Type="System.Data.Metadata.Edm.StructuralType" />
      </Parameters>
      <Docs>
        <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that supplies the type in the object space.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />.</summary>
        <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />. If there is no matched type, this method returns null.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEntityContainer">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EntityContainer GetEntityContainer (string name, System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EntityContainer GetEntityContainer(string name, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EntityContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity container.</param>
        <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
        <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEntityContainer">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EntityContainer GetEntityContainer (string name, bool ignoreCase, System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EntityContainer GetEntityContainer(string name, bool ignoreCase, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EntityContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity container.</param>
        <param name="ignoreCase">
          <see langword="true" /> to perform the case-insensitive search; otherwise, <see langword="false" />.</param>
        <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
        <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFunctions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.EdmFunction&gt; GetFunctions (string name, string namespaceName, System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Metadata.Edm.EdmFunction&gt; GetFunctions(string name, string namespaceName, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.EdmFunction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function.</param>
        <param name="namespaceName">The namespace of the function.</param>
        <param name="dataSpace">The conceptual model in which the functions are searched.</param>
        <summary>Returns all the overloads of the functions by using the specified name, namespace name, and data model.</summary>
        <returns>A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains all the functions that match the specified name in a given namespace and a data model.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFunctions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.EdmFunction&gt; GetFunctions (string name, string namespaceName, System.Data.Metadata.Edm.DataSpace dataSpace, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Metadata.Edm.EdmFunction&gt; GetFunctions(string name, string namespaceName, valuetype System.Data.Metadata.Edm.DataSpace dataSpace, bool ignoreCase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.EdmFunction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function.</param>
        <param name="namespaceName">The namespace of the function.</param>
        <param name="dataSpace">The conceptual model in which the functions are searched.</param>
        <param name="ignoreCase">
          <see langword="true" /> to perform the case-insensitive search; otherwise, <see langword="false" />.</param>
        <summary>Returns all the overloads of the functions by using the specified name, namespace name, and data model.</summary>
        <returns>A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains all the functions that match the specified name in a given namespace and a data model.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetItem&lt;T&gt; (string identity, System.Data.Metadata.Edm.DataSpace dataSpace) where T : System.Data.Metadata.Edm.GlobalItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetItem&lt;(class System.Data.Metadata.Edm.GlobalItem) T&gt;(string identity, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.Metadata.Edm.GlobalItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="identity">To be added.</param>
        <param name="dataSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetItem&lt;T&gt; (string identity, bool ignoreCase, System.Data.Metadata.Edm.DataSpace dataSpace) where T : System.Data.Metadata.Edm.GlobalItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetItem&lt;(class System.Data.Metadata.Edm.GlobalItem) T&gt;(string identity, bool ignoreCase, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.Metadata.Edm.GlobalItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="identity">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="dataSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemCollection">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.ItemCollection GetItemCollection (System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.ItemCollection GetItemCollection(valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.ItemCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="dataSpace">The <see cref="T:System.Data.Metadata.Edm.DataSpace" /> from which to retrieve items.</param>
        <summary>Gets <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> items.</summary>
        <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> items.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.GlobalItem&gt; GetItems (System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Metadata.Edm.GlobalItem&gt; GetItems(valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.GlobalItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
        <summary>Gets all the items in the specified data model.</summary>
        <returns>A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains all the items in the specified data model.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetItems&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetItems&lt;T&gt; (System.Data.Metadata.Edm.DataSpace dataSpace) where T : System.Data.Metadata.Edm.GlobalItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetItems&lt;(class System.Data.Metadata.Edm.GlobalItem) T&gt;(valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.Metadata.Edm.GlobalItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="dataSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectSpaceType">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EnumType GetObjectSpaceType (System.Data.Metadata.Edm.EnumType edmSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EnumType GetObjectSpaceType(class System.Data.Metadata.Edm.EnumType edmSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EnumType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edmSpaceType" Type="System.Data.Metadata.Edm.EnumType" />
      </Parameters>
      <Docs>
        <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.EnumType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type that matches the type supplied by the parameter <paramref name="edmSpaceType" />.</summary>
        <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the Object space type. If there is no matched type, this method returns null.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetObjectSpaceType">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.StructuralType GetObjectSpaceType (System.Data.Metadata.Edm.StructuralType edmSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.StructuralType GetObjectSpaceType(class System.Data.Metadata.Edm.StructuralType edmSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.StructuralType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edmSpaceType" Type="System.Data.Metadata.Edm.StructuralType" />
      </Parameters>
      <Docs>
        <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type that matches the type supplied by the parameter <paramref name="edmSpaceType" />.</summary>
        <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the Object space type. If there is no matched type, this method returns null.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPrimitiveTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.PrimitiveType&gt; GetPrimitiveTypes (System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Metadata.Edm.PrimitiveType&gt; GetPrimitiveTypes(valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.PrimitiveType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="dataSpace">The data model for which you need the list of primitive types.</param>
        <summary>Returns the list of primitive types in the specified data model.</summary>
        <returns>A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains all the primitive types in the specified data model.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRelevantMembersForUpdate">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.EdmMember&gt; GetRelevantMembersForUpdate (System.Data.Metadata.Edm.EntitySetBase entitySet, System.Data.Metadata.Edm.EntityTypeBase entityType, bool partialUpdateSupported);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Metadata.Edm.EdmMember&gt; GetRelevantMembersForUpdate(class System.Data.Metadata.Edm.EntitySetBase entitySet, class System.Data.Metadata.Edm.EntityTypeBase entityType, bool partialUpdateSupported) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.EdmMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySetBase" />
        <Parameter Name="entityType" Type="System.Data.Metadata.Edm.EntityTypeBase" />
        <Parameter Name="partialUpdateSupported" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entitySet">An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> belonging to the C-Space.</param>
        <param name="entityType">An <see cref="T:System.Data.Metadata.Edm.EntityType" /> that participates in the given <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</param>
        <param name="partialUpdateSupported">
          <see langword="true" /> if entities may be updated partially; otherwise, <see langword="false" />.</param>
        <summary>Returns members of a given <see cref="T:System.Data.Metadata.Edm.EntitySet" />/<see cref="T:System.Data.Metadata.Edm.EntityType" /> for which original values are needed when modifying an entity.</summary>
        <returns>The <see cref="T:System.Data.Metadata.Edm.EdmMember" />s for which original value is required.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRequiredOriginalValueMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Data.Metadata.Edm.EdmMember&gt; GetRequiredOriginalValueMembers (System.Data.Metadata.Edm.EntitySetBase entitySet, System.Data.Metadata.Edm.EntityTypeBase entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Metadata.Edm.EdmMember&gt; GetRequiredOriginalValueMembers(class System.Data.Metadata.Edm.EntitySetBase entitySet, class System.Data.Metadata.Edm.EntityTypeBase entityType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use MetadataWorkspace.GetRelevantMembersForUpdate(EntitySetBase, EntityTypeBase, bool) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Data.Metadata.Edm.EdmMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySetBase" />
        <Parameter Name="entityType" Type="System.Data.Metadata.Edm.EntityTypeBase" />
      </Parameters>
      <Docs>
        <param name="entitySet">The entity set from which to retrieve original values.</param>
        <param name="entityType">The entity type of which to retrieve original values.</param>
        <summary>Gets original value members from an entity set and entity type.</summary>
        <returns>The original value members from an entity set and entity type.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EdmType GetType (string name, string namespaceName, System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EdmType GetType(string name, string namespaceName, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EdmType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="name">The name of the type.</param>
        <param name="namespaceName">The namespace of the type.</param>
        <param name="dataSpace">The conceptual model on which the type is searched.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
        <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type that matches the given type name and the namespace name in the specified data model. If there is no matched type, this method returns null.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EdmType GetType (string name, string namespaceName, bool ignoreCase, System.Data.Metadata.Edm.DataSpace dataSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EdmType GetType(string name, string namespaceName, bool ignoreCase, valuetype System.Data.Metadata.Edm.DataSpace dataSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EdmType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
      </Parameters>
      <Docs>
        <param name="name">The name of the type.</param>
        <param name="namespaceName">The namespace of the type.</param>
        <param name="ignoreCase">
          <see langword="true" /> to perform the case-insensitive search; otherwise, <see langword="false" />.</param>
        <param name="dataSpace">The conceptual model on which the type is searched.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
        <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssembly">
      <MemberSignature Language="C#" Value="public void LoadFromAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFromAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly from which the metadata will be loaded.</param>
        <summary>Loads metadata from the given assembly.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssembly">
      <MemberSignature Language="C#" Value="public void LoadFromAssembly (System.Reflection.Assembly assembly, Action&lt;string&gt; logLoadMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFromAssembly(class System.Reflection.Assembly assembly, class System.Action`1&lt;string&gt; logLoadMessage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="logLoadMessage" Type="System.Action&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly from which the metadata will be loaded.</param>
        <param name="logLoadMessage">The delegate for logging the load messages.</param>
        <summary>Loads metadata from the given assembly.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaximumEdmVersionSupported">
      <MemberSignature Language="C#" Value="public static readonly double MaximumEdmVersionSupported;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaximumEdmVersionSupported" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the maximum Entity Data Model (EDM) version supported by the Entity Framework runtime.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterItemCollection">
      <MemberSignature Language="C#" Value="public void RegisterItemCollection (System.Data.Metadata.Edm.ItemCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterItemCollection(class System.Data.Metadata.Edm.ItemCollection collection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Metadata.Edm.ItemCollection" />
      </Parameters>
      <Docs>
        <param name="collection">The output parameter collection that needs to be filled up.</param>
        <summary>Registers the item collection with each associated data model.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetEdmSpaceType">
      <MemberSignature Language="C#" Value="public bool TryGetEdmSpaceType (System.Data.Metadata.Edm.EnumType objectSpaceType, out System.Data.Metadata.Edm.EnumType edmSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetEdmSpaceType(class System.Data.Metadata.Edm.EnumType objectSpaceType, class System.Data.Metadata.Edm.EnumType edmSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectSpaceType" Type="System.Data.Metadata.Edm.EnumType" />
        <Parameter Name="edmSpaceType" Type="System.Data.Metadata.Edm.EnumType&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.EnumType" /> object that represents the object space type.</param>
        <param name="edmSpaceType">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.EnumType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />. This parameter is passed uninitialized.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.EnumType" /> object via the out parameter <paramref name="edmSpaceType" /> that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />.</summary>
        <returns>
          <see langword="true" /> on success, <see langword="false" /> on failure.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetEdmSpaceType">
      <MemberSignature Language="C#" Value="public bool TryGetEdmSpaceType (System.Data.Metadata.Edm.StructuralType objectSpaceType, out System.Data.Metadata.Edm.StructuralType edmSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetEdmSpaceType(class System.Data.Metadata.Edm.StructuralType objectSpaceType, class System.Data.Metadata.Edm.StructuralType edmSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectSpaceType" Type="System.Data.Metadata.Edm.StructuralType" />
        <Parameter Name="edmSpaceType" Type="System.Data.Metadata.Edm.StructuralType&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type.</param>
        <param name="edmSpaceType">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />. This parameter is passed uninitialized.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object via the out parameter <paramref name="edmSpaceType" /> that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />.</summary>
        <returns>
          <see langword="true" /> if there is a type that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetEntityContainer">
      <MemberSignature Language="C#" Value="public bool TryGetEntityContainer (string name, System.Data.Metadata.Edm.DataSpace dataSpace, out System.Data.Metadata.Edm.EntityContainer entityContainer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetEntityContainer(string name, valuetype System.Data.Metadata.Edm.DataSpace dataSpace, class System.Data.Metadata.Edm.EntityContainer entityContainer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="entityContainer" Type="System.Data.Metadata.Edm.EntityContainer&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity container.</param>
        <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
        <param name="entityContainer">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container. This parameter is passed uninitialized.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
        <returns>
          <see langword="true" /> if there is an entity container that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetEntityContainer">
      <MemberSignature Language="C#" Value="public bool TryGetEntityContainer (string name, bool ignoreCase, System.Data.Metadata.Edm.DataSpace dataSpace, out System.Data.Metadata.Edm.EntityContainer entityContainer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetEntityContainer(string name, bool ignoreCase, valuetype System.Data.Metadata.Edm.DataSpace dataSpace, class System.Data.Metadata.Edm.EntityContainer entityContainer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="entityContainer" Type="System.Data.Metadata.Edm.EntityContainer&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity container.</param>
        <param name="ignoreCase">
          <see langword="true" /> to perform the case-insensitive search; otherwise, <see langword="false" />.</param>
        <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
        <param name="entityContainer">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container. This parameter is passed uninitialized.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
        <returns>
          <see langword="true" /> if there is an entity container that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetItem&lt;T&gt; (string identity, System.Data.Metadata.Edm.DataSpace space, out T item) where T : System.Data.Metadata.Edm.GlobalItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetItem&lt;(class System.Data.Metadata.Edm.GlobalItem) T&gt;(string identity, valuetype System.Data.Metadata.Edm.DataSpace space, !!T item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.Metadata.Edm.GlobalItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="space" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="item" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="identity">To be added.</param>
        <param name="space">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetItem&lt;T&gt; (string identity, bool ignoreCase, System.Data.Metadata.Edm.DataSpace dataSpace, out T item) where T : System.Data.Metadata.Edm.GlobalItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetItem&lt;(class System.Data.Metadata.Edm.GlobalItem) T&gt;(string identity, bool ignoreCase, valuetype System.Data.Metadata.Edm.DataSpace dataSpace, !!T item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.Metadata.Edm.GlobalItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="item" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="identity">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="dataSpace">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetItemCollection">
      <MemberSignature Language="C#" Value="public bool TryGetItemCollection (System.Data.Metadata.Edm.DataSpace dataSpace, out System.Data.Metadata.Edm.ItemCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetItemCollection(valuetype System.Data.Metadata.Edm.DataSpace dataSpace, class System.Data.Metadata.Edm.ItemCollection collection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="collection" Type="System.Data.Metadata.Edm.ItemCollection&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dataSpace">The <see cref="T:System.Data.Metadata.Edm.DataSpace" /> from which to attempt retrieval of <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</param>
        <param name="collection">When this method returns, contains the item collection. This parameter is passed uninitialized.</param>
        <summary>Tests the retrieval of <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
        <returns>
          <see langword="true" /> if the retrieval was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectSpaceType">
      <MemberSignature Language="C#" Value="public bool TryGetObjectSpaceType (System.Data.Metadata.Edm.EnumType edmSpaceType, out System.Data.Metadata.Edm.EnumType objectSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectSpaceType(class System.Data.Metadata.Edm.EnumType edmSpaceType, class System.Data.Metadata.Edm.EnumType objectSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edmSpaceType" Type="System.Data.Metadata.Edm.EnumType" />
        <Parameter Name="objectSpaceType" Type="System.Data.Metadata.Edm.EnumType&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.EnumType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
        <param name="objectSpaceType">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.EnumType" /> object that represents the Object space type. This parameter is passed uninitialized.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.EnumType" /> object via the out parameter <paramref name="objectSpaceType" /> that represents the type that matches the <see cref="T:System.Data.Metadata.Edm.EdmType" /> supplied by the parameter <paramref name="edmSpaceType" />.</summary>
        <returns>
          <see langword="true" /> if there is a type that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectSpaceType">
      <MemberSignature Language="C#" Value="public bool TryGetObjectSpaceType (System.Data.Metadata.Edm.StructuralType edmSpaceType, out System.Data.Metadata.Edm.StructuralType objectSpaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectSpaceType(class System.Data.Metadata.Edm.StructuralType edmSpaceType, class System.Data.Metadata.Edm.StructuralType objectSpaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edmSpaceType" Type="System.Data.Metadata.Edm.StructuralType" />
        <Parameter Name="objectSpaceType" Type="System.Data.Metadata.Edm.StructuralType&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
        <param name="objectSpaceType">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the Object space type. This parameter is passed uninitialized.</param>
        <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object via the out parameter <paramref name="objectSpaceType" /> that represents the type that matches the <see cref="T:System.Data.Metadata.Edm.EdmType" /> supplied by the parameter <paramref name="edmSpaceType" />.</summary>
        <returns>
          <see langword="true" /> if there is a type that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetType">
      <MemberSignature Language="C#" Value="public bool TryGetType (string name, string namespaceName, System.Data.Metadata.Edm.DataSpace dataSpace, out System.Data.Metadata.Edm.EdmType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetType(string name, string namespaceName, valuetype System.Data.Metadata.Edm.DataSpace dataSpace, class System.Data.Metadata.Edm.EdmType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="type" Type="System.Data.Metadata.Edm.EdmType&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The name of the type.</param>
        <param name="namespaceName">The namespace of the type.</param>
        <param name="dataSpace">The conceptual model on which the type is searched.</param>
        <param name="type">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object. This parameter is passed uninitialized.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
        <returns>
          <see langword="true" /> if there is a type that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetType">
      <MemberSignature Language="C#" Value="public bool TryGetType (string name, string namespaceName, bool ignoreCase, System.Data.Metadata.Edm.DataSpace dataSpace, out System.Data.Metadata.Edm.EdmType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetType(string name, string namespaceName, bool ignoreCase, valuetype System.Data.Metadata.Edm.DataSpace dataSpace, class System.Data.Metadata.Edm.EdmType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="dataSpace" Type="System.Data.Metadata.Edm.DataSpace" />
        <Parameter Name="type" Type="System.Data.Metadata.Edm.EdmType&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The name of the type.</param>
        <param name="namespaceName">The namespace of the type.</param>
        <param name="ignoreCase">
          <see langword="true" /> to perform the case-insensitive search; otherwise, <see langword="false" />.</param>
        <param name="dataSpace">The conceptual model on which the type is searched.</param>
        <param name="type">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object. This parameter is passed uninitialized.</param>
        <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
        <returns>
          <see langword="true" /> if there is a type that matches the search criteria; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>