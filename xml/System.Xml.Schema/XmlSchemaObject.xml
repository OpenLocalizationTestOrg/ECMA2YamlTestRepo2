<Type Name="XmlSchemaObject" FullName="System.Xml.Schema.XmlSchemaObject">
  <TypeSignature Language="C#" Value="public abstract class XmlSchemaObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlSchemaObject extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the &lt;xref:System.Xml.Schema.XmlSchema&gt; class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays each schema object.  
  
 [!code-cs[Classic WebData XmlSchemaObject Example#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_13_1.cs)]
 [!code-cpp[Classic WebData XmlSchemaObject Example#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_13_1.cpp)]
 [!code-vb[Classic WebData XmlSchemaObject Example#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_13_1.vb)]  
  
 The example uses the `example.xsd` file as input.  
  
 [!code-xml[Classic WebData XmlSchemaObject Example#2](~/add/codesnippet/xml/t-system.xml.schema.xmls_13_2.xsd)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlSchemaObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is called by derived class constructors to initialize state in this type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the line number in the file to which the <see langword="schema" /> element refers.</summary>
        <value>The line number.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LineNumber` is used to store the line number when a schema is read from a file. This is reported through <xref:System.Xml.Schema.XmlSchemaException> for error handling.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the line position in the file to which the <see langword="schema" /> element refers.</summary>
        <value>The line position.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is used to store the line position when a schema is read from a file. This is reported through <xref:System.Xml.Schema.XmlSchemaException> for error handling.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializerNamespaces Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlSerializerNamespaces Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlNamespaceDeclarations</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializerNamespaces</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt; to use with this schema object.</summary>
        <value>The &lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt; property for the schema object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This gives the Schema Object Model (SOM) the ability to add xmlns declarations. This is useful when you want to declare a prefix to qualify declarations from an imported schema or use in the xpath attribute of the xs:selector element.  
  
 You can also use the Namespaces property to change namespace prefixes in a schema. For example, you can change the prefix used by a schema for the W3C XML Schema namespace from xs to xsd as illustrated in the following example.  
  
```vb#  
Dim namespaces As XmlSerializerNamespaces = New XmlSerializerNamespaces()  
namespaces.Add("myChangedPrefix", "myImportNamespace");  
s.Namespaces = namespaces;  
```  
  
```c#  
XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();  
namespaces.Add("myChangedPrefix", "myImportNamespace");  
s.Namespaces = namespaces;  
```  
  
   
  
## Examples  
 In the following example, the prefix myImpPrefix is added at the schema element level. The prefix is then used to qualify definitions that are imported from myImportNamespace.  
  
 [!code-cpp[Classic WebData XmlSchemaObject.Namespaces Example#1](~/add/codesnippet/cpp/p-system.xml.schema.xmls_7_1.cpp)]
 [!code-cs[Classic WebData XmlSchemaObject.Namespaces Example#1](~/add/codesnippet/csharp/p-system.xml.schema.xmls_7_1.cs)]
 [!code-vb[Classic WebData XmlSchemaObject.Namespaces Example#1](~/add/codesnippet/visualbasic/p-system.xml.schema.xmls_7_1.vb)]  
  
 The example produces the following XML.  
  
 [!code-xml[Classic WebData XmlSchemaObject.Namespaces Example#2](~/add/codesnippet/xml/p-system.xml.schema.xmls_7_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObject Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObject Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the parent of this <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
        <value>The parent <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of this <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SourceUri">
      <MemberSignature Language="C#" Value="public string SourceUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source location for the file that loaded the schema.</summary>
        <value>The source location (URI) for the file.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Provides information for exception handling.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>