<Type Name="XmlSchemaElement" FullName="System.Xml.Schema.XmlSchemaElement">
  <TypeSignature Language="C#" Value="public class XmlSchemaElement : System.Xml.Schema.XmlSchemaParticle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaElement extends System.Xml.Schema.XmlSchemaParticle" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Schema.XmlSchemaParticle</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the <see langword="element" /> element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is the base class for all particle types and is used to describe an element in an XML document.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Do not use schemas from unknown or untrusted sources or locations. Doing so will compromise the security of your code.  
> -   XML schemas (including inline schemas) are inherently vulnerable to denial of service attacks; do not accept them in untrusted scenarios.  
> -   Schema validation error messages and exceptions may expose sensitive information about the content model or URI paths to the schema file. Be careful not to expose this information to untrusted callers.  
  
   
  
## Examples  
 The following example creates the `element` element.  
  
 [!code-cs[Classic WebData XmlSchemaElement Example#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_2_1.cs)]
 [!code-cpp[Classic WebData XmlSchemaElement Example#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_2_1.cpp)]
 [!code-vb[Classic WebData XmlSchemaElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_2_1.vb)]  
  
 The following XML file is used for the preceding code example.  
  
 [!code-xml[Classic WebData XmlSchemaElement Example#2](~/add/codesnippet/xml/t-system.xml.schema.xmls_2_2.xsd)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod Block { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod Block" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("block")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a <see langword="Block" /> derivation.</summary>
        <value>The attribute used to block a type derivation. Default value is <see langword="XmlSchemaDerivationMethod.None" />.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This attribute can contain the following values:  
  
|Enum|Description|  
|----------|-----------------|  
|`None`|Use the derivation restriction defined by the `BlockDefault` property of the schema, if it exists.|  
|`Empty`|There are no restrictions on replacements of this element.|  
|`Substitution`|This element cannot be replaced by a type derived by Substitution.|  
|`Extension`|This element cannot be replaced by a type derived by Extension.|  
|`Restriction`|This element cannot be replaced by a type derived by Restriction.|  
|`All`|`#all`. This element cannot be replaced by any type regardless of derivation method.|  
  
 This property does not prevent derivation, but prevents derivation from replacing the type in an instance. List and union values are not supported for the `block` property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BlockResolved">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod BlockResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod BlockResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the post-compilation value of the <see langword="Block" /> property.</summary>
        <value>The post-compilation value of the <see langword="Block" /> property. The default is the <see langword="BlockDefault" /> value on the <see langword="schema" /> element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This value indicates how the type is enforced when `xsi:type` is used in the instance document. For example, if the value is restricted, only the specific defined type can be used, not types derived by restriction from the specific defined type.  
  
 This property can contain the values shown in the following table. The default is `None`. List and union derivation methods are not allowed on this property.  
  
|Enum|Description|  
|----------|-----------------|  
|`Empty`|There are no restrictions on replacements of this element.|  
|`Substitution`|This element cannot be replaced by a type derived by Substitution.|  
|`Extension`|This element cannot be replaced by a type derived by Extension.|  
|`Restriction`|This element cannot be replaced by a type derived by Restriction.|  
|`All`|`#all`. This element cannot be replaced by any type regardless of derivation method.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Constraints">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectCollection Constraints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectCollection Constraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("key", typeof(System.Xml.Schema.XmlSchemaKey))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("keyref", typeof(System.Xml.Schema.XmlSchemaKeyref))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("unique", typeof(System.Xml.Schema.XmlSchemaUnique))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of constraints on the element.</summary>
        <value>The collection of constraints.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Returns a collection of constraints on the element. Can be any of `XmlSchemaKey`, `XmlSchemaKeyref`, or `XmlSchemaUnique`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public string DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default value of the element if its content is a simple type or content of the element is <see langword="textOnly" />.</summary>
        <value>The default value for the element. The default is a null reference.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `fixed` and `default` attributes are mutually exclusive. If the element contains a simple type, this value must be a valid value of that type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ElementSchemaType">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaType ElementSchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaType ElementSchemaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaType" /> object representing the type of the element based on the &lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaType%2A&gt; or &lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaTypeName%2A&gt; values of the element.</summary>
        <value>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is a post-schema-validation infoset property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public object ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a common language runtime (CLR) object based on the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaElement" /> of the element, which holds the post-compilation value of the <see langword="ElementType" /> property.</summary>
        <value>The common language runtime object. The post-compilation value of the <see langword="ElementType" /> property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The object can be <xref:System.Xml.Schema.XmlSchemaDatatype> if the element has a built-in XML Schema type or <xref:System.Xml.Schema.XmlSchemaSimpleType> if the element has a user-defined type.  
  
 This property is a post-schema-validation infoset property.  
  
> [!IMPORTANT]
>  The ElementType property is obsolete in the 2.0 version of the .NET Framework and has been replaced by the <xref:System.Xml.Schema.XmlSchemaElement.ElementSchemaType%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Final">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod Final { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod Final" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("final")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see langword="Final" /> property to indicate that no further derivations are allowed.</summary>
        <value>The <see langword="Final" /> property. The default is <see langword="XmlSchemaDerivationMethod.None" />.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This attribute can contain the values shown in the following table.  
  
|Enum|Description|  
|----------|-----------------|  
|`None`|Use the derivation restriction defined by the `FinalDefault` property of the schema, if it exists.|  
|`Empty`|There are no restrictions on derivations of this element.|  
|`Extension`|This element cannot be derived by Extension.|  
|`Restriction`|This element cannot be derived by Restriction.|  
|`All`|`#all`. This element cannot be derived by any derivation method.|  
  
 See also <xref:System.Xml.Schema.XmlSchemaElement>. `Substitution`, `List`, and `Union` derivation methods are not allowed for this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FinalResolved">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the post-compilation value of the <see langword="Final" /> property.</summary>
        <value>The post-compilation value of the <see langword="Final" /> property. Default value is the <see langword="FinalDefault" /> value on the <see langword="schema" /> element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This value indicates how the type is restricted when the type is extended through restriction. This property can contain the following values.  
  
|Enum|Description|  
|----------|-----------------|  
|`Empty`|There are no restrictions on derivations of this element.|  
|`Extension`|This element cannot be derived by Extension.|  
|`Restriction`|This element cannot be derived by Restriction.|  
|`All`|`#all`. This element cannot be derived by any derivation method.|  
  
 Substitution, List, and Union derivation methods are not allowed for this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FixedValue">
      <MemberSignature Language="C#" Value="public string FixedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FixedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("fixed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the fixed value.</summary>
        <value>The fixed value that is predetermined and unchangeable. The default is a null reference.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The content should be a simple type or `textOnly`. The `fixed` and `default` attributes are mutually exclusive.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("form")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the form for the element.</summary>
        <value>The form for the element. The default is the &lt;xref:System.Xml.Schema.XmlSchema.ElementFormDefault%2A?displayProperty=fullName&gt; value.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value is the value of the `elementFormDefault` attribute for the `schema` element containing the element. The default is `Unqualified`.  
  
|Enum|Description|  
|----------|-----------------|  
|`Qualified`|Element must be qualified with the namespace prefix.|  
|`Unqualified`|Element is not required to be qualified with the namespace prefix.|  
  
 The value cannot be set if the containing element is the `schema` element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("abstract")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets information to indicate if the element can be used in an instance document.</summary>
        <value>If <see langword="true" />, the element cannot appear in the instance document. The default is <see langword="false" />.  
  
 Optional.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNillable">
      <MemberSignature Language="C#" Value="public bool IsNillable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNillable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("nillable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets information that indicates if <see langword="xsi:nil" /> can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.</summary>
        <value>If nillable is <see langword="true" />, this enables an instance of the element to have the <see langword="nil" /> attribute set to <see langword="true" />. The <see langword="nil" /> attribute is defined as part of the XML Schema namespace for instances. The default is <see langword="false" />.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This applies to element content and not the attributes of the element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the element.</summary>
        <value>The name of the element. The default is <see langword="String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The name must be an NCName (no-colon name) as defined in the World Wide Web Consortium (W3C) XML Namespaces specification. `Name` and `RefName` attributes are mutually exclusive.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName QualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName QualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the actual qualified name for the given element.</summary>
        <value>The qualified name of the element. The post-compilation value of the <see langword="QualifiedName" /> property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 QualifiedName is the name that a `ref` attribute refers to. The qualified name consists of the NCName of the element. For example, element name = "NCName", and the prefix used to describe the `targetNamespace` of the schema. This property holds the post-compilation value of the `QualifiedName` property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RefName">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName RefName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName RefName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("ref")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).</summary>
        <value>The reference name of the element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `RefName` must be a QName. The `RefName` can include a namespace prefix. If `RefName` attribute is present, all `complexType`, `simpleType`, `key`, `keyref`, `unique`, `nillable`, `default`, `fixed`, `form`, `block`, and `type` must be absent. If `RefName` is present, `minOccurs`, `maxOccurs`, and `id` are allowed. To declare an element using an existing element definition, use the `RefName` attribute to specify the existing element definition.  
  
 The value cannot be set if the containing element is the `schema` element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SchemaType">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaType SchemaType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaType SchemaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("complexType", typeof(System.Xml.Schema.XmlSchemaComplexType))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlElement("simpleType", typeof(System.Xml.Schema.XmlSchemaSimpleType))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of the element. This can either be a complex type or a simple type.</summary>
        <value>The type of the element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To declare an element using an existing `simpleType` or `complexType` definition, use the `SchemaType` property to specify the existing type. If `RefName` attribute is present, `complexType`, `simpleType`, `key`, `keyref`, and `unique` elements and `nillable`, `default`, `fixed`, `form`, `block`, and `SchemaType` attributes cannot be present.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SchemaTypeName">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName SchemaTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName SchemaTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("type")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.</summary>
        <value>The name of the built-in data type.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SubstitutionGroup">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName SubstitutionGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName SubstitutionGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("substitutionGroup")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of an element that is being substituted by this element.</summary>
        <value>The qualified name of an element that is being substituted by this element.  
  
 Optional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This element must have the same type or a type derived from the type of the specified element. This value must be a QName.  
  
 The value cannot be set if the containing element is the `schema` element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>