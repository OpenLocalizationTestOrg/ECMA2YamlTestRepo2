<Type Name="CompletedEventHandler" FullName="System.Management.CompletedEventHandler">
  <TypeSignature Language="C#" Value="public delegate void CompletedEventHandler(object sender, CompletedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CompletedEventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>System.Management</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Management.CompletedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">The instance of the object for which to invoke this method.</param>
    <param name="e">The <see cref="T:System.Management.CompletedEventArgs" /> that specifies the reason the event was invoked.</param>
    <summary>Represents the method that will handle the <see cref="E:System.Management.ManagementOperationObserver.Completed" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example calls a method asynchronously. The **Win32_Process.Create** method is called to create a new process for Calc.exe.  
  
 [!code-cs[wminet_CompletedEventHandler#1](~/add/codesnippet/csharp/t-system.management.comp_0_1.cs)]
 [!code-vb[wminet_CompletedEventHandler#1](~/add/codesnippet/visualbasic/t-system.management.comp_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>