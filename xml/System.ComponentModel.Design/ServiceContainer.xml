<Type Name="ServiceContainer" FullName="System.ComponentModel.Design.ServiceContainer">
  <TypeSignature Language="C#" Value="public class ServiceContainer : IDisposable, IServiceProvider, System.ComponentModel.Design.IServiceContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceContainer extends System.Object implements class System.ComponentModel.Design.IServiceContainer, class System.IDisposable, class System.IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IServiceContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides a simple implementation of the <see cref="T:System.ComponentModel.Design.IServiceContainer" /> interface. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ServiceContainer object can be used to store and provide services. ServiceContainer implements the <xref:System.ComponentModel.Design.IServiceContainer> interface.  
  
 The ServiceContainer object can be created using a constructor that adds a parent <xref:System.ComponentModel.Design.IServiceContainer> through which services can be optionally added to or removed from all parent <xref:System.ComponentModel.Design.IServiceContainer> objects, including the immediate parent <xref:System.ComponentModel.Design.IServiceContainer>. To add or remove a service from all <xref:System.ComponentModel.Design.IServiceContainer> implementations that are linked to this <xref:System.ComponentModel.Design.IServiceContainer> through parenting, call the <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A> or <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> method overload that accepts a Boolean value indicating whether to promote the service request.  
  
> [!NOTE]
>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example program demonstrates service chaining and the resultant service availability of a chain of linked ServiceContainer objects. The program provides a user interface that allows you to see the availability of services within a chain of linked services, and uses the <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A>, <xref:System.ComponentModel.Design.ServiceContainer.GetService%2A>, and <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> methods as well as linked service containers.  
  
 [!code-cpp[ServiceArchitectureExample#1](~/add/codesnippet/cpp/t-system.componentmodel._126_1.cpp)]
 [!code-vb[ServiceArchitectureExample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._126_1.vb)]
 [!code-cs[ServiceArchitectureExample#1](~/add/codesnippet/csharp/t-system.componentmodel._126_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContainer (IServiceProvider parentProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="parentProvider">A parent service provider.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class using the specified parent service provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The service container uses this service object provider to retrieve services, if they are not available locally in the container.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, class System.ComponentModel.Design.ServiceCreatorCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.ComponentModel.Design.ServiceCreatorCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to add.</param>
        <param name="callback">A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
        <summary>Adds the specified service to the service container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates how to add a service to a <xref:System.ComponentModel.Design.ServiceContainer>.  
  
 [!code-cs[ServiceContainerExample#3](~/add/codesnippet/csharp/361e39aa-642e-4002-bd54-_1.cs)]
 [!code-vb[ServiceContainerExample#3](~/add/codesnippet/visualbasic/361e39aa-642e-4002-bd54-_1.vb)]
 [!code-cpp[ServiceContainerExample#3](~/add/codesnippet/cpp/361e39aa-642e-4002-bd54-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType" /> already exists in the container.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to add.</param>
        <param name="serviceInstance">An instance of the service to add. This object must implement or inherit from the type indicated by the `serviceType` parameter.</param>
        <summary>Adds the specified service to the service container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates how to add a service to a <xref:System.ComponentModel.Design.ServiceContainer>.  
  
 [!code-cs[ServiceContainerExample#2](~/add/codesnippet/csharp/7d5e79e6-2750-48e2-b4e9-_1.cs)]
 [!code-vb[ServiceContainerExample#2](~/add/codesnippet/visualbasic/7d5e79e6-2750-48e2-b4e9-_1.vb)]
 [!code-cpp[ServiceContainerExample#2](~/add/codesnippet/cpp/7d5e79e6-2750-48e2-b4e9-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType" /> already exists in the container.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public virtual void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, class System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.ComponentModel.Design.ServiceCreatorCallback" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to add.</param>
        <param name="callback">A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
        <param name="promote">
          <see langword="true" /> if this service should be added to any parent service containers; otherwise, <see langword="false" />.</param>
        <summary>Adds the specified service to the service container.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType" /> already exists in the container.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public virtual void AddService (Type serviceType, object serviceInstance, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, object serviceInstance, bool promote) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to add.</param>
        <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the `serviceType` parameter.</param>
        <param name="promote">
          <see langword="true" /> if this service should be added to any parent service containers; otherwise, <see langword="false" />.</param>
        <summary>Adds the specified service to the service container.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType" /> already exists in the container.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultServices">
      <MemberSignature Language="C#" Value="protected virtual Type[] DefaultServices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] DefaultServices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default services implemented directly by <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
        <value>The default services.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the default services that are implemented directly on this <xref:System.ComponentModel.Design.IServiceContainer>. the default implementation of this property is to return the <xref:System.ComponentModel.Design.IServiceContainer> and <xref:System.ComponentModel.Design.ServiceContainer> types. You may override this property and return your own types, modifying the default behavior of <xref:System.ComponentModel.Component.GetService%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes this service container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dispose walks all instantiated services within the container and disposes any that implement <xref:System.IDisposable>, and clears the service list.  
  
 Call <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.ServiceContainer>. The <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.ServiceContainer> in an unusable state. After calling <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.ServiceContainer> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.ServiceContainer> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  Always call <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.ServiceContainer>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.ServiceContainer> object's `Finalize` method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> if the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> is in the process of being disposed of; otherwise, <see langword="false" />.</param>
        <summary>Disposes this service container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> walks all instantiated services within the container and disposes any that implement <xref:System.IDisposable>, and clears the service list.  
  
 This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.ServiceContainer> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public virtual object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to retrieve.</param>
        <summary>Gets the requested service.</summary>
        <returns>An instance of the service if it could be found, or <see langword="null" /> if it could not be found.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveService(class System.Type serviceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to remove.</param>
        <summary>Removes the specified service type from the service container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates how to remove a service from a <xref:System.ComponentModel.Design.ServiceContainer>.  
  
 [!code-cs[ServiceContainerExample#4](~/add/codesnippet/csharp/m-system.componentmodel._24_1.cs)]
 [!code-vb[ServiceContainerExample#4](~/add/codesnippet/visualbasic/m-system.componentmodel._24_1.vb)]
 [!code-cpp[ServiceContainerExample#4](~/add/codesnippet/cpp/m-system.componentmodel._24_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public virtual void RemoveService (Type serviceType, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveService(class System.Type serviceType, bool promote) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of service to remove.</param>
        <param name="promote">
          <see langword="true" /> if this service should be removed from any parent service containers; otherwise, <see langword="false" />.</param>
        <summary>Removes the specified service type from the service container.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>