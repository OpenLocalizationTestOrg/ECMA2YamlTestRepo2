<Type Name="PrintDocument" FullName="System.Drawing.Printing.PrintDocument">
  <TypeSignature Language="C#" Value="public class PrintDocument : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrintDocument extends System.ComponentModel.Component" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("PrintPage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DocumentName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Drawing.Printing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a reusable object that sends output to a printer, when printing from a Windows Forms application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you create an instance of the PrintDocument class, set properties such as the <xref:System.Drawing.Printing.PrintDocument.DocumentName%2A>and <xref:System.Drawing.Printing.PrintDocument.PrinterSettings%2A>, and call the <xref:System.Drawing.Printing.PrintDocument.Print%2A> method to start the printing process. Handle the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event where you specify the output to print, by using the <xref:System.Drawing.Printing.PrintPageEventArgs.Graphics%2A><xref:System.Drawing.Graphics> property of the <xref:System.Drawing.Printing.PrintPageEventArgs>.  
  
 For more information about printing from a Windows Form application, see the [Windows Forms Print Support](~/add/includes/ajax-current-ext-md.md). If you wish to print from a Windows Presentation Foundation application, see the <xref:System.Printing> namespace.  
  
   
  
## Examples  
 The following code example prints the file named C:\My Documents\MyFile.txt on the default printer. To run the example, create a new Windows Forms project and paste the example code into the form, replacing the file contents. For C#, you will need to delete the Form1.Designer.cs file. Also, change the path to the file you want to print.  
  
> [!NOTE]
>  The example requires that each line fits within the page width.  
  
 Use the <xref:System.ComponentModel>, <xref:System.Windows.Forms>, <xref:System.Drawing>, <xref:System.Drawing.Printing>, and <xref:System.IO> namespaces for this example.  
  
 [!code-cpp[Classic PrintDocument Example#1](~/add/codesnippet/cpp/t-system.drawing.printin_5_1.cpp)]
 [!code-vb[Classic PrintDocument Example#1](~/add/codesnippet/visualbasic/t-system.drawing.printin_5_1.vb)]
 [!code-cs[Classic PrintDocument Example#1](~/add/codesnippet/csharp/t-system.drawing.printin_5_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintDocument" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default constructor initializes all fields based upon the default printer. Typically, after creating a new <xref:System.Drawing.Printing.PrintDocument>, you set printer and page settings that affect the output through the <xref:System.Drawing.Printing.PrintDocument.PrinterSettings%2A> and <xref:System.Drawing.Printing.PrintDocument.DefaultPageSettings%2A> properties, respectively.  
  
   
  
## Examples  
 The following code example sets a document's page orientation to landscape, and prints the document.  
  
 Use the <xref:System.Drawing>, <xref:System.Drawing.Printing>, and <xref:System.IO> namespaces for this example.  
  
 [!code-cpp[Classic PrintDocument Example#1](~/add/codesnippet/cpp/m-system.drawing.printin_1_1.cpp)]
 [!code-vb[Classic PrintDocument Example#1](~/add/codesnippet/visualbasic/m-system.drawing.printin_1_1.vb)]
 [!code-cs[Classic PrintDocument Example#1](~/add/codesnippet/csharp/m-system.drawing.printin_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginPrint">
      <MemberSignature Language="C#" Value="public event System.Drawing.Printing.PrintEventHandler BeginPrint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Drawing.Printing.PrintEventHandler BeginPrint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Drawing.Printing.PrintDocument.Print%2A&gt; method is called and before the first page of the document prints.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you handle the BeginPrint event to initialize fonts, file streams, and other resources used during the printing process.  
  
 To associate the event with your event handler, add an instance of the <xref:System.Drawing.Printing.PrintEventHandler> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultPageSettings">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PageSettings DefaultPageSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PageSettings DefaultPageSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PageSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets page settings that are used as defaults for all pages to be printed.</summary>
        <value>A <see cref="T:System.Drawing.Printing.PageSettings" /> that specifies the default page settings for the document.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can specify several default page settings through the DefaultPageSettings property. For example, the <xref:System.Drawing.Printing.PageSettings.Color%2A?displayProperty=fullName> property specifies whether the page prints in color, the <xref:System.Drawing.Printing.PageSettings.Landscape%2A?displayProperty=fullName> property specifies landscape or portrait orientation, and the <xref:System.Drawing.Printing.PageSettings.Margins%2A?displayProperty=fullName> property specifies the margins of the page.  
  
 To specify settings on a page-by-page basis, handle the <xref:System.Drawing.Printing.PrintDocument.PrintPage> or <xref:System.Drawing.Printing.PrintDocument.QueryPageSettings> event and modify the <xref:System.Drawing.Printing.PrintPageEventArgs.PageSettings%2A> argument included in the <xref:System.Drawing.Printing.PrintPageEventArgs> or <xref:System.Drawing.Printing.QueryPageSettingsEventArgs>, respectively.  
  
> [!NOTE]
>  After printing has started, changes to page settings through the DefaultPageSettings property will not affect pages being printed.  
  
   
  
## Examples  
 The following code example sets a document's page orientation to landscape, and prints the document. The example makes three assumptions: that a variable named `filePath` has been set to the path of the file to print; that a method named `pd_PrintPage`, which handles the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event, has been defined; and that a variable named `printer` has been set to the printer's name.  
  
 Use the <xref:System.Drawing>, <xref:System.Drawing.Printing>, and <xref:System.IO> namespaces for this example.  
  
 [!code-cs[Classic PrintDocument.PrintDocument Example#1](~/add/codesnippet/csharp/p-system.drawing.printin_16_1.cs)]
 [!code-cpp[Classic PrintDocument.PrintDocument Example#1](~/add/codesnippet/cpp/p-system.drawing.printin_16_1.cpp)]
 [!code-vb[Classic PrintDocument.PrintDocument Example#1](~/add/codesnippet/visualbasic/p-system.drawing.printin_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DocumentName">
      <MemberSignature Language="C#" Value="public string DocumentName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("document")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the document name to display (for example, in a print status dialog box or printer queue) while printing the document.</summary>
        <value>The document name to display while printing the document. The default is "document".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DocumentName property does not specify the file to print. Rather, you specify the output to print by handling the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event. For an example, see the <xref:System.Drawing.Printing.PrintDocument> class overview.  
  
   
  
## Examples  
 The following code example prints a document with the first page in color, if the printer supports it, and sets the DocumentName to a user-friendly name. The example requires that a <xref:System.Drawing.Printing.PrintDocument> variable named `printDoc` has been created, and the <xref:System.Drawing.Printing.PrintDocument.PrintPage> and <xref:System.Drawing.Printing.PrintDocument.QueryPageSettings> events are handled.  
  
 Use the <xref:System.Drawing> and <xref:System.Drawing.Printing> namespaces for this example.  
  
 [!code-cs[PaperSource and PaperSize Example with Resolution#6](~/add/codesnippet/csharp/p-system.drawing.printin_24_1.cs)]
 [!code-cpp[PaperSource and PaperSize Example with Resolution#6](~/add/codesnippet/cpp/p-system.drawing.printin_24_1.cpp)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#6](~/add/codesnippet/visualbasic/p-system.drawing.printin_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndPrint">
      <MemberSignature Language="C#" Value="public event System.Drawing.Printing.PrintEventHandler EndPrint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Drawing.Printing.PrintEventHandler EndPrint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the last page of the document has printed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you handle the EndPrint event to release fonts, file streams, and other resources used during the printing process, like fonts.  
  
 You indicate that there are no more pages to print by setting the <xref:System.Drawing.Printing.PrintPageEventArgs.HasMorePages%2A?displayProperty=fullName> property to `false` in the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event. The EndPrint event also occurs if the printing process is canceled or an exception occurs during the printing process.  
  
 To associate the event with your event handler, add an instance of the <xref:System.Drawing.Printing.PrintEventHandler> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeginPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnBeginPrint (System.Drawing.Printing.PrintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeginPrint(class System.Drawing.Printing.PrintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Drawing.Printing.PrintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" /> event. It is called after the &lt;xref:System.Drawing.Printing.PrintDocument.Print%2A&gt; method is called and before the first page of the document prints.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnBeginPrint method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 When a derived class calls the OnBeginPrint method, it raises the <xref:System.Drawing.Printing.PrintDocument.BeginPrint> event by invoking the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEndPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnEndPrint (System.Drawing.Printing.PrintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEndPrint(class System.Drawing.Printing.PrintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Drawing.Printing.PrintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" /> event. It is called when the last page of the document has printed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnEndPrint method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class. The OnEndPrint method is also called if the printing process is canceled or an exception occurs during the printing process.  
  
 When a derived class calls the OnEndPrint method, it raises the <xref:System.Drawing.Printing.PrintDocument.EndPrint> event by invoking the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPrintPage">
      <MemberSignature Language="C#" Value="protected virtual void OnPrintPage (System.Drawing.Printing.PrintPageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrintPage(class System.Drawing.Printing.PrintPageEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Drawing.Printing.PrintPageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event. It is called before a page prints.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnPrintPage method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 When a derived class calls the OnPrintPage method, it raises the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event by invoking the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnQueryPageSettings">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryPageSettings (System.Drawing.Printing.QueryPageSettingsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryPageSettings(class System.Drawing.Printing.QueryPageSettingsEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Drawing.Printing.QueryPageSettingsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" /> event. It is called immediately before each <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnQueryPageSettings method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 When a derived class calls the OnQueryPageSettings method, it raises the <xref:System.Drawing.Printing.PrintDocument.QueryPageSettings> event by invoking the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OriginAtMargins">
      <MemberSignature Language="C#" Value="public bool OriginAtMargins { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OriginAtMargins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the position of a graphics object associated with a page is located just inside the user-specified margins or at the top-left corner of the printable area of the page.</summary>
        <value>
          <see langword="true" /> if the graphics origin starts at the page margins; <see langword="false" /> if the graphics origin is at the top-left corner of the printable page. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calculating the area available to print requires knowing the physical size of the paper, the margins for the page, and the location of the <xref:System.Drawing.Graphics> object origin. When OriginAtMargins is `true`, the <xref:System.Drawing.Graphics> object location takes into account the <xref:System.Drawing.Printing.PageSettings.Margins%2A?displayProperty=fullName> property value and the printable area of the page. When OriginAtMargins is `false`, only the printable area of the page is used to determine the location of the <xref:System.Drawing.Graphics> object origin, the <xref:System.Drawing.Printing.PageSettings.Margins%2A?displayProperty=fullName> value is ignored.  
  
 For example, if OriginAtMargins is `true`, and <xref:System.Drawing.Printing.PageSettings.Margins%2A?displayProperty=fullName> is set for 1 inch on each side, the <xref:System.Drawing.Graphics> object included in the <xref:System.Drawing.Printing.PrintPageEventArgs> is located 1 inch from the left and top of the page. If the printable area of the page is .25 of an inch on each side and OriginAtMargins is `false`, the <xref:System.Drawing.Graphics> object is located .25 of an inch from the left and top of the page.  
  
> [!NOTE]
>  The printable area of a page varies from printer to printer and is not guaranteed to be symmetrical.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public void Print ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Print() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the document's printing process.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specify the output to print by handling the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event and by using the <xref:System.Drawing.Graphics> included in the <xref:System.Drawing.Printing.PrintPageEventArgs>.  
  
 Use the <xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A?displayProperty=fullName> property to specify which printer should print the document.  
  
 The Print method prints the document without using a print dialog. Use a <xref:System.Windows.Forms.PrintDialog> when you want to offer the user the ability to choose print settings.  
  
> [!NOTE]
>  If an exception that is not handled by the Print method is thrown during printing, the printing of the document is aborted.  
  
   
  
## Examples  
 The following code example prints the file that is specified through the command line to the default printer.  
  
> [!NOTE]
>  The example requires that each line fits within the page width.  
  
 Use the <xref:System.ComponentModel>, <xref:System.Drawing>, <xref:System.Drawing.Printing>, <xref:System.IO>, and <xref:System.Windows.Forms> namespaces for this example.  
  
 [!code-cpp[Classic PrintDocument.PrintPage Example#1](~/add/codesnippet/cpp/m-system.drawing.printin_0_1.cpp)]
 [!code-vb[Classic PrintDocument.PrintPage Example#1](~/add/codesnippet/visualbasic/m-system.drawing.printin_0_1.vb)]
 [!code-cs[Classic PrintDocument.PrintPage Example#1](~/add/codesnippet/csharp/m-system.drawing.printin_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the &lt;xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A?displayProperty=fullName&gt; property does not exist.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">for safe printing from a restricted dialog box. Associated enumeration: <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrintController">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrintController PrintController { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrintController PrintController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrintController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the print controller that guides the printing process.</summary>
        <value>The <see cref="T:System.Drawing.Printing.PrintController" /> that guides the printing process. The default is a new instance of the <see cref="T:System.Windows.Forms.PrintControllerWithStatusDialog" /> class.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A print controller guides the printing process in several ways. For example, to print a document, you need to convert it to a <xref:System.Drawing.Graphics> object. A <xref:System.Drawing.Printing.PrintController> specifies where to draw the graphic in an image for a print preview or on a printer to actually print the document. A print controller can also specify whether to print a document immediately, or wait a specified interval.  
  
   
  
## Examples  
 The following code example requires that you have created an instance of the <xref:System.Drawing.Printing.PrintDocument> class that is named `myPrintDocument`. The example creates a new instance of the <xref:System.Drawing.Printing.PrintController> class, assigns it to the PrintController property of `myPrintDocument`, and prints the document.  
  
 Use the <xref:System.Drawing.Printing> and <xref:System.Windows.Forms> namespaces for this example.  
  
 [!code-cs[Classic PrintDocument.PrintController Example#1](~/add/codesnippet/csharp/p-system.drawing.printin_6_1.cs)]
 [!code-vb[Classic PrintDocument.PrintController Example#1](~/add/codesnippet/visualbasic/p-system.drawing.printin_6_1.vb)]
 [!code-cpp[Classic PrintDocument.PrintController Example#1](~/add/codesnippet/cpp/p-system.drawing.printin_6_1.cpp)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">for safe printing from a restricted dialog box. Associated enumeration: <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrinterSettings">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrinterSettings PrinterSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrinterSettings PrinterSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrinterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the printer that prints the document.</summary>
        <value>A <see cref="T:System.Drawing.Printing.PrinterSettings" /> that specifies where and how the document is printed. The default is a <see cref="T:System.Drawing.Printing.PrinterSettings" /> with its properties set to their default values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can specify several printer settings through the PrinterSettings property. For example, use the <xref:System.Drawing.Printing.PrinterSettings.Copies%2A?displayProperty=fullName> property to specify the number of copies you want to print, the <xref:System.Drawing.Printing.PrinterSettings.PrinterName%2A?displayProperty=fullName> property to specify the printer to use, and the <xref:System.Drawing.Printing.PrinterSettings.PrintRange%2A?displayProperty=fullName> property to specify the range of pages you want to print.  
  
   
  
## Examples  
 The following code example prints a document on the specified printer. The example makes three assumptions: that a variable names `filePath` has been set to the path of the file to print; that a method named `pd_PrintPage`, which handles the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event, has been defined; and that a variable named `printer` has been set to the printer's name.  
  
 Use the <xref:System.Drawing>, <xref:System.Drawing.Printing>, and <xref:System.IO> namespaces for this example.  
  
 [!code-cpp[Classic PrintDocument.PrinterSettings Example#1](~/add/codesnippet/cpp/p-system.drawing.printin_2_1.cpp)]
 [!code-cs[Classic PrintDocument.PrinterSettings Example#1](~/add/codesnippet/csharp/p-system.drawing.printin_2_1.cs)]
 [!code-vb[Classic PrintDocument.PrinterSettings Example#1](~/add/codesnippet/visualbasic/p-system.drawing.printin_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrintPage">
      <MemberSignature Language="C#" Value="public event System.Drawing.Printing.PrintPageEventHandler PrintPage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Drawing.Printing.PrintPageEventHandler PrintPage" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrintPageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the output to print for the current page is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To specify the output to print, use the <xref:System.Drawing.Printing.PrintPageEventArgs.Graphics%2A> property of the <xref:System.Drawing.Printing.PrintPageEventArgs>. For example, to specify a line of text that should be printed, draw the text using the <xref:System.Drawing.Graphics.DrawString%2A?displayProperty=fullName> method.  
  
 In addition to specifying the output, you can indicate if there are additional pages to print by setting the <xref:System.Drawing.Printing.PrintPageEventArgs.HasMorePages%2A?displayProperty=fullName> property to `true`. The default is `false`, which indicates that there are no more pages to print. Individual page settings can also be modified through the <xref:System.Drawing.Printing.PageSettings> and the print job can be canceled by setting the <xref:System.Drawing.Printing.PrintPageEventArgs.Cancel%2A?displayProperty=fullName> property to `true`. To print each page of a document using different page settings, handle the <xref:System.Drawing.Printing.PrintDocument.QueryPageSettings> event.  
  
 To associate the event with your event handler, add an instance of the <xref:System.Drawing.Printing.PrintPageEventHandler> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates handling the PrintPage event.  
  
 For another example, see [How to: Print a Multi-Page Text File in Windows Forms](~/add/includes/ajax-current-ext-md.md).  
  
 Use the <xref:System.Drawing>, <xref:System.Drawing.Printing>, and <xref:System.IO> namespaces for this example.  
  
 [!code-cpp[Classic PrintDocument Example#1](~/add/codesnippet/cpp/e-system.drawing.printin_0_1.cpp)]
 [!code-vb[Classic PrintDocument Example#1](~/add/codesnippet/visualbasic/e-system.drawing.printin_0_1.vb)]
 [!code-cs[Classic PrintDocument Example#1](~/add/codesnippet/csharp/e-system.drawing.printin_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="QueryPageSettings">
      <MemberSignature Language="C#" Value="public event System.Drawing.Printing.QueryPageSettingsEventHandler QueryPageSettings;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Drawing.Printing.QueryPageSettingsEventHandler QueryPageSettings" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.QueryPageSettingsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs immediately before each <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 It is possible to print each page of a document using different page settings. You set page settings by modifying individual properties of the <xref:System.Drawing.Printing.QueryPageSettingsEventArgs.PageSettings%2A?displayProperty=fullName> property or by setting the property to a <xref:System.Drawing.Printing.PageSettings>. Changes made to the <xref:System.Drawing.Printing.PageSettings> affect only the current page, not the document's default page settings. The print job can also be canceled by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true` for the <xref:System.Drawing.Printing.QueryPageSettingsEventArgs>.  
  
 To associate the event with your event handler, add an instance of the <xref:System.Drawing.Printing.QueryPageSettingsEventHandler> delegate to the event. The event handler is called whenever the event occurs. For more information about handling events with delegates, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example prints a document with the first page in color, if the printer supports it. The example requires that a <xref:System.Drawing.Printing.PrintDocument> variable named `printDoc` has been created, and the <xref:System.Drawing.Printing.PrintDocument.PrintPage> and QueryPageSettings events are handled. The `currentPageNumber` variable is incremented after every page is printed in the <xref:System.Drawing.Printing.PrintDocument.PrintPage> event, which is not shown.  
  
 Use the <xref:System.Drawing> and <xref:System.Drawing.Printing> namespaces for this example.  
  
 [!code-cs[PaperSource and PaperSize Example with Resolution#6](~/add/codesnippet/csharp/e-system.drawing.printin_1_1.cs)]
 [!code-cpp[PaperSource and PaperSize Example with Resolution#6](~/add/codesnippet/cpp/e-system.drawing.printin_1_1.cpp)]
 [!code-vb[PaperSource and PaperSize Example with Resolution#6](~/add/codesnippet/visualbasic/e-system.drawing.printin_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides information about the print document, in string form.</summary>
        <returns>A string.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>