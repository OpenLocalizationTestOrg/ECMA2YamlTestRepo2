<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the configurable execution environment provided by the workflow run-time engine for workflows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  
  
 WorkflowRuntime exposes functionality required by a host application and services to configure and control the workflow run-time engine and to be notified of changes to both the workflow run-time engine and any of its workflow instances.  
  
   
  
## Examples  
 The following code example demonstrates how to use WorkflowRuntime functionality from a workflow host. It provides examples of how to use the <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> constructor and the <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>, and <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> methods. The code also shows the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object in a workflow host using the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method. It also shows how to set event handlers for the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>, and <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) sample.  
  
 [!code-cs[WF_Samples#258](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This type is thread safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Workflow.Runtime.WorkflowRuntime> is initialized with the default property values and contains the default core services. To additionally configure the workflow run-time engine, you can add and remove services by using <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> and <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>, and you can set <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. After the <xref:System.Workflow.Runtime.WorkflowRuntime> is configured, call <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> to start the workflow run-time engine and its services.  
  
 The following table shows initial property values for an instance of <xref:System.Workflow.Runtime.WorkflowRuntime> class.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 The default core services are <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> and <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 The following code example demonstrates how you can use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. It provides an example of how to use the WorkflowRuntime constructor to create an instance of a <xref:System.Workflow.Runtime.WorkflowRuntime> and access its methods and events.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) sample.  
  
 [!code-cs[WF_Samples#258](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">The name of a valid <see langword="workflowSettings" /> section in the application configuration file.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class by using the specified section of the application configuration file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Workflow.Runtime.WorkflowRuntime> is initialized according to the settings in the section specified by `configSectionName` in the application configuration file. `configSectionName` must correspond to a valid `workflowSettings` section of a configuration file.  
  
 When the workflow run-time engine is configured by using an application configuration file, it loads and instantiates classes of the types listed in the `Services` section of the configuration file. When the workflow run-time engine constructs these classes it looks for class constructors with the following signatures in the following order:  
  
1.  Service(WorkflowRuntime runtime, NameValueCollection parameters)  
  
2.  Service(WorkflowRuntime runtime)  
  
3.  Service(NameValueCollection parameters)  
  
4.  Service()  
  
 All service classes that are loaded from a configuration file must implement at least one of these constructor signatures.  
  
 [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)] <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="configSectionName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">A valid <see langword="workflowSettings" /> section could not be found in the application configuration file.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> already exists for this application domain.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class by using the settings in the specified <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor provides a mechanism to configure the workflow run-time engine using a single method call for hosts that do not use an application configuration file. There are many reasons for not using the application configuration file. A host can run in an environment that does not allow using configuration files; for example, in trusted environments that do not allow reading from the application configuration file for security reasons. Also, a host can use a proprietary configuration mechanism; for example, the host can store the workflow run-time engine configuration settings in a SQL database.  
  
 The workflow run-time engine loads and instantiates classes of the types contained in <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=fullName>. When the workflow run-time engine constructs these classes it looks for class constructors with the following signatures in the following order:  
  
1.  Service(WorkflowRuntime runtime, NameValueCollection parameters)  
  
2.  Service(WorkflowRuntime runtime)  
  
3.  Service(NameValueCollection parameters)  
  
4.  Service()  
  
 All service classes that are specified in `settings` must implement at least one of these constructor signatures.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> already exists for this application domain.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">An object that represents the service to add.</param>
        <summary>Adds the specified service to the workflow run-time engine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can configure the workflow run-time engine by adding core services. Core services are those that derive from any of the following service base classes: the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, and the <xref:System.Workflow.Runtime.Tracking.TrackingService> class.  Core services can only be added when the workflow run-time engine is not running; that is, when <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> is `false`. The <xref:System.Workflow.Runtime.WorkflowRuntime> can also be used as a storage container for other services that can be used by other workflows or by applications running on a host. If you add a non-core service that derives from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class after the workflow run-time engine has been started, AddService calls the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method implemented by that service.  
  
> [!NOTE]
>  AddService enforces the restriction that no two services of the same <xref:System.Type> can be added to the <xref:System.Workflow.Runtime.WorkflowRuntime>. However, you can add multiple services that derive from the same base class.  There can be only one service derived from each of the following service base classes in the <xref:System.Workflow.Runtime.WorkflowRuntime>: the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, and the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.  If you add multiple services derived from one of these classes, for example two persistence services, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> throws an <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. It provides example of how to use the AddService method to add an <xref:System.Workflow.Activities.ExternalDataExchangeService> and <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> to the workflow run-time engine.  
  
 This code example is part of the [Cancelling a Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) sample.  
  
 [!code-cs[WF_Samples#258](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="service" /> is already registered with the workflow run-time engine.  
  
 -or-  
  
 <paramref name="service" /> is a core service and the workflow run-time engine is already running (&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt; is <see langword="true" />).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">The &lt;xref:System.Type&gt; of the workflow to create.</param>
        <summary>Creates a new workflow instance by using the specified workflow &lt;xref:System.Type&gt;.</summary>
        <returns>The created workflow instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Workflow.Runtime.WorkflowInstance> is created, validation is executed on it. If any validation errors occur, the <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> is thrown. This works well for simple scenarios, but in a server environment, revalidating a workflow for every activation might be unnecessary overhead.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] disabling validation, see <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 The following code example demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object in a workflow host using the CreateWorkflow method.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) sample.  
  
 [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">An &lt;xref:System.Xml.XmlReader&gt; that contains the workflow definition.</param>
        <summary>Creates a workflow instance by using the specified &lt;xref:System.Xml.XmlReader&gt;.</summary>
        <returns>The created workflow instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow instance is created from a XAML workflow definition file referenced by the <xref:System.Xml.XmlReader>.  
  
 Before the <xref:System.Workflow.Runtime.WorkflowInstance> is created, validation is executed on it. If any validation errors occur, the <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> is thrown. This works well for simple scenarios, but in a server environment, revalidating a workflow for every activation might be unnecessary overhead.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] disabling validation, see <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 The following example demonstrates how to create a workflow given a XAML-based workflow definition.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">The &lt;xref:System.Type&gt; of the workflow to create.</param>
        <param name="namedArgumentValues">A &lt;xref:System.Collections.Generic.Dictionary%602&gt; of objects keyed by string that represents the arguments to the workflow.</param>
        <summary>Creates a workflow instance by using the specified workflow &lt;xref:System.Type&gt; and the arguments to the workflow contained in the specified &lt;xref:System.Collections.Generic.Dictionary%602&gt;.</summary>
        <returns>The created workflow instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Workflow.Runtime.WorkflowInstance> is created, validation is executed on it. If any validation errors occur, the <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> is thrown. This works well for simple scenarios, but in a server environment, revalidating a workflow for every activation might be unnecessary overhead.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] disabling validation, see <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 For an example of passing in parameters to `CreateWorkflow`, see [Workflow with Parameters Sample](http://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">The &lt;xref:System.Type&gt; of the workflow to create.</param>
        <param name="namedArgumentValues">A &lt;xref:System.Collections.Generic.Dictionary%602&gt; of objects keyed by a string that represents the arguments to the workflow.</param>
        <param name="instanceId">The &lt;xref:System.Guid&gt; of the specific <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> to create.</param>
        <summary>Creates a workflow instance by using the specified parameters.</summary>
        <returns>The created workflow instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Workflow.Runtime.WorkflowInstance> is created, validation is executed on it. If any validation errors occur, the <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> is thrown. This works well for simple scenarios, but in a server environment, revalidating a workflow for every activation might be unnecessary overhead.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] disabling validation, see <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 The workflow `instanceId` for any running workflows loaded by the <xref:System.Workflow.Runtime.WorkflowRuntime> must be unique. If you pass an `instanceId` to create a workflow and a running workflow is already using that `instanceId`, an <xref:System.InvalidOperationException> is thrown.  
  
 For an example of passing in parameters to `CreateWorkflow`, see [Workflow with Parameters Sample](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">An &lt;xref:System.Xml.XmlReader&gt; that contains the workflow definition.</param>
        <param name="rulesReader">An &lt;xref:System.Xml.XmlReader&gt;.</param>
        <param name="namedArgumentValues">A &lt;xref:System.Collections.Generic.Dictionary%602&gt; of objects keyed by a string that represents the arguments to the workflow.</param>
        <summary>Creates a workflow instance by using the specified &lt;xref:System.Xml.XmlReader&gt; objects and the arguments contained in the specified &lt;xref:System.Collections.Generic.Dictionary%602&gt;.</summary>
        <returns>The created workflow instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow instance is created from the workflow definition referenced by the <xref:System.Xml.XmlReader> and the arguments supplied by `namedArgumentValues`.  
  
 Before the <xref:System.Workflow.Runtime.WorkflowInstance> is created, validation is executed on it. If any validation errors occur, the <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> is thrown. This works well for simple scenarios, but in a server environment, revalidating a workflow for every activation might be unnecessary overhead.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] disabling validation, see <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 For an example of passing in parameters to `CreateWorkflow`, see [Workflow with Parameters Sample](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 For an example of using rules defined in XML, see [IfElse with Rules Sample](http://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">An &lt;xref:System.Xml.XmlReader&gt; that contains the workflow definition.</param>
        <param name="rulesReader">An &lt;xref:System.Xml.XmlReader&gt;.</param>
        <param name="namedArgumentValues">A &lt;xref:System.Collections.Generic.Dictionary%602&gt; of objects keyed by a string that represents the arguments to the workflow.</param>
        <param name="instanceId">The &lt;xref:System.Guid&gt; of the specific <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> to create.</param>
        <summary>Creates a workflow instance by using the specified parameters.</summary>
        <returns>The created workflow instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Workflow.Runtime.WorkflowInstance> is created, validation is executed on it. If any validation errors occur, the <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> is thrown. This works well for simple scenarios, but in a server environment, revalidating a workflow for every activation might be unnecessary overhead.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] disabling validation, see <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 The workflow `instanceId` for any running workflows loaded by the <xref:System.Workflow.Runtime.WorkflowRuntime> must be unique. If you pass an `instanceId` to create a workflow and a running workflow is already using that `instanceId`, an <xref:System.InvalidOperationException> is thrown.  
  
 For an example of passing in parameters to `CreateWorkflow`, see [Workflow with Parameters Sample](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 For an example of using rules defined in XML, see [IfElse with Rules Sample](http://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To shut down the <xref:System.Workflow.Runtime.WorkflowRuntime> gracefully, you should only call Dispose after you have called <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. This is because calling the Dispose method alone leaves the <xref:System.Workflow.Runtime.WorkflowRuntime> in an unusable state. Dispose frees the resources used by the runtime by closing open file handles, database connections, and so on, but it does not unload workflow instances, stop services, or do any of the other actions that <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> does.  
  
 Dispose should be called only when the host application must free the resources used by the <xref:System.Workflow.Runtime.WorkflowRuntime> before they are automatically freed by the garbage collector. For general information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example demonstrates how to call Dispose on a <xref:System.Workflow.Runtime.WorkflowRuntime> object. In this sample, the Dispose method is called from the FormClosing event handler for the main form of the application; this ensures that the objects created by the runtime are properly cleaned up when the application shuts down. This sample is from the [Speech Application Sample](http://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-cs[WF_Samples#108](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">The &lt;xref:System.Type&gt; that services must implement to be returned.</param>
        <summary>Retrieves all the services that are added to the workflow run-time engine that implement or derive from the specified &lt;xref:System.Type&gt;.</summary>
        <returns>Services that implement or derive from the specified &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An empty <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> indicates that no services that implement or derive from the specified <xref:System.Type> have been added to the workflow run-time engine.  
  
   
  
## Examples  
 The following example demonstrates how to retrieve all services of a given type from a <xref:System.Workflow.Runtime.WorkflowRuntime> object.  
  
 [!code-cs[WF_Samples#19](~/add/codesnippet/csharp/wf_snippets/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection that contains all the workflow instances currently loaded in memory.</summary>
        <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object for each workflow instance currently loaded in memory.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Note that, unlike <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, this method does not throw a <xref:System.InvalidOperationException> if the runtime is not started.  
  
   
  
## Examples  
 The following example demonstrates how to retrieve a collection of loaded workflows from a <xref:System.Workflow.Runtime.WorkflowRuntime> object.  
  
 [!code-cs[WF_Samples#18](~/add/codesnippet/csharp/wf_snippets/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">The &lt;xref:System.Type&gt; of the service to retrieve.</param>
        <summary>Retrieves a service of the specified &lt;xref:System.Type&gt; from the workflow run-time engine.</summary>
        <returns>The service of the specified &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GetService throws an <xref:System.InvalidOperationException> if more than one service exists for the specified <xref:System.Type>. Therefore, you should use one of the overloaded methods of <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> if it is possible that multiple services of the specified type are present in the <xref:System.Workflow.Runtime.WorkflowRuntime>. For example, the workflow run-time engine may have multiple tracking services. If you request a tracking service by specifying the <xref:System.Workflow.Runtime.Tracking.TrackingService> base class, it is possible that an exception will be thrown.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
        <exception cref="T:System.InvalidOperationException">More than one service of type <paramref name="serviceType" /> was found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">The &lt;xref:System.Guid&gt; of a workflow instance.</param>
        <summary>Retrieves the workflow instance that has the specified &lt;xref:System.Guid&gt;.</summary>
        <returns>The <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> that has the specified &lt;xref:System.Guid&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `instanceId` specifies a workflow instance that is not currently in memory, the workflow instance is loaded into memory and scheduled for execution. For example, after a workflow instance is aborted, you can call GetWorkflow to load the workflow instance back into memory. In this case, the last persisted state of the workflow instance is loaded into memory by the persistence service.  
  
   
  
## Examples  
 The following code example demonstrates a `ReloadWorkflow` method that calls the GetWorkflow method. The `ReloadWorkflow` method is part of a larger class that has a `Runtime` property to access all of the methods, properties, and events of the <xref:System.Workflow.Runtime.WorkflowRuntime> class.  
  
 This code example is part of the [Custom Persistence Service Sample](http://go.microsoft.com/fwlink/?LinkId=157351) sample.  
  
> [!NOTE]
>  In the example, the call to <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is redundant because both the GetWorkflow and <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> methods use the same internal helper method to load the workflow instance into memory.  
  
 [!code-cs[WF_Samples#265](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The workflow runtime is not started.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the workflow run-time engine has been started.</summary>
        <value>
          <see langword="true" /> if the workflow run-time engine has been started; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 IsStarted indicates that the workflow run-time engine services are running. IsStarted is `false` until the host calls <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. It remains `true` until the host calls <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  You cannot add core services to the workflow run-time engine while it is running. Core services are services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, and the <xref:System.Workflow.Runtime.Tracking.TrackingService> class.  
  
   
  
## Examples  
 The following example demonstrates how to access the IsStarted property of a <xref:System.Workflow.Runtime.WorkflowRuntime> object. In this example, if the runtime is started, a message is printed to the console.  
  
 [!code-cs[WF_Samples#21](~/add/codesnippet/csharp/wf_snippets/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name associated with the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>The name associated with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot set Name while the workflow run-time engine is running (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> is `true`).  
  
   
  
## Examples  
 The following example demonstrates how to access the Name property of a <xref:System.Workflow.Runtime.WorkflowRuntime> object. In this example, the name of the runtime is set to "Main Runtime".  
  
 [!code-cs[WF_Samples#20](~/add/codesnippet/csharp/wf_snippets/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt to set Name on a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that is disposed occurs.</exception>
        <exception cref="T:System.InvalidOperationException">An attempt to set Name while the workflow run-time engine is running occurs.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">An object that represents the service to remove.</param>
        <summary>Removes the specified service from the workflow run-time engine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot remove a core service while the workflow run-time engine is running (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> is `true`). Core services are services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, or the <xref:System.Workflow.Runtime.Tracking.TrackingService> class.  If `service` derives from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class, RemoveService calls the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method implemented by `service`.  
  
   
  
## Examples  
 In the following example, a <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> is added and removed from the <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-cs[WF_Samples#16](~/add/codesnippet/csharp/wf_snippets/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
        <exception cref="T:System.InvalidOperationException">The workflow run-time engine has started (&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt; is <see langword="true" />) and <paramref name="service" /> is a core service.  
  
 \- or -  
  
 <paramref name="service" /> is not registered with the workflow run-time engine.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a service that is derived from the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> class calls &lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A service that is derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class can call the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> method to inform subscribers to the ServicesExceptionNotHandled event that an exception that it was unable to handle occurred during its execution. You can subscribe to this event to implement a recovery mechanism.  
  
 This event is raised when a workflow instance has not been created yet by the workflow run-time engine and an exception occurs. In this scenario, the only way to inform a host application that an exception occurred is to raise this event. However, the workflow run-time engine does not call this directly. Instead, the workflow run-time engine either delivers an exception to the workflow instance or, if there is no instance, throws back to the caller, which in this case is actually the service that fires this event. If you create your own persistence or scheduler service, you must implement this event yourself through the base <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> method.  
  
 For the ServicesExceptionNotHandled event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Guid> of the workflow instance that was using the service and the <xref:System.Exception> that could not be handled.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates ServicesExceptionNotHandled with an event handler, a method named `OnExceptionNotHandled`.  
  
 This code example is part of the [Custom Persistence Service Sample](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-cs[WF_Samples#271](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the workflow run-time engine is started.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> method raises the Started event after it has validated the core service configuration of the workflow run-time engine, has invoked the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> method implemented by each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class, and has set <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to `true`. There is no guarantee about the order in which the services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class are started by the workflow run-time engine, and some of these workflow run-time engine services may depend on functionality supplied by other of these services to complete their startup tasks. Workflow run-time engine services can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=fullName> method to perform any final startup tasks that require the support of other workflow run-time engine services when the Started event is raised.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 In the following example, an event handler is added to the Started event of the <xref:System.Workflow.Runtime.WorkflowRuntime>. In this example, the handler is an anonymous method that prints a simple message to the console.  
  
 [!code-cs[WF_Samples#15](~/add/codesnippet/csharp/wf_snippets/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the workflow run-time engine and the workflow run-time engine services.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method verifies that a valid set of core services exists and then starts any services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  There must be one and only one of each of the following core services: a workflow `CommitWorkBatch` service derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> base class and a scheduler service derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> base class.  If either or both of these core services are missing, the workflow run-time engine supplies the appropriate default service: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> for the workflow `CommitWorkBatch` service and <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> for the scheduler service. A persistence service is optional, but there can be at most only one persistence service present. After it has validated the service configuration, StartRuntime calls <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> on all of the services that are derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  Finally, the workflow run-time engine sets <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> and raises the <xref:System.Workflow.Runtime.WorkflowRuntime.Started> event.  
  
 You cannot add or remove core services after the workflow run-time engine is started. Core services are services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> class, the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class, or the <xref:System.Workflow.Runtime.Tracking.TrackingService> class.  If you call StartRuntime while the workflow run-time engine is running, no action is performed.  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code calls the StartRuntime after the <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> creates a <xref:System.Workflow.Runtime.WorkflowRuntime> instance and after it calls <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> to add services to the runtime. It also calls StartRuntime before any other processing occurs.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) sample.  
  
 [!code-cs[WF_Samples#258](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">There is more than one service workflow <see langword="CommitWorkBatch" /> service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
 -or-  
  
 There is more than one scheduler service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
 -or-  
  
 There is more than one persistence service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the workflow run-time engine is stopped.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> method raises the Stopped event after it has invoked the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> method implemented by each of its services that derive from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class.  There is no guarantee about the order in which these workflow run-time engine services are stopped, and some of these services may need to preserve some functionality that is relied on by other services until they too are stopped. Such services can override the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=fullName> method to perform any residual shutdown logic when the Stopped event is raised.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 In the following example, an event handler is added to the Stopped event of the <xref:System.Workflow.Runtime.WorkflowRuntime>. In this example, the handler is an anonymous method that prints a simple message to the console.  
  
 [!code-cs[WF_Samples#14](~/add/codesnippet/csharp/wf_snippets/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the workflow run-time engine and the run-time services.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method causes the workflow run-time engine to unload each of its workflow instances, stop all of its services that are derived from the <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> class, set <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> to `false`, and raise the <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> event.  
  
 To shut down the <xref:System.Workflow.Runtime.WorkflowRuntime> gracefully, call StopRuntime before you call <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)] the <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. StopRuntime is called after the host has completed all other processing associated with the runtime.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) sample.  
  
 [!code-cs[WF_Samples#259](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance is aborted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WorkflowAborted occurs after all pending work for the workflow instance is cleared, but before the workflow instance is invalidated in memory. You can abort a workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=fullName>.  
  
 For this event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowAborted with an event handler, a method named `OnWorkflowAborted`.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) sample.  
  
 [!code-cs[WF_Samples#141](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WorkflowCompleted is raised after the workflow instance has completed but before the instance is invalidated in memory.  
  
 For the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> and its output parameters.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowCompleted with an event handler, a method named `OnWorkflowCompleted`.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkId=157346) sample.  
  
 [!code-cs[WF_Samples#258](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance is created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow run-time engine raises the WorkflowCreated event after the workflow instance is completely constructed but before activities are processed. For this event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowCreated with an event handler, a method named `OnWorkflowCreated`.  
  
 This code example is part of the [Custom Persistence Service Sample](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-cs[WF_Samples#271](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance enters the idle state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow run-time engine raises the WorkflowIdled event when the workflow instance enters an idle state; for example, when the workflow is waiting for a <xref:System.Workflow.Activities.DelayActivity> activity to complete.  
  
 For this event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowIdled with an event handler, a method named `OnWorkflowIdled`.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) sample.  
  
 [!code-cs[WF_Samples#258](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the workflow instance is loaded into memory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WorkflowLoaded occurs after the persistence service has restored the workflow instance, but before the workflow run-time engine begins to execute any activities.  
  
 For the WorkflowLoaded event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowLoaded with an event handler, a method named `OnWorkflowLoad`.  
  
 This code example is part of the [Custom Persistence Service](http://go.microsoft.com/fwlink/?LinkID=157351) sample.  
  
 [!code-cs[WF_Samples#271](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the state of a workflow instance is persisted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow instance can be persisted for many reasons. For example, the host can call <xref:System.Workflow.Runtime.WorkflowInstance.UnLoad%2A?displayProperty=fullName> on a workflow instance, or the workflow run-time engine can persist a workflow instance because the instance is idle or because an atomic scope has completed. If a persistence service is present in the <xref:System.Workflow.Runtime.WorkflowRuntime>, WorkflowPersisted is raised by the runtime after the state of the workflow instance is saved to memory. If a persistence service is not present, the event is still raised but the instance state is not saved. If the WorkflowPersisted event occurs because the workflow instance is being unloaded, it is followed by a <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.  
  
 For the WorkflowPersisted event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how you can use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowPersisted with an event handler, a method named `OnWorkflowPersisted`.  
  
 This code example is part of the [Custom Persistence Service Sample](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-cs[WF_Samples#279](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when execution of a workflow instance is resumed following a suspension.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow run-time engine raises the WorkflowResumed event just before the workflow instance is scheduled. The WorkflowResumed event is usually raised because of an explicit call to <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>. However, the workflow run-time engine can temporarily suspend an instance to perform an operation, for example, to apply a workflow change. In this case, the WorkflowResumed event is raised when the runtime resumes execution of the workflow instance following the operation.  
  
 For the WorkflowResumed event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how you can use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowResumed with an event handler, a method named `OnWorkflowResume`.  
  
 This code example is part of the [Suspend and Terminate Sample](http://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-cs[WF_Samples#171](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance has been started.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow run-time engine raises the WorkflowStarted event after the workflow instance is started by scheduling the root activity for execution. For this event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowStarted with an event handler, a method named `OnWorkflowStarted`.  
  
 This code example is part of the [Host Communication Sample](http://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-cs[WF_Samples#297](~/add/codesnippet/csharp/wf_snippets/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance is suspended.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow instance can be suspended by the host through a call to the <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> method, by a <xref:System.Workflow.ComponentModel.SuspendActivity> activity, or implicitly by the workflow run-time engine. For example, the workflow run-time engine temporarily suspends the instance when it applies dynamic changes to the instance.  
  
 For the WorkflowSuspended event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> and a string that describes the reason the instance was suspended.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowSuspended with an event handler, a method named `OnWorkflowSuspended`.  
  
 This code example is part of the [Suspend and Terminate Sample](http://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-cs[WF_Samples#170](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a workflow instance is terminated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The workflow can be terminated by the host through a call to the <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> method, by a <xref:System.Workflow.ComponentModel.TerminateActivity> activity, or by the workflow run-time engine when an unhandled exception occurs. The workflow run-time engine raises the WorkflowTerminated event after the workflow instance is terminated, but before it is invalidated in memory.  
  
 For the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> and information about the reason the instance was terminated in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=fullName> property.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> with an event handler, a method named `OnWorkflowCompleted`.  
  
 This code example is part of the [Canceling a Workflow](http://go.microsoft.com/fwlink/?LinkID=157346) sample.  
  
 [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the workflow instance is unloaded from memory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A workflow instance can be unloaded from memory by an explicit call to <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>, or implicitly by the workflow run-time engine according to its own semantics. For example, the workflow run-time engine unloads a workflow instance if the instance becomes idle and the runtime has a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> added for which <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> is `true`.  
  
 The workflow run-time engine raises the  
  
 WorkflowUnloaded event after the state of the workflow instance has been successfully persisted but before the instance is invalidated in memory. Therefore, a <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> event precedes the WorkflowUnloaded event.  
  
 For the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnLoaded> event, the sender contains the <xref:System.Workflow.Runtime.WorkflowRuntime> and <xref:System.Workflow.Runtime.WorkflowEventArgs> contains the <xref:System.Workflow.Runtime.WorkflowInstance> associated with the event.  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] handling events, see [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowRuntime> functionality from a workflow host. The code associates the WorkflowUnloaded with an event handler, a method named `OnWorkflowUnload`.  
  
 This code example is part of the [Custom Persistence Service Sample](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-cs[WF_Samples#271](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>