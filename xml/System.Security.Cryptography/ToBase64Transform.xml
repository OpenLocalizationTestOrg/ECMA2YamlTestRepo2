<Type Name="ToBase64Transform" FullName="System.Security.Cryptography.ToBase64Transform">
  <TypeSignature Language="C#" Value="public class ToBase64Transform : System.Security.Cryptography.ICryptoTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ToBase64Transform extends System.Object implements class System.IDisposable, class System.Security.Cryptography.ICryptoTransform" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Cryptography.ICryptoTransform</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Converts a <see cref="T:System.Security.Cryptography.CryptoStream" /> to base 64.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.  
  
   
  
## Examples  
 The following code example demonstrates how to use members of the ToBase64Transform class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/csharp/t-system.security.crypto_103_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_103_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/cpp/t-system.security.crypto_103_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToBase64Transform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ToBase64Transform" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanReuseTransform">
      <MemberSignature Language="C#" Value="public virtual bool CanReuseTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReuseTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current transform can be reused.</summary>
        <value>Always <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/csharp/p-system.security.crypto_75_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_75_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/cpp/p-system.security.crypto_75_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanTransformMultipleBlocks">
      <MemberSignature Language="C#" Value="public bool CanTransformMultipleBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTransformMultipleBlocks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether multiple blocks can be transformed.</summary>
        <value>Always <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In the current implementation, only one block can be transformed at a time, so this property is always `false`.  
  
   
  
## Examples  
 The following code example demonstrates how to call the CanTransformMultipleBlocks method to verify that multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/csharp/p-system.security.crypto_69_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_69_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/cpp/p-system.security.crypto_69_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.ToBase64Transform" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.  
  
 Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to call the Clear method to free up unused resources by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/csharp/m-system.security.crypto_100_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_100_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/cpp/m-system.security.crypto_100_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.ToBase64Transform" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying.  
  
 For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ToBase64Transform" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  
  
 When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ToBase64Transform ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ToBase64Transform" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InputBlockSize">
      <MemberSignature Language="C#" Value="public int InputBlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputBlockSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the input block size.</summary>
        <value>The size of the input data blocks in bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The input block size for this transformation is 3 bytes.  
  
   
  
## Examples  
 The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size of the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/csharp/p-system.security.crypto_70_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/visualbasic/p-system.security.crypto_70_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/cpp/p-system.security.crypto_70_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OutputBlockSize">
      <MemberSignature Language="C#" Value="public int OutputBlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputBlockSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the output block size.</summary>
        <value>The size of the output data blocks in bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The output block size for this transformation is 4 bytes.  
  
   
  
## Examples  
 The following code example demonstrates how to call the OutputBlockSize property to create a new byte array with the size of the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/csharp/p-system.security.crypto_8_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_8_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/cpp/p-system.security.crypto_8_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransformBlock">
      <MemberSignature Language="C#" Value="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 TransformBlock(unsigned int8[] inputBuffer, int32 inputOffset, int32 inputCount, unsigned int8[] outputBuffer, int32 outputOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBuffer" Type="System.Byte[]" />
        <Parameter Name="inputOffset" Type="System.Int32" />
        <Parameter Name="inputCount" Type="System.Int32" />
        <Parameter Name="outputBuffer" Type="System.Byte[]" />
        <Parameter Name="outputOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputBuffer">The input to compute to base 64.</param>
        <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
        <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
        <param name="outputBuffer">The output to which to write the result.</param>
        <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
        <summary>Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.</summary>
        <returns>The number of bytes written.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The TransformBlock method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.  
  
   
  
## Examples  
 The following code example demonstrates how to call the TransformBlock method to iterate through `inputBytes` transforming by `blockSize`. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/csharp/918bcb0d-40f9-46ec-886b-_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/visualbasic/918bcb0d-40f9-46ec-886b-_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/cpp/918bcb0d-40f9-46ec-886b-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The current <see cref="T:System.Security.Cryptography.ToBase64Transform" /> object has already been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The data size is not valid.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="inputBuffer" /> parameter contains an invalid offset length.  
  
 -or-  
  
 The <paramref name="inputCount" /> parameter contains an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputBuffer" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="inputBuffer" /> parameter requires a non-negative number.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransformFinalBlock">
      <MemberSignature Language="C#" Value="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] TransformFinalBlock(unsigned int8[] inputBuffer, int32 inputOffset, int32 inputCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBuffer" Type="System.Byte[]" />
        <Parameter Name="inputOffset" Type="System.Int32" />
        <Parameter Name="inputCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputBuffer">The input to convert to base 64.</param>
        <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
        <param name="inputCount">The number of bytes in the byte array to use as data.</param>
        <summary>Converts the specified region of the specified byte array to base 64.</summary>
        <returns>The computed base 64 conversion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of data. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  
  
 [!code-cs[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/csharp/028d2418-e06c-423a-a777-_1.cs)]
 [!code-vb[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/visualbasic/028d2418-e06c-423a-a777-_1.vb)]
 [!code-cpp[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/cpp/028d2418-e06c-423a-a777-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The current <see cref="T:System.Security.Cryptography.ToBase64Transform" /> object has already been disposed.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="inputBuffer" /> parameter contains an invalid offset length.  
  
 -or-  
  
 The <paramref name="inputCount" /> parameter contains an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputBuffer" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="inputBuffer" /> parameter requires a non-negative number.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>