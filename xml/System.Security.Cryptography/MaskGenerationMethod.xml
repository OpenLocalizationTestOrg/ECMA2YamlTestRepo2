<Type Name="MaskGenerationMethod" FullName="System.Security.Cryptography.MaskGenerationMethod">
  <TypeSignature Language="C#" Value="public abstract class MaskGenerationMethod" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MaskGenerationMethod extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the abstract class from which all mask generator algorithms must derive.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derived classes of MaskGenerationMethod compute masks that are used in key exchange algorithms such as Optimal Asymmetric Encryption Padding (OAEP).  
  
 This class is used by implementations of key exchange algorithms only for mask generation. Application code does not use this class directly.  
  
   
  
## Examples  
 The following code example demonstrates how to derive from the MaskGenerationMethod class.  
  
 [!code-cs[System.Security.Cryptography.MaskGenerationMethod#1](~/add/codesnippet/csharp/t-system.security.crypto_119_1.cs)]
 [!code-cpp[System.Security.Cryptography.MaskGenerationMethod#1](~/add/codesnippet/cpp/t-system.security.crypto_119_1.cpp)]
 [!code-vb[System.Security.Cryptography.MaskGenerationMethod#1](~/add/codesnippet/visualbasic/t-system.security.crypto_119_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MaskGenerationMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GenerateMask">
      <MemberSignature Language="C#" Value="public abstract byte[] GenerateMask (byte[] rgbSeed, int cbReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GenerateMask(unsigned int8[] rgbSeed, int32 cbReturn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbSeed" Type="System.Byte[]" />
        <Parameter Name="cbReturn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rgbSeed">The random seed to use to compute the mask.</param>
        <param name="cbReturn">The length of the generated mask in bytes.</param>
        <summary>When overridden in a derived class, generates a mask with the specified length using the specified random seed.</summary>
        <returns>A randomly generated mask whose length is equal to the <paramref name="cbReturn" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to override the GenerateMask to create and return a mask using the specified seed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.MaskGenerationMethod> class.  
  
 System.Security.Cryptography.MaskGenerationMethod#3  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>