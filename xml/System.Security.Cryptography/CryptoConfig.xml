<Type Name="CryptoConfig" FullName="System.Security.Cryptography.CryptoConfig">
  <TypeSignature Language="C#" Value="public class CryptoConfig" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CryptoConfig extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Accesses the cryptography configuration information.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows the simple names recognized by this class and the default algorithm implementations to which they map. Alternatively, you can map other implementations to these names, as described in [Mapping Algorithm Names to Cryptography Classes](~/add/includes/ajax-current-ext-md.md).  
  
|Simple name|Algorithm implementation|  
|-----------------|------------------------------|  
|3DES, Triple DES, TripleDES, System.Security.Cryptography.TripleDES|<xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>|  
|AES, System.Security.Cryptography.AesCryptoServiceProvider|<xref:System.Security.Cryptography.AesCryptoServiceProvider>|  
|AesManaged, System.Security.Cryptography.AesManaged|<xref:System.Security.Cryptography.AesManaged>|  
|System.Security.Cryptography.AsymmetricAlgorithm|<xref:System.Security.Cryptography.RSACryptoServiceProvider>|  
|DES, System.Security.Cryptography.DES|<xref:System.Security.Cryptography.DESCryptoServiceProvider>|  
|DSA, System.Security.Cryptography.DSA|<xref:System.Security.Cryptography.DSACryptoServiceProvider>|  
|ECDH, ECDiffieHellman, ECDiffieHellmanCng, System.Security.Cryptography.ECDiffieHellmanCng|<xref:System.Security.Cryptography.ECDiffieHellmanCng>|  
|ECDsa, ECDsaCng, System.Security.Cryptography.ECDsaCng|<xref:System.Security.Cryptography.ECDsaCng>|  
|System.Security.Cryptography.HashAlgorithm|<xref:System.Security.Cryptography.SHA1CryptoServiceProvider>|  
|HMAC, System.Security.Cryptography.HMAC|<xref:System.Security.Cryptography.HMACSHA1>|  
|HMACMD5, System.Security.Cryptography.HMACMD5|<xref:System.Security.Cryptography.HMACMD5>|  
|HMACRIPEMD160, System.Security.Cryptography.HMACRIPEMD160|<xref:System.Security.Cryptography.HMACRIPEMD160>|  
|HMACSHA1, System.Security.Cryptography.HMACSHA1|<xref:System.Security.Cryptography.HMACSHA1>|  
|HMACSHA256, System.Security.Cryptography.HMACSHA256|<xref:System.Security.Cryptography.HMACSHA256>|  
|HMACSHA384, System.Security.Cryptography.HMACSHA384|<xref:System.Security.Cryptography.HMACSHA384>|  
|HMACSHA512, System.Security.Cryptography.HMACSHA512|<xref:System.Security.Cryptography.HMACSHA512>|  
|System.Security.Cryptography.KeyedHashAlgorithm|<xref:System.Security.Cryptography.HMACSHA1>|  
|MACTripleDES, System.Security.Cryptography.MACTripleDES|<xref:System.Security.Cryptography.MACTripleDES>|  
|MD5, System.Security.Cryptography.MD5|<xref:System.Security.Cryptography.MD5CryptoServiceProvider>|  
|System.Security.Cryptography.MD5Cng|<xref:System.Security.Cryptography.MD5Cng>|  
|RandomNumberGenerator|<xref:System.Security.Cryptography.RNGCryptoServiceProvider>|  
|RC2, System.Security.Cryptography.RC2|<xref:System.Security.Cryptography.RC2CryptoServiceProvider>|  
|Rijndael, System.Security.Cryptography.Rijndael|<xref:System.Security.Cryptography.RijndaelManaged>|  
|RIPEMD160, RIPEMD-160, System.Security.Cryptography.RIPEMD160Managed|<xref:System.Security.Cryptography.RIPEMD160Managed>|  
|RSA, System.Security.Cryptography.RSA|<xref:System.Security.Cryptography.RSACryptoServiceProvider>|  
|SHA, SHA1, System.Security.Cryptography.SHA1|<xref:System.Security.Cryptography.SHA1CryptoServiceProvider>|  
|System.Security.Cryptography.SHA1Cng|<xref:System.Security.Cryptography.SHA1Cng>|  
|SHA256, SHA-256, System.Security.Cryptography.SHA256|<xref:System.Security.Cryptography.SHA256Managed>|  
|System.Security.Cryptography.SHA256Cng|<xref:System.Security.Cryptography.SHA256Cng>|  
|System.Security.Cryptography.SHA256CryptoServiceProvider|<xref:System.Security.Cryptography.SHA256CryptoServiceProvider>|  
|SHA384, SHA-384, System.Security.Cryptography.SHA384|<xref:System.Security.Cryptography.SHA384Managed>|  
|System.Security.Cryptography.SHA384Cng|<xref:System.Security.Cryptography.SHA384Cng>|  
|System.Security.Cryptography.SHA384CryptoServiceProvider|<xref:System.Security.Cryptography.SHA384CryptoServiceProvider>|  
|SHA512, SHA-512, System.Security.Cryptography.SHA512|<xref:System.Security.Cryptography.SHA512Managed>|  
|System.Security.Cryptography.SHA512Cng|<xref:System.Security.Cryptography.SHA512Cng>|  
|System.Security.Cryptography.SHA512CryptoServiceProvider|<xref:System.Security.Cryptography.SHA512CryptoServiceProvider>|  
|System.Security.Cryptography.SymmetricAlgorithm|<xref:System.Security.Cryptography.RijndaelManaged>|  
  
   
  
## Examples  
 The following code example demonstrates how to use members of the CryptoConfig class.  
  
 [!code-cs[System.Security.Cryptography.CryptoConfig#1](~/add/codesnippet/csharp/t-system.security.crypto_81_1.cs)]
 [!code-cpp[System.Security.Cryptography.CryptoConfig#1](~/add/codesnippet/cpp/t-system.security.crypto_81_1.cpp)]
 [!code-vb[System.Security.Cryptography.CryptoConfig#1](~/add/codesnippet/visualbasic/t-system.security.crypto_81_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CryptoConfig ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptoConfig" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAlgorithm">
      <MemberSignature Language="C#" Value="public static void AddAlgorithm (Type algorithm, string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddAlgorithm(class System.Type algorithm, string[] names) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Type" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="algorithm">The algorithm to map to.</param>
        <param name="names">An array of names to map to the algorithm.</param>
        <summary>Adds a set of names to algorithm mappings to be used for the current application domain.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified mappings take precedence over the built-in mappings and the mappings in the machine.config file. The mappings are used to prevent partially trust code from using trusted cryptographic operations.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The<paramref name=" algorithm" /> or <paramref name="names" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="algorithm" /> cannot be accessed from outside the assembly.  
  
 -or-  
  
 One of the entries in the <paramref name="names" /> parameter is empty or <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddOID">
      <MemberSignature Language="C#" Value="public static void AddOID (string oid, string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOID(string oid, string[] names) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oid" Type="System.String" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="oid">The object identifier (OID) to map to.</param>
        <param name="names">An array of names to map to the OID.</param>
        <summary>Adds a set of names to object identifier (OID) mappings to be used for the current application domain.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified mappings take precedence over the built-in mappings and the mappings in the machine.config file. The mappings are used to prevent partially trust code from using trusted cryptographic operations.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The<paramref name=" oid" /> or <paramref name="names" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">One of the entries in the <paramref name="names" /> parameter is empty or <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowOnlyFipsAlgorithms">
      <MemberSignature Language="C#" Value="public static bool AllowOnlyFipsAlgorithms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowOnlyFipsAlgorithms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the runtime should enforce the policy to create only Federal Information Processing Standard (FIPS) certified algorithms.</summary>
        <value>
          <see langword="true" /> to enforce the policy; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `false`, any algorithm may be created.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateFromName">
      <MemberSignature Language="C#" Value="public static object CreateFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateFromName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
        <summary>Creates a new instance of the specified cryptographic object.</summary>
        <returns>A new instance of the specified cryptographic object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For a list of simple names recognized by this class, see <xref:System.Security.Cryptography.CryptoConfig>.  
  
   
  
## Examples  
 The following code example demonstrates how to call the CreateFromName method to create a new SHA1 provider. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  
  
 [!code-cs[System.Security.Cryptography.CryptoConfig#4](~/add/codesnippet/csharp/m-system.security.crypto_75_1.cs)]
 [!code-cpp[System.Security.Cryptography.CryptoConfig#4](~/add/codesnippet/cpp/m-system.security.crypto_75_1.cpp)]
 [!code-vb[System.Security.Cryptography.CryptoConfig#4](~/add/codesnippet/visualbasic/m-system.security.crypto_75_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">The algorithm described by the <paramref name="name" /> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateFromName">
      <MemberSignature Language="C#" Value="public static object CreateFromName (string name, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateFromName(string name, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
        <param name="args">The arguments used to create the specified cryptographic object.</param>
        <summary>Creates a new instance of the specified cryptographic object with the specified arguments.</summary>
        <returns>A new instance of the specified cryptographic object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For a list of simple names recognized by this class, see <xref:System.Security.Cryptography.CryptoConfig>.  
  
   
  
## Examples  
 The following code example demonstrates how to call the CreateFromName method to initialize a new RSA provider instance accessing the `TestContainer` key container. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  
  
 [!code-cs[System.Security.Cryptography.CryptoConfig#5](~/add/codesnippet/csharp/e4d60361-8137-4437-9775-_1.cs)]
 [!code-cpp[System.Security.Cryptography.CryptoConfig#5](~/add/codesnippet/cpp/e4d60361-8137-4437-9775-_1.cpp)]
 [!code-vb[System.Security.Cryptography.CryptoConfig#5](~/add/codesnippet/visualbasic/e4d60361-8137-4437-9775-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">The algorithm described by the <paramref name="name" /> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EncodeOID">
      <MemberSignature Language="C#" Value="public static byte[] EncodeOID (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] EncodeOID(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The OID to encode.</param>
        <summary>Encodes the specified object identifier (OID).</summary>
        <returns>A byte array containing the encoded OID.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to call the EncodeOID method to encode the specified object identifier. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  
  
 [!code-cs[System.Security.Cryptography.CryptoConfig#6](~/add/codesnippet/csharp/m-system.security.crypto_22_1.cs)]
 [!code-cpp[System.Security.Cryptography.CryptoConfig#6](~/add/codesnippet/cpp/m-system.security.crypto_22_1.cpp)]
 [!code-vb[System.Security.Cryptography.CryptoConfig#6](~/add/codesnippet/visualbasic/m-system.security.crypto_22_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="str" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">An error occurred while encoding the OID.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MapNameToOID">
      <MemberSignature Language="C#" Value="public static string MapNameToOID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string MapNameToOID(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The simple name of the algorithm for which to get the OID.</param>
        <summary>Gets the object identifier (OID) of the algorithm corresponding to the specified simple name.</summary>
        <returns>The OID of the specified algorithm.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For a list of simple names recognized by this class, see <xref:System.Security.Cryptography.CryptoConfig>.  
  
   
  
## Examples  
 The following code example demonstrates how to call the MapNameToOID method to retrieve an object identifier (OID) from the string name of the SHA1 algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  
  
 [!code-cs[System.Security.Cryptography.CryptoConfig#3](~/add/codesnippet/csharp/m-system.security.crypto_80_1.cs)]
 [!code-cpp[System.Security.Cryptography.CryptoConfig#3](~/add/codesnippet/cpp/m-system.security.crypto_80_1.cpp)]
 [!code-vb[System.Security.Cryptography.CryptoConfig#3](~/add/codesnippet/visualbasic/m-system.security.crypto_80_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>