<Type Name="RC2CryptoServiceProvider" FullName="System.Security.Cryptography.RC2CryptoServiceProvider">
  <TypeSignature Language="C#" Value="public sealed class RC2CryptoServiceProvider : System.Security.Cryptography.RC2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RC2CryptoServiceProvider extends System.Security.Cryptography.RC2" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.RC2</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.RC2" /> algorithm. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RC2CryptoServiceProvider implementation supports key lengths from 40 bits to 128 bits in increments of 8 bits.  
  
 The RC2CryptoServiceProvider object is a block cipher that encrypts and decrypts data in blocks of 8 bytes.  This class pads the final block of data if it is less than 8 bytes.  As a result of this padding, the length of encrypted data could be greater than the original plaintext.  
  
 Note that the RC2CryptoServiceProvider object does not use salt.  
  
> [!NOTE]
>  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the RC2CryptoServiceProvider class. Use RC2CryptoServiceProvider only for compatibility with legacy applications and data.  
  
   
  
## Examples  
 The following code example encrypts and then decrypts a string.  
  
 [!code-cs[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/csharp/t-system.security.crypto_11_1.cs)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_11_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RC2CryptoServiceProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RC2CryptoServiceProvider" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example encrypts and then decrypts a string.  
  
 [!code-cs[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/csharp/m-system.security.crypto_73_1.cs)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_73_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        <exception cref="T:System.InvalidOperationException">A non-compliant FIPS algorithm was found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDecryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateDecryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
        <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
        <summary>Creates a symmetric <see cref="T:System.Security.Cryptography.RC2" /> decryptor object with the specified key (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;)and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;).</summary>
        <returns>A symmetric <see cref="T:System.Security.Cryptography.RC2" /> decryptor object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to decrypt an encrypted message created using the <xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor%2A> overload with the same parameters.  
  
   
  
## Examples  
 The following code example encrypts and then decrypts a string.  
  
 [!code-cs[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/csharp/6db44da5-ba5f-4459-90f5-_1.cs)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/6db44da5-ba5f-4459-90f5-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An <see cref="T:System.Security.Cryptography.CipherMode" /> cipher mode was used.  
  
 -or-  
  
 A <see cref="T:System.Security.Cryptography.CipherMode" /> cipher mode with a feedback size other than 8 bits was used.  
  
 -or-  
  
 An invalid key size was used.  
  
 -or-  
  
 The algorithm key size was not available.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateEncryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateEncryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
        <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
        <summary>Creates a symmetric <see cref="T:System.Security.Cryptography.RC2" /> encryptor object with the specified key (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;) and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;).</summary>
        <returns>A symmetric <see cref="T:System.Security.Cryptography.RC2" /> encryptor object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor%2A> overload with the same parameters to decrypt the result of this method.  
  
   
  
## Examples  
 The following code example encrypts and then decrypts a string.  
  
 [!code-cs[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/csharp/78d990fe-60aa-40f6-ad5c-_1.cs)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/78d990fe-60aa-40f6-ad5c-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An <see cref="T:System.Security.Cryptography.CipherMode" /> cipher mode was used.  
  
 -or-  
  
 A <see cref="T:System.Security.Cryptography.CipherMode" /> cipher mode with a feedback size other than 8 bits was used.  
  
 -or-  
  
 An invalid key size was used.  
  
 -or-  
  
 The algorithm key size was not available.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EffectiveKeySize">
      <MemberSignature Language="C#" Value="public override int EffectiveKeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EffectiveKeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the effective size, in bits, of the secret key used by the <see cref="T:System.Security.Cryptography.RC2" /> algorithm.</summary>
        <value>The effective key size, in bits, used by the <see cref="T:System.Security.Cryptography.RC2" /> algorithm.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The EffectiveKeySize property was set to a value other than the <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue" /> property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GenerateIV">
      <MemberSignature Language="C#" Value="public override void GenerateIV ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateIV() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a random initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;) to use for the algorithm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to generate a random <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> when none is specified.  
  
   
  
## Examples  
 The following code example encrypts and then decrypts a string.  
  
 [!code-cs[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/csharp/m-system.security.crypto_28_1.cs)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_28_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a random key (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;) to be used for the algorithm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to generate a random key when none is specified.  
  
 The <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation supports key lengths from 40 bits to 128 bits in increments of 8 bits.  
  
   
  
## Examples  
 The following code example encrypts and then decrypts a string.  
  
 [!code-cs[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/csharp/m-system.security.crypto_5_1.cs)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseSalt">
      <MemberSignature Language="C#" Value="public bool UseSalt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSalt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether to create a key with an 11-byte-long, zero-value salt.</summary>
        <value>
          <see langword="true" /> if the key should be created with an 11-byte-long, zero-value salt; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UseSalt property allows you to interoperate with an existing application that uses an 11-byte-long, zero-value salt.  For most scenarios, you should not use a salt with an <xref:System.Security.Cryptography.RC2CryptoServiceProvider> key.  
  
   
  
## Examples  
 The following code example sets the UseSalt property to `true`, and then encrypts and decrypts a value.  
  
 [!code-cs[Cryptography.RC2CryptoServiceProvider#1](~/add/codesnippet/csharp/p-system.security.crypto_12_1.cs)]
 [!code-vb[Cryptography.RC2CryptoServiceProvider#1](~/add/codesnippet/visualbasic/p-system.security.crypto_12_1.vb)]
 [!code-cpp[Cryptography.RC2CryptoServiceProvider#1](~/add/codesnippet/cpp/p-system.security.crypto_12_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>