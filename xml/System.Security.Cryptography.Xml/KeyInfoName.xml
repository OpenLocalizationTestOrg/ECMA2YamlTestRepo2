<Type Name="KeyInfoName" FullName="System.Security.Cryptography.Xml.KeyInfoName">
  <TypeSignature Language="C#" Value="public class KeyInfoName : System.Security.Cryptography.Xml.KeyInfoClause" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyInfoName extends System.Security.Cryptography.Xml.KeyInfoClause" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.Xml.KeyInfoClause</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a <see langword="&lt;KeyName&gt;" /> subelement of an XMLDSIG or XML Encryption <see langword="&lt;KeyInfo&gt;" /> element.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `<KeyName>` element contains a string identifier that the party validating or decrypting an XML document uses to identify the corresponding key.  For example, if you receive an encrypted or signed XML document that has a `<KeyName>` element value of "AsymmetricKey1", you will use a key that you and the sender have named "AsymmetricKey1" to decrypt or verify the document.  Both parties must agree on a key name mapping ahead of time.  Note that the actual key is not imbedded in the XML document.  
  
 For more information about the `<KeyName>` element, see Section 4.4.1 of the XMLDSIG specification, which is available from the World Wide Web Consortium (W3C) at www.w3.org/TR/xmldsig-core/, or see the XML Encryption specification, which is available from the W3C at www.w3.org/TR/xmlenc-core/.  
  
   
  
## Examples  
 The following code example uses the KeyInfoName object when signing a resource represented by a Universal Resource Identifier (URI).  This example saves the signature in a new file.  
  
 [!code-cs[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/csharp/t-system.security.crypto_38_1.cs)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/visualbasic/t-system.security.crypto_38_1.vb)]
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/cpp/t-system.security.crypto_38_1.cpp)]  
  
 The following code example uses the KeyInfoName object when signing an XML document.  This example saves the signature in a new file.  
  
 [!code-cs[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/csharp/t-system.security.crypto_38_2.cs)]
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/cpp/t-system.security.crypto_38_2.cpp)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/visualbasic/t-system.security.crypto_38_2.vb)]  
  
 The following code example uses the KeyInfoName object when encrypting an XML document. This example embeds an encrypted key within the encrypted XML document.  
  
 [!code-cs[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/csharp/t-system.security.crypto_38_3.cs)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/visualbasic/t-system.security.crypto_38_3.vb)]
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/cpp/t-system.security.crypto_38_3.cpp)]  
  
 The following code example uses the KeyInfoName object when encrypting an XML document. This example maps a name to a symmetric key to identify it to the decryption method.  
  
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/visualbasic/t-system.security.crypto_38_4.vb)]
 [!code-cs[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/csharp/t-system.security.crypto_38_4.cs)]
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/cpp/t-system.security.crypto_38_4.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyInfoName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when signing a resource represented by a Universal Resource Identifier (URI).  This example saves the signature in a new file.  
  
 [!code-cs[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/csharp/m-system.security.crypto_113_1.cs)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/visualbasic/m-system.security.crypto_113_1.vb)]
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/cpp/m-system.security.crypto_113_1.cpp)]  
  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when signing an XML document.  This example saves the signature in a new file.  
  
 [!code-cs[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/csharp/m-system.security.crypto_113_2.cs)]
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/cpp/m-system.security.crypto_113_2.cpp)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/visualbasic/m-system.security.crypto_113_2.vb)]  
  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when encrypting an XML document. This example embeds an encrypted key within the encrypted XML document.  
  
 [!code-cs[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/csharp/m-system.security.crypto_113_3.cs)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_113_3.vb)]
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/cpp/m-system.security.crypto_113_3.cpp)]  
  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when encrypting an XML document. This example maps a name to a symmetric key to identify it to the decryption method.  
  
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_113_4.vb)]
 [!code-cs[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/csharp/m-system.security.crypto_113_4.cs)]
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/cpp/m-system.security.crypto_113_4.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyInfoName (string keyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string keyName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keyName">The string identifier that is the value of the <see langword="&lt;KeyName&gt;" /> element.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> class by specifying the string identifier that is the value of the <see langword="&lt;KeyName&gt;" /> element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `keyName` parameter can contain any string; the interpretation of the string is specific to the application. White space is significant in the string value.  
  
 The `keyName` parameter specifies the value of the <xref:System.Security.Cryptography.Xml.KeyInfoName.Value%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement GetXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</summary>
        <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XmlElement> object returned by this method is suitable for use as a subelement of an XMLDSIG or XML Encryption `<KeyInfo>` element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public override void LoadXml (System.Xml.XmlElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadXml(class System.Xml.XmlElement value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Xml.XmlElement" /> object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</param>
        <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object to match.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadXml method is typically used to process a `<KeyName>` subelement of a `<KeyInfo>` element.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string identifier contained within a <see langword="&lt;KeyName&gt;" /> element.</summary>
        <value>The string identifier that is the value of the <see langword="&lt;KeyName&gt;" /> element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Value property can contain any string; the interpretation of the string is specific to the application. White space is significant in the string value.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when signing a resource represented by a Universal Resource Identifier (URI).  This example saves the signature in a new file.  
  
 [!code-cs[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/csharp/p-system.security.crypto_73_1.cs)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/visualbasic/p-system.security.crypto_73_1.vb)]
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/cpp/p-system.security.crypto_73_1.cpp)]  
  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when signing an XML document.  This example saves the signature in a new file.  
  
 [!code-cs[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/csharp/p-system.security.crypto_73_2.cs)]
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/cpp/p-system.security.crypto_73_2.cpp)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/visualbasic/p-system.security.crypto_73_2.vb)]  
  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when encrypting an XML document. This example embeds an encrypted key within the encrypted XML document.  
  
 [!code-cs[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/csharp/p-system.security.crypto_73_3.cs)]
 [!code-vb[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/visualbasic/p-system.security.crypto_73_3.vb)]
 [!code-cpp[Cryptography.XML.XMLEncImbedKey#1](~/add/codesnippet/cpp/p-system.security.crypto_73_3.cpp)]  
  
 The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfoName> object when encrypting an XML document. This example maps a name to a symmetric key to identify it to the decryption method.  
  
 [!code-vb[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/visualbasic/p-system.security.crypto_73_4.vb)]
 [!code-cs[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/csharp/p-system.security.crypto_73_4.cs)]
 [!code-cpp[Cryptography.XML.XMLEncMapKey#1](~/add/codesnippet/cpp/p-system.security.crypto_73_4.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>