<Type Name="RegExpConstructor" FullName="Microsoft.JScript.RegExpConstructor">
  <TypeSignature Language="C#" Value="public sealed class RegExpConstructor : Microsoft.JScript.ScriptFunction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegExpConstructor extends Microsoft.JScript.ScriptFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.JScript.ScriptFunction</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="public object Construct (string pattern, bool ignoreCase, bool global, bool multiline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Construct(string pattern, bool ignoreCase, bool global, bool multiline) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="global" Type="System.Boolean" />
        <Parameter Name="multiline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">The regular expression pattern to match.</param>
        <param name="ignoreCase">
          <see langword="true" /> to use case-insensitive matching; otherwise, <see langword="false" />.</param>
        <param name="global">
          <see langword="true" /> to use a global match; otherwise, <see langword="false" />.</param>
        <param name="multiline">
          <see langword="true" /> to use a multiline match; otherwise, <see langword="false" />.</param>
        <summary>Creates a new <see cref="T:Microsoft.JScript.RegExpObject" /> object for the specified regular expression pattern and flags.</summary>
        <returns>A new <see cref="T:Microsoft.JScript.RegExpObject" /> object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public Microsoft.JScript.RegExpObject CreateInstance (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.JScript.RegExpObject CreateInstance(object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.JScript.JSFunction(Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.RegExpObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">The arguments to pass to the constructor.</param>
        <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
        <returns>An instance of the object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="index">
      <MemberSignature Language="C#" Value="public object index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the last successful match, before advancing the index.</summary>
        <value>The index of the last successful match, if there was one.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="input">
      <MemberSignature Language="C#" Value="public object input { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object input" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the input string for a regular expression search.</summary>
        <value>The input string for a regular expression search.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public Microsoft.JScript.RegExpObject Invoke (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.JScript.RegExpObject Invoke(object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.JScript.JSFunction(Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.RegExpObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">The arguments to pass to the constructor.</param>
        <summary>Creates an instance of a prototype-based object, passing in the specified arguments.</summary>
        <returns>An instance of the object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="lastIndex">
      <MemberSignature Language="C#" Value="public object lastIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object lastIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the last successful match, after advancing the index.</summary>
        <value>The index of the last successful match, if there was one.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="lastMatch">
      <MemberSignature Language="C#" Value="public object lastMatch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object lastMatch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a string representation of the last successful match.</summary>
        <value>A string representation of the last successful match, if there was one.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="lastParen">
      <MemberSignature Language="C#" Value="public object lastParen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object lastParen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the last &lt;xref:System.Text.RegularExpressions.Group&gt; from the &lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt; of the last match.</summary>
        <value>A string representation of the last group, if there was one.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="leftContext">
      <MemberSignature Language="C#" Value="public object leftContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object leftContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a substring of the input string between the start of the input and the start of the last successful match.</summary>
        <value>A substring of the input string, if there was one.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="rightContext">
      <MemberSignature Language="C#" Value="public object rightContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object rightContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a substring of the input string between the start of the last successful match and the end of the input.</summary>
        <value>A substring of the input string, if there was one.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>