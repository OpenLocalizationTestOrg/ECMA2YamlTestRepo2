<Type Name="ITaskItem" FullName="Microsoft.Build.Framework.ITaskItem">
  <TypeSignature Language="C#" Value="public interface ITaskItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITaskItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("8661674F-2148-4F71-A92A-49875511C528")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines an [!INCLUDE[vstecmsbuild](~/add/includes/vstecmsbuild-md.md)] item that can be consumed and emitted by tasks.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The number of ITaskItem objects created during a build may not correspond exactly to items declared in a project file for the following reasons:  
  
-   Tasks sometimes create items that were not declared in the project file.  
  
-   An item collection can be declared in the project file with wildcards, which could create many items when built.  
  
   
  
## Examples  
 The following example shows the code for a task that creates one or more directories.  
  
 [!code-cs[msbuild_MakeDirTask#1](~/add/codesnippet/csharp/msbuild_MakeDirTask/msbuild_MakeDirTask.cs#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CloneCustomMetadata">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary CloneCustomMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionary CloneCustomMetadata() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the collection of custom metadata.</summary>
        <returns>The collection of custom metadata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Does not include built-in metadata.  
  
-   This method should return a clone of the metadata.  
  
-   Writing to this dictionary should not be reflected in the underlying item.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyMetadataTo">
      <MemberSignature Language="C#" Value="public void CopyMetadataTo (Microsoft.Build.Framework.ITaskItem destinationItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyMetadataTo(class Microsoft.Build.Framework.ITaskItem destinationItem) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationItem" Type="Microsoft.Build.Framework.ITaskItem" />
      </Parameters>
      <Docs>
        <param name="destinationItem">The item to copy the metadata entries to.</param>
        <summary>Copies the custom metadata entries to another item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Follow the guidelines below when implementing this method.  
  
-   Do not overwrite the <xref:Microsoft.Build.Framework.ITaskItem.ItemSpec%2A> property.  
  
-   Do not overwrite existing metadata entries.  
  
-   Do not copy metadata entries that do not make sense on the destination item.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public string GetMetadata (string metadataName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetMetadata(string metadataName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="metadataName">The name of the metadata entry.</param>
        <summary>Gets the value of the specified metadata entry.</summary>
        <returns>The value of the <paramref name="attributeName" /> metadata.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemSpec">
      <MemberSignature Language="C#" Value="public string ItemSpec { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemSpec" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the item specification.</summary>
        <value>The item specification.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The item specification is an arbitrary string. If the item represents a file on disk, the item specification will be the path of that file.  
  
 The ItemSpec for the following item declaration in a project file is `File.cs`.  
  
```  
<ItemGroup>  
    <Compile Include="File.cs"/>  
</ItemGroup>  
```  
  
   
  
## Examples  
 The following example shows the code for a task that creates one or more directories.  
  
 [!code-cs[msbuild_MakeDirTask#1](~/add/codesnippet/csharp/msbuild_MakeDirTask/msbuild_MakeDirTask.cs#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MetadataCount">
      <MemberSignature Language="C#" Value="public int MetadataCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of metadata entries associated with the item.</summary>
        <value>The number of metadata entries associated with the item.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MetadataNames">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection MetadataNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection MetadataNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the names of the metadata entries associated with the item.</summary>
        <value>The names of the metadata entries associated with the item.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveMetadata">
      <MemberSignature Language="C#" Value="public void RemoveMetadata (string metadataName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveMetadata(string metadataName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="metadataName">The name of the metadata entry to remove.</param>
        <summary>Removes the specified metadata entry from the item.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public void SetMetadata (string metadataName, string metadataValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMetadata(string metadataName, string metadataValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataName" Type="System.String" />
        <Parameter Name="metadataValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="metadataName">The name of the metadata entry.</param>
        <param name="metadataValue">The value of the metadata entry.</param>
        <summary>Adds or changes a custom metadata entry to the item.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>