<Type Name="UserNamePasswordValidator" FullName="System.IdentityModel.Selectors.UserNamePasswordValidator">
  <TypeSignature Language="C#" Value="public abstract class UserNamePasswordValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UserNamePasswordValidator extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Validates a username and password.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the UserNamePasswordValidator class to specify how a username and password is validated. This can be done by deriving a class from UserNamePasswordValidator and override the <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> method. For more information about creating a custom user name and password validator, see [How to: Use a Custom User Name and Password Validator](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 [!code-vb[c_UsernameValidator#1](~/add/codesnippet/visualbasic/t-system.identitymodel.s_4_1.vb)]
 [!code-cs[c_UsernameValidator#1](~/add/codesnippet/csharp/t-system.identitymodel.s_4_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UserNamePasswordValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateMembershipProviderValidator">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator (System.Web.Security.MembershipProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator(class System.Web.Security.MembershipProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.Security.MembershipProvider" />
      </Parameters>
      <Docs>
        <param name="provider">A &lt;xref:System.Web.Security.MembershipProvider&gt; to validate the username and password.</param>
        <summary>Gets an instance of a <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> that validates a username and password using the specified membership provider.</summary>
        <returns>An <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> that validates a username and password using <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this static property can be supplied as a parameter to one of the constructors for the <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IdentityModel.Selectors.UserNamePasswordValidator None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a validator that performs no validation on the username and password. As a result, the username and password are always deemed valid.</summary>
        <value>An <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> that performs no validation on the username and password.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this static property can be supplied as a parameter to one of the constructors for the <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract void Validate (string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(string userName, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The username to validate.</param>
        <param name="password">The password to validate.</param>
        <summary>When overridden in a derived class, validates the specified username and password.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the Validate method to specify how the username and password is validated. If the username and password do not pass validation, then throw a <xref:System.IdentityModel.Tokens.SecurityTokenValidationException>.  
  
   
  
## Examples  
 [!code-vb[c_UsernameValidator#2](~/add/codesnippet/visualbasic/6855a484-3e15-4d15-ac89-_1.vb)]
 [!code-cs[c_UsernameValidator#2](~/add/codesnippet/csharp/6855a484-3e15-4d15-ac89-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>