<Type Name="IsExplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsExplicitlyDereferenced">
  <TypeSignature Language="C#" Value="public static class IsExplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsExplicitlyDereferenced extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Indicates that a managed pointer represents a pointer parameter within a method signature. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In C++, managed pointers and managed references are emitted into metadata as pointers.  To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.  It emits no modifier on managed reference types.  Compilers need to know the correct calling syntax when importing a method from metadata scope.  The IsExplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.  
  
 Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  
  
 You can emit custom modifiers into metadata using one of the following techniques:  
  
-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  
  
-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).  
  
-   Using the unmanaged reflection API.  
  
   
  
## Examples  
 The following example demonstrates how to emit an IsExplicitlyDereferenced object into an assembly using reflection.  
  
 [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/add/codesnippet/cpp/t-system.runtime.compile_5_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members />
</Type>