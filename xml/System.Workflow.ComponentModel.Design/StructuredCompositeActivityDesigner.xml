<Type Name="StructuredCompositeActivityDesigner" FullName="System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner">
  <TypeSignature Language="C#" Value="public abstract class StructuredCompositeActivityDesigner : System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit StructuredCompositeActivityDesigner extends System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.Design.CompositeActivityDesigner</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides common methods and properties for composite activity designers that contain structured layouts.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  
  
 The StructuredCompositeActivityDesigner is the base class for all designers that contain child designers and the child designers are connected to each other using lines rendered on the design surface, called connectors. The class is provided so that activity designer developers can provide a number of activity designer layout types, rather than being tied to the layout provided in the <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> class.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StructuredCompositeActivityDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ActiveView">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Design.DesignerView ActiveView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.DesignerView ActiveView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.DesignerView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that contains information about the current designer view displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <value>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that contains information about the current view displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ActiveView contains the view ID and any text, images, activity designers, and user data associated with the view.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanInsertActivities">
      <MemberSignature Language="C#" Value="public override bool CanInsertActivities (System.Workflow.ComponentModel.Design.HitTestInfo insertLocation, System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt; activitiesToInsert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanInsertActivities(class System.Workflow.ComponentModel.Design.HitTestInfo insertLocation, class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Activity&gt; activitiesToInsert) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="insertLocation" Type="System.Workflow.ComponentModel.Design.HitTestInfo" />
        <Parameter Name="activitiesToInsert" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt;" />
      </Parameters>
      <Docs>
        <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains the screen location at which to attempt to insert the activities.</param>
        <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add.</param>
        <summary>Returns a value that indicates whether the specified activities can be added to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> at the specified location on the workflow design surface.</summary>
        <returns>
          <see langword="true" /> if the specified activities can be inserted at the specified location on the workflow design surface; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to lock a <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner> by not allowing the insertion of child activities.  
  
 [!code-cs[WF_Samples#25](~/add/codesnippet/csharp/wf_snippets/snippets.cs#25)]
 [!code-vb[WF_Samples#25](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#25)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanRemoveActivities">
      <MemberSignature Language="C#" Value="public override bool CanRemoveActivities (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt; activitiesToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanRemoveActivities(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Activity&gt; activitiesToRemove) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activitiesToRemove" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt;" />
      </Parameters>
      <Docs>
        <param name="activitiesToRemove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to remove.</param>
        <summary>Returns a value that indicates whether the specified activities can be removed from the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <returns>
          <see langword="true" /> if the specified activities can be removed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to override the CanRemoveActivities method to allow the moving of child activities within the <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner>.  
  
 [!code-cs[WF_Samples#27](~/add/codesnippet/csharp/wf_snippets/snippets.cs#27)]
 [!code-vb[WF_Samples#27](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#27)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContainedDesigners">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesigner&gt; ContainedDesigners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.ActivityDesigner&gt; ContainedDesigners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesigner&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a generic read-only collection that contains all activity designers that are children of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <value>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> read-only collection that contains the child designers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the addition of a new branch using a designer based off of the <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> class.  If <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanInsertActivities%2A> returns true, a new branch is created using the <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.InsertActivities%2A> method. A <xref:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo> object is created as a parameter to the <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.InsertActivities%2A> method. When this is finished, the <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.EnsureVisibleContainedDesigner%2A> method is used to ensure that the newly added branch is displayed in the workflow designer by accessing a single object in the ContainedDesigners collection.  
  
 [!code-cs[WF_Samples#28](~/add/codesnippet/csharp/wf_snippets/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentDropTarget">
      <MemberSignature Language="C#" Value="protected virtual int CurrentDropTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDropTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the current drop target in the array of drop targets returned by &lt;xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetDropTargets%2A&gt;.</summary>
        <value>An integer that represents the index of the current drop target for the designer.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DrawConnectors">
      <MemberSignature Language="C#" Value="protected void DrawConnectors (System.Drawing.Graphics graphics, System.Drawing.Pen pen, System.Drawing.Point[] points, System.Workflow.ComponentModel.Design.LineAnchor startCap, System.Workflow.ComponentModel.Design.LineAnchor endCap);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DrawConnectors(class System.Drawing.Graphics graphics, class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, valuetype System.Workflow.ComponentModel.Design.LineAnchor startCap, valuetype System.Workflow.ComponentModel.Design.LineAnchor endCap) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="startCap" Type="System.Workflow.ComponentModel.Design.LineAnchor" />
        <Parameter Name="endCap" Type="System.Workflow.ComponentModel.Design.LineAnchor" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the connectors.</param>
        <param name="pen">The <see cref="T:System.Drawing.Pen" /> to draw the connectors.</param>
        <param name="points">The <see cref="T:System.Drawing.Point" /> array that contains the endpoints for each of the connectors to draw.</param>
        <param name="startCap">A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> that determines the graphic to draw at connector start points.</param>
        <param name="endCap">A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> that determines the graphic to draw at connector end points.</param>
        <summary>Draws all of the connectors to display on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Connectors are links between separate designers on a workflow design surface. These links appear as lines on the design surface and each line end connects to a visible point on the designers it connects. These points are called connection points.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisibleContainedDesigner">
      <MemberSignature Language="C#" Value="public override void EnsureVisibleContainedDesigner (System.Workflow.ComponentModel.Design.ActivityDesigner containedDesigner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnsureVisibleContainedDesigner(class System.Workflow.ComponentModel.Design.ActivityDesigner containedDesigner) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containedDesigner" Type="System.Workflow.ComponentModel.Design.ActivityDesigner" />
      </Parameters>
      <Docs>
        <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to ensure visibility on the workflow design surface.</param>
        <summary>Ensures that the specified activity designer is visible on the workflow design surface.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstSelectableObject">
      <MemberSignature Language="C#" Value="public override object FirstSelectableObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FirstSelectableObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <value>An &lt;xref:System.Object&gt; that is the first selectable object in the designer navigation order.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 FirstSelectableObject returns the <xref:System.Workflow.ComponentModel.Activity> associated with the <xref:System.Workflow.ComponentModel.Design.DesignerView.AssociatedDesigner%2A> property that is exposed through <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ActiveView%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDropTargets">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle[] GetDropTargets (System.Drawing.Point dropPoint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle[] GetDropTargets(valuetype System.Drawing.Point dropPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dropPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> to query the design surface with.</param>
        <summary>Returns an array of valid drop locations on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> surface.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> surface.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInnerConnections">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Drawing.Point&gt; GetInnerConnections (System.Workflow.ComponentModel.Design.DesignerEdges edges);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;valuetype System.Drawing.Point&gt; GetInnerConnections(valuetype System.Workflow.ComponentModel.Design.DesignerEdges edges) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Drawing.Point&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edges" Type="System.Workflow.ComponentModel.Design.DesignerEdges" />
      </Parameters>
      <Docs>
        <param name="edges">The DesignerEdges along which to search for connection points.</param>
        <summary>Returns a read-only collection of points that represent the inner connection points for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <returns>A <see cref="T:System.Drawing.Point" /> generic read-only collection that contains the inner connection points for the designer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Connectors are links between separate designers on a workflow design surface. These links appear as lines on the design surface and each line end connects to a visible point on each designer it connects. These points are called connection points. Designer classes that inherit from the <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner> class can contain other designers, and GetInnerConnections returns a read-only collection of all the connection points for the designers associated with `edges` that are contained by the <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNextSelectableObject">
      <MemberSignature Language="C#" Value="public override object GetNextSelectableObject (object current, System.Workflow.ComponentModel.Design.DesignerNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetNextSelectableObject(object current, valuetype System.Workflow.ComponentModel.Design.DesignerNavigationDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Object" />
        <Parameter Name="direction" Type="System.Workflow.ComponentModel.Design.DesignerNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="current">The current object in the navigation order.</param>
        <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> that determines the navigation order of the designer.</param>
        <summary>Returns the first selectable object that follows the specified object in the navigation order for the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <returns>The first selectable &lt;xref:System.Object&gt; that follows the <paramref name="obj" /> parameter in the navigation order.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected override void Initialize (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Initialize(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</param>
        <summary>Initializes the designer by using the specified activity.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Initialize ensures that the active view loaded into the workflow design surface is a valid view.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertActivities">
      <MemberSignature Language="C#" Value="public override void InsertActivities (System.Workflow.ComponentModel.Design.HitTestInfo insertLocation, System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt; activitiesToInsert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void InsertActivities(class System.Workflow.ComponentModel.Design.HitTestInfo insertLocation, class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Activity&gt; activitiesToInsert) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="insertLocation" Type="System.Workflow.ComponentModel.Design.HitTestInfo" />
        <Parameter Name="activitiesToInsert" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt;" />
      </Parameters>
      <Docs>
        <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that specifies the location to add the activities.</param>
        <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</param>
        <summary>Adds the specified activities to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> at the specified location on the workflow design surface.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastSelectableObject">
      <MemberSignature Language="C#" Value="public override object LastSelectableObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object LastSelectableObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <value>The &lt;xref:System.Object&gt; that is the last selectable object in the designer navigation order.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner> is the active activity designer, LastSelectableObject returns `null` (`Nothing` in Visual Basic). If a child activity designer is the active designer, it returns the last selectable object associated with the active child designer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(class System.IO.BinaryReader reader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="reader">A &lt;xref:System.IO.BinaryReader&gt; used to restore the designer view state.</param>
        <summary>Loads the view state of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> from a binary stream.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> contains a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public override System.Drawing.Size MinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum size settings for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <value>The <see cref="T:System.Drawing.Size" /> that represents the smallest possible size for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveActivities">
      <MemberSignature Language="C#" Value="public override void MoveActivities (System.Workflow.ComponentModel.Design.HitTestInfo moveLocation, System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt; activitiesToMove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveActivities(class System.Workflow.ComponentModel.Design.HitTestInfo moveLocation, class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Activity&gt; activitiesToMove) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moveLocation" Type="System.Workflow.ComponentModel.Design.HitTestInfo" />
        <Parameter Name="activitiesToMove" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Activity&gt;" />
      </Parameters>
      <Docs>
        <param name="moveLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains the location on the workflow design surface to move the activities.</param>
        <param name="activitiesToMove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection to move.</param>
        <summary>Moves the specified activities from one designer displayed in the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> to another.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnActivityChanged">
      <MemberSignature Language="C#" Value="protected override void OnActivityChanged (System.Workflow.ComponentModel.Design.ActivityChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnActivityChanged(class System.Workflow.ComponentModel.Design.ActivityChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains information about the changed activity.</param>
        <summary>Notifies the designer when the activity associated with it changes.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContainedActivitiesChanging">
      <MemberSignature Language="C#" Value="protected override void OnContainedActivitiesChanging (System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs listChangeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContainedActivitiesChanging(class System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs listChangeArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listChangeArgs" Type="System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the activities that changed.</param>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when more than one of the activities it contains has changed.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected override void OnDragDrop (System.Workflow.ComponentModel.Design.ActivityDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragDrop(class System.Workflow.ComponentModel.Design.ActivityDragEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is completed with the bounds of its design surface.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> contains a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected override void OnDragEnter (System.Workflow.ComponentModel.Design.ActivityDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragEnter(class System.Workflow.ComponentModel.Design.ActivityDragEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor enters the bounds of the designer.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> contains a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected override void OnDragLeave ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragLeave() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor leaves the bounds of the designer.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected override void OnDragOver (System.Workflow.ComponentModel.Design.ActivityDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragOver(class System.Workflow.ComponentModel.Design.ActivityDragEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> contains a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLayoutPosition">
      <MemberSignature Language="C#" Value="protected override void OnLayoutPosition (System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayoutPosition(class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
        <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> contains a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLayoutSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size OnLayoutSize (System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Size OnLayoutSize(class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when the size of the visual cues on the designers displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> have changed.</summary>
        <returns>The <see cref="T:System.Drawing.Size" /> that represents the new size of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> on the workflow design surface.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnShowSmartTagVerbs">
      <MemberSignature Language="C#" Value="protected override void OnShowSmartTagVerbs (System.Drawing.Point smartTagPoint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnShowSmartTagVerbs(valuetype System.Drawing.Point smartTagPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smartTagPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="smartTagPoint">The <see cref="T:System.Drawing.Point" /> that represents the location on the workflow design surface for which to show <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> objects.</param>
        <summary>Displays the designer verbs associated with a smart tag at a specified location on the workflow design surface.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnViewChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnViewChanged (System.Workflow.ComponentModel.Design.DesignerView view);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnViewChanged(class System.Workflow.ComponentModel.Design.DesignerView view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="System.Workflow.ComponentModel.Design.DesignerView" />
      </Parameters>
      <Docs>
        <param name="view">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that is to be set.</param>
        <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when the current designer view changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override void SaveViewState (System.IO.BinaryWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SaveViewState(class System.IO.BinaryWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The &lt;xref:System.IO.BinaryWriter&gt; to which the current designer view state is stored.</param>
        <summary>Stores the current view state of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> to a binary stream.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowSmartTag">
      <MemberSignature Language="C#" Value="protected override bool ShowSmartTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowSmartTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> displays smart tags.</summary>
        <value>
          <see langword="true" /> if the designer displays smart tags; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SmartTagVerbs">
      <MemberSignature Language="C#" Value="protected override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt; SmartTagVerbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt; SmartTagVerbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a read-only collection of designer actions that are associated with the smart tags on the designer.</summary>
        <value>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> read-only collection that contains all the actions associated with the smart tags on the designer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The collection is returned only if the <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner> hosts multiple views. Use the <xref:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.Views%2A> property to determine how many views the current designer hosts.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Views">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.DesignerView&gt; Views { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.DesignerView&gt; Views" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.DesignerView&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get a read-only collection of designer views that the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> hosts.</summary>
        <value>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> read-only collection that contains the views hosted by the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>