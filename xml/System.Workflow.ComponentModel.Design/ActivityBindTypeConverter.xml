<Type Name="ActivityBindTypeConverter" FullName="System.Workflow.ComponentModel.Design.ActivityBindTypeConverter">
  <TypeSignature Language="C#" Value="public class ActivityBindTypeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActivityBindTypeConverter extends System.ComponentModel.TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a type converter to convert <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> classes to and from various other representations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  
  
 This converter can only convert an <xref:System.Workflow.ComponentModel.ActivityBind> object to and from a string.  
  
 For more information about type converters, see the TypeConverter base class and [How to: Implement a Type Converter](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  You should never create an instance of ActivityBindTypeConverter. Instead, call the <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> method of the <xref:System.ComponentModel.TypeDescriptor> class.  For more information, see the examples in the <xref:System.ComponentModel.TypeConverter> class.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActivityBindTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="sourceType">A &lt;xref:System.Type&gt; that represents the type to convert.</param>
        <summary>Returns a value indicating whether this converter can convert an object of the given source type to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> using the specified context.</summary>
        <returns>
          <see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CanConvertFrom returns `true` if `sourceType` is a string.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="destinationType">A &lt;xref:System.Type&gt; that represents the type to convert the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to.</param>
        <summary>Returns a value indicating whether this converter can convert an <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to the destination type using the specified context.</summary>
        <returns>
          <see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `context` parameter can be used to extract additional information about the environment this converter is being invoked from. This can be a null reference (`Nothing` in Visual Basic), so always check. Also, properties on the `context` object can return a null reference (`Nothing`).  
  
> [!NOTE]
>  Override this method to provide your own conversion requirements.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object valueToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object valueToConvert) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="valueToConvert" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="culture">An optional &lt;xref:System.Globalization.CultureInfo&gt;. If not supplied, the current culture is assumed.</param>
        <param name="valueToConvert">The &lt;xref:System.Object&gt; to convert.</param>
        <summary>Converts the specified object to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />, using the specified context and culture information.</summary>
        <returns>The &lt;xref:System.Object&gt; that represents the converted value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This converter can only convert an <xref:System.Workflow.ComponentModel.ActivityBind> object to and from a string.  
  
 `context` can be used to extract additional information about the environment this converter is being invoked from. This can be a null reference (`Nothing` in Visual Basic), so always check. Also, properties on the `context` object can return a null reference (`Nothing`).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An error occurred while converting <paramref name="valueToConvert" /> to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="culture">The &lt;xref:System.Globalization.CultureInfo&gt; into which the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> will be converted.</param>
        <param name="value">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to convert.</param>
        <param name="destinationType">The &lt;xref:System.Type&gt; to convert the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to.</param>
        <summary>Converts the specified <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> object to the specified type using the specified context and culture.</summary>
        <returns>The converted object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ConvertTo converts an <xref:System.Workflow.ComponentModel.ActivityBind> to a string.  
  
 `context` can be used to extract additional information about the environment this converter is being invoked from. This can be a null reference (`Nothing` in Visual Basic), so always check. Also, properties on the `context` object can return a null reference (`Nothing`).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value, Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.PropertyDescriptorCollection GetProperties(class System.ComponentModel.ITypeDescriptorContext context, object value, class System.Attribute[] attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="attributes" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="value">An &lt;xref:System.Object&gt; that specifies the type of array for which to get properties.</param>
        <param name="attributes">An &lt;xref:System.Attribute&gt; array that is used as a filter.</param>
        <summary>Returns a collection of properties for the type of array specified by the <paramref name="value" /> parameter using the specified context and attributes.</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<see langword="Nothing" /> in Visual Basic) if there are no properties.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesSupported">
      <MemberSignature Language="C#" Value="public override bool GetPropertiesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetPropertiesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <summary>Returns a value indicating whether the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> supports properties using the specified context.</summary>
        <returns>
          <see langword="true" /> if &lt;xref:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetProperties%2A&gt; should be called to find the properties of this object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValues">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.TypeConverter/StandardValuesCollection GetStandardValues(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter+StandardValuesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <summary>Returns a collection of standard values for the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> data type using the specified context.</summary>
        <returns>A &lt;xref:System.ComponentModel.TypeConverter.StandardValuesCollection&gt; that holds a standard set of valid values or a null reference (<see langword="Nothing" /> in Visual Basic) if the data type does not support a standard set of values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `context` can be used to extract additional information about the environment from which this converter is invoked. `context` or any property available through it can be a null reference (`Nothing`).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesExclusive">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesExclusive(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <summary>Returns whether the collection of standard values returned from &lt;xref:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues%2A&gt; is an exclusive list of possible values, using the specified context.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.ComponentModel.TypeConverter.StandardValuesCollection&gt; returned from &lt;xref:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues%2A&gt; is an exhaustive list of possible values; <see langword="false" /> if other values are possible.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <xref:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues%2A> method provides. If the values are exclusive, the list returned by <xref:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues%2A> should not allow these values to be edited.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesSupported">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
        <returns>
          <see langword="true" /> if &lt;xref:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues%2A&gt; should be called to find a common set of values the object supports; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the `context` parameter to extract additional information about the environment from which this converter is invoked. This parameter can be a null reference (`Nothing` in Visual Basic), so always check it. Also, properties on the context object can return a null reference (`Nothing`).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>