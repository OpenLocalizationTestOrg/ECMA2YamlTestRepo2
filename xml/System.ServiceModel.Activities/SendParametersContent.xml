<Type Name="SendParametersContent" FullName="System.ServiceModel.Activities.SendParametersContent">
  <TypeSignature Language="C#" Value="public sealed class SendParametersContent : System.ServiceModel.Activities.SendContent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SendParametersContent extends System.ServiceModel.Activities.SendContent" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Activities.SendContent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Parameters")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enables sending data to or from a workflow service in the form of parameters.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SendParametersContent is interoperable with regular [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] clients and services. The SendParametersContent collection is similar to the argument declaration on a C# method signature.The SendParametersContent collection cannot contain an argument that is a message contract or of type <xref:System.ServiceModel.Channels.Message>. Use <xref:System.ServiceModel.Activities.SendMessageContent> for these types of data.  
  
   
  
## Examples  
 The following example shows how to use the SendParametersContent class.  
  
 [!code-cs[SendReceiveParameters#2](~/add/codesnippet/csharp/echoworkflowservice/program.cs#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendParametersContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendParametersContent (System.Collections.Generic.IDictionary&lt;string,System.Activities.InArgument&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;string, class System.Activities.InArgument&gt; parameters) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Activities.InArgument&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">A collection of key-value pairs with the keys containing the parameter names and the values containing the arguments.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> class with the specified parameters.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use this <xref:System.ServiceModel.Activities.SendParametersContent> constructor.  
  
 [!code-cs[SendReceiveParameters#2](~/add/codesnippet/csharp/echoworkflowservice/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,System.Activities.InArgument&gt; Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Activities.InArgument&gt; Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Activities.InArgument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the workflow service operation parameters.</summary>
        <value>An ordered collection of key-value pairs with the keys containing the parameter names and the values containing the arguments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to set the Parameters property.  
  
 [!code-cs[SendReceiveParameters#2](~/add/codesnippet/csharp/echoworkflowservice/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>