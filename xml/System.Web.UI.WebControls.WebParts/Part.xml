<Type Name="Part" FullName="System.Web.UI.WebControls.WebParts.Part">
  <TypeSignature Language="C#" Value="public abstract class Part : System.Web.UI.WebControls.Panel, System.Web.UI.INamingContainer, System.Web.UI.WebControls.ICompositeControlDesignerAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Part extends System.Web.UI.WebControls.Panel implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.ICompositeControlDesignerAccessor" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Panel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.ICompositeControlDesignerAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.PartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serves as the base class for all Web Parts part controls, which render a modular user interface on a Web Forms page.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Part class defines properties that are common to all part controls and enable them to have a modular and consistent appearance on a Web page. These common properties include a title, a description, and characteristics of the chrome or frame that surrounds a part control.  
  
 The <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> property specifies a title for the part control. The <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A> property is used to summarize the part control's purpose, and appears as a ToolTip in the title bar of the control. The <xref:System.Web.UI.WebControls.WebParts.Part.ChromeType%2A> property dictates what kind of border is rendered around a part control, while the <xref:System.Web.UI.WebControls.WebParts.Part.ChromeState%2A> property indicates whether a part control is rendered normally, or minimized. The border of a part control is affected by the properties of the zone that contains it; for example, the <xref:System.Web.UI.WebControls.WebParts.WebZone.PartChromeType%2A> property affects the frames of all part controls contained in a zone.  
  
 One type of part control is the <xref:System.Web.UI.WebControls.WebParts.WebPart> control, which renders content inside a corresponding zone. Another type is the <xref:System.Web.UI.WebControls.WebParts.EditorPart> control, which provides user interface (UI) controls used to modify (personalize) individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. A third type of part control is the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control, which provides a list of <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that users can add to or remove from a Web page.  
  
 Part controls are contained in zones, all of which derive from the abstract <xref:System.Web.UI.WebControls.WebParts.WebZone> class. A zone is responsible for organizing the part controls it contains. Each zone also renders UI elements for itself, including a header, a footer, a title bar, and UI elements around each contained part control, such as borders.  
  
> [!NOTE]
>  While part controls usually reside in zones, it is possible to place a part control outside a zone, if the control is referenced declaratively in the markup of a Web page. If a part control is declared outside a zone on a Web page, the control still works, but loses most of its Web Parts functionality. For example, the control cannot be edited, and cannot be dragged into a zone at run time. It is also helpful to remember that no part control can be dragged from a zone and dropped onto a page outside of a zone at run time.  
  
 Some examples of base part types, and their corresponding zone types, are shown in the following table.  
  
|Part control type|Zone type|  
|-----------------------|---------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPart>|<xref:System.Web.UI.WebControls.WebParts.WebPartZone>|  
|<xref:System.Web.UI.WebControls.WebParts.EditorPart>|<xref:System.Web.UI.WebControls.WebParts.EditorZone>|  
|<xref:System.Web.UI.WebControls.WebParts.CatalogPart>|<xref:System.Web.UI.WebControls.WebParts.CatalogZone>|  
  
 The various kinds of part controls that derive from the Part class handle the inherited, UI-oriented properties differently. <xref:System.Web.UI.WebControls.WebParts.WebPart> controls override several of the inherited UI properties, and mark them with the `Personalizable` attribute (for details, see the <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute> class documentation), which enables the values of those properties to be saved for future browser sessions, a feature known as personalization. For example, if you programmatically enable a user to update the value of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control's <xref:System.Web.UI.WebControls.WebParts.WebPart.Title%2A> property at run time, that value will be personalized (assuming that personalization is enabled, which is the default). Several UI properties that <xref:System.Web.UI.WebControls.WebParts.WebPart> controls inherit from the Part class, and from the <xref:System.Web.UI.WebControls.WebControl> class, are handled the same way.  
  
 In contrast, other part controls, such as <xref:System.Web.UI.WebControls.WebParts.EditorPart> and <xref:System.Web.UI.WebControls.WebParts.CatalogPart>, do not enable the inherited UI properties to be personalized. For this reason, programmatically assigned property values are not saved for future browser sessions. For example, if you programmatically enable a user to update a <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> control's <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart.Title%2A> property at run time, the updated value is lost after the control is closed or the browser session ends.  
  
 An easy way to save the values on such inherited UI properties for <xref:System.Web.UI.WebControls.WebParts.EditorPart> and <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls for future browser sessions is to declare the property values in page persistence format. However, this is a static approach and still does not allow users to personalize the property values. As an alternative, if you want to enable programmatic updates to the inherited UI properties so users can personalize them at run time, you can use private, static variables to save the property values. Each time a new instance of an <xref:System.Web.UI.WebControls.WebParts.EditorPart> or <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control is created (for example, in the method that handles the control's <xref:System.Web.UI.Control.Init> event), you can reassign a static variable's value to a corresponding property. Such an approach gives users the ability to personalize the editing UI and catalog UI of a Web Parts application.  
  
   
  
## Examples  
 The following code examples demonstrate declarative use of several properties of the Part class, by using two instances of a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control referenced in an ASP.NET Web page. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  
  
 The first part of the example contains the code for the custom control, named `TextDisplayWebPart`. Because the control derives from <xref:System.Web.UI.WebControls.WebParts.WebPart>, it also inherits the common properties that the Part class provides, and illustrates the use of those properties in this code example.  
  
 [!code-vb[WebParts_Part_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_195_1.vb)]
 [!code-cs[WebParts_Part_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_195_1.cs)]  
  
 The second part of the example shows how to reference the custom part controls in an ASP.NET Web page. Notice that the various Part properties are assigned declaratively to the custom control instances. Compare the declarative code that references the two instances on the page, and then load the page in a browser. Note how the various properties affect the appearance of the controls. For example, after you load the page in a browser, the second instance of the `TextDisplayWebPart` control appears minimized, because its <xref:System.Web.UI.WebControls.WebParts.Part.ChromeState%2A> property value is set to <xref:System.Web.UI.WebControls.WebParts.PartChromeState>.  
  
 [!code-cs[WebParts_Part_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_195_2.aspx)]
 [!code-vb[WebParts_Part_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_195_2.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ChromeState">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.PartChromeState ChromeState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.WebParts.PartChromeState ChromeState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.PartChromeState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether a part control is in a minimized or normal state.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.WebParts.PartChromeState" /> values. The default is <see cref="T:System.Web.UI.WebControls.WebParts.PartChromeState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A part control's ChromeState can be normal or minimized.  
  
   
  
## Examples  
 The following code example illustrates the declarative use of the ChromeState property in a part control. This example requires the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control `TextDisplayWebPart`, which can be found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.Part> class summary.  
  
 Note that in the declarative markup for the Web page, the second instance of the `TextDisplayWebPart` control sets its ChromeState property. After you load the page in a browser, the second control instance appears minimized.  
  
 [!code-cs[WebParts_Part_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1336_1.aspx)]
 [!code-vb[WebParts_Part_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1336_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified is not one of the <see cref="T:System.Web.UI.WebControls.WebParts.PartChromeState" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChromeType">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.PartChromeType ChromeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.WebParts.PartChromeType ChromeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.PartChromeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of border that frames a Web Parts control.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.WebParts.PartChromeType" /> values. The default is <see cref="T:System.Web.UI.WebControls.WebParts.PartChromeType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A part control's ChromeType property determines what kind of border surrounds the control. Options include showing a title only, a border only, a title and border, neither, or the default option, which simply uses the value of the <xref:System.Web.UI.WebControls.WebParts.WebZone.PartChromeType%2A> property.  
  
   
  
## Examples  
 The following code example illustrates the declarative use of the ChromeType property in a part control. This example requires the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control `TextDisplayWebPart`, which can be found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.Part> class summary.  
  
 In the declarative code for the Web page, the second instance of the `TextDisplayWebPart` control sets its ChromeType property to have only a title, whereas the first instance has a title and a border. After you load the page in a browser, the second instance of the control appears minimized. If you maximize the control, it shows a title without a border.  
  
 [!code-cs[WebParts_Part_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_448_1.aspx)]
 [!code-vb[WebParts_Part_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_448_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value is not one of the <see cref="T:System.Web.UI.WebControls.WebParts.PartChromeType" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.ControlCollection" /> object that contains the child controls for a specified server control in the user interface hierarchy.</summary>
        <value>The collection of child controls for the specified server control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 On an ASP.NET page, when controls are added declaratively between the opening and closing tags of a server control, ASP.NET automatically adds the controls to the containing server control's <xref:System.Web.UI.ControlCollection> object. Any HTML tags or text strings that are not processed on the server are treated as <xref:System.Web.UI.LiteralControl> objects. These are added to the collection like other server controls.  
  
 The <xref:System.Web.UI.Control.Controls%2A> property allows you programmatic access to the instance of the <xref:System.Web.UI.ControlCollection> class for any server control. You can add controls to the collection, remove controls from the collection, or iterate through the server controls in the collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override void DataBind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DataBind() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Binds a data source to the invoked server control and all its child controls.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a brief phrase that summarizes what the part control does, for use in ToolTips and catalogs of part controls.</summary>
        <value>A string that briefly summarizes the part control's functionality. The default value is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Description property is typically a string that is used in catalogs that provide lists of part controls, and as a ToolTip in the part control's title bar. The content of the Description appears in a ToolTip when you position your mouse pointer over the title text in a part control's title bar. The ToolTip text is created from the value of the <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> property, followed by a hyphen, followed by the Description property value.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates the declarative use of the Description property in a part control. This example requires the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control `TextDisplayWebPart`, which can be found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.Part> class summary.  
  
 After you load the page in a browser, if you position your mouse pointer over the title text of the first control instance, the description text appears in a ToolTip.  
  
 [!code-cs[WebParts_Part_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_656_1.aspx)]
 [!code-vb[WebParts_Part_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_656_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls">
      <MemberSignature Language="C#" Value="void ICompositeControlDesignerAccessor.RecreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allows the developer of a designer for a composite part control to recreate the control's child controls on the design surface.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public virtual string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the title of a part control.</summary>
        <value>A string that represents the title of the part control. The default value is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The visible title text in a part control's title bar is set by the Title property. The title text also appears as part of the ToolTip text when you position your mouse pointer over the title bar of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control or other server control that appears in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone.  
  
 The style of the title text is determined by the <xref:System.Web.UI.WebControls.WebParts.WebZone.PartTitleStyle%2A> property of the zone that contains the part control.  
  
 If you do not supply a title for a control, the Web Parts control set automatically calculates a default string to use as a title. For more information, see <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>. Also, it is possible to provide a standard subtitle that is appended to the title string. For details, see <xref:System.Web.UI.WebControls.WebParts.WebPart.Subtitle%2A>.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates the declarative use of the Title property in a part control. This example requires the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control `TextDisplayWebPart`, which can be found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.Part> class summary.  
  
 [!code-cs[WebParts_Part_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_532_1.aspx)]
 [!code-vb[WebParts_Part_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_532_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>