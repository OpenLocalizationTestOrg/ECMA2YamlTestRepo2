<Type Name="ConnectionProviderAttribute" FullName="System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute">
  <TypeSignature Language="C#" Value="public class ConnectionProviderAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConnectionProviderAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Identifies the callback method in a server control acting as the provider in a Web Parts connection, and enables developers to specify details about the provider's connection point.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A Web Parts connection consists of two server controls residing in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone and sharing data by means of an interface instance passed from one control to the other. The control that serves the interface instance is called the provider, and the control that receives the interface instance and processes or displays the data is called the consumer. For details on connections, see the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> class and [Web Parts Connections Overview](~/add/includes/ajax-current-ext-md.md).  
  
 The provider control in a connection can be a <xref:System.Web.UI.WebControls.WebParts.WebPart> control or any type of server or user control, but it must have a method designated as a callback method. The callback method is invoked during the connection process, and its purpose is to return to the consumer an interface instance that contains data. To designate the method that serves as the callback method in a provider, you must add a `ConnectionProviderAttribute` metadata element to the method (the element is based on the ConnectionProviderAttribute class).  
  
 In addition to designating the callback method in a provider, the ConnectionProviderAttribute object also enables you to specify certain details about a provider's connection point. A provider connection point is an instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class that encapsulates all the details about a provider needed to establish a connection, including the provider's control type, whether it can connect to multiple consumers at the same time, what type of interface the provider serves to consumers, details about the callback method, and a display name that represents the provider connection point in the user interface (UI). Every Web Parts connection includes a provider connection point that is associated with the provider control.  
  
 When you add the `ConnectionProviderAttribute` metadata element to the callback method in a provider, you can also use it to specify the following details about the provider connection point: a display name for the connection point (for details, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A> property), whether the provider can connect to multiple consumers at the same time (for details, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> property), an ID for the connection point (for details, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.ID%2A> property), and the type of the connection point that the provider uses (for details, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.ConnectionPointType%2A> property). The four overloads of the constructor for the ConnectionProviderAttribute class each have parameters that allow you to specify values for one or more of these connection point properties when a new instance of the class is created. Most of the properties for a provider connection point can also be set programmatically; setting them using the `ConnectionProviderAttribute` element is optional.  
  
> [!NOTE]
>  When you add the `ConnectionProviderAttribute` metadata element to a callback method in a provider, the only required parameter that you must always specify is the `displayName` parameter (for details, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.%23ctor%28System.String%29> constructor overload). The value of this parameter is assigned to the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A> property, and when a user opens the connection UI (created by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control), the display name represents the provider connection point in the UI. If you designate multiple callback methods in a provider control, you will have multiple possible connection points to choose from, and when you add the `ConnectionProviderAttribute` metadata element to each callback method, you should also specify a value for the `id` parameter, so that each provider connection point has a known, unique identifier.  
  
   
  
## Examples  
 The following code example demonstrates using the ConnectionProviderAttribute class, by showing how to declare the `ConnectionProviderAttribute` metadata element on a callback method in a provider control. Note that the simplest overload of the constructor is used; only the `displayName` parameter value is supplied.  
  
 [!code-vb[UI.WebControls.WebParts.Connection#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_87_1.vb)]
 [!code-cs[UI.WebControls.WebParts.Connection#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_87_1.cs)]  
  
 The following code examples demonstrate how to create a basic, static connection between two Web Parts controls using the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> class. The provider and consumer code files should be put into the App_Code folder under the application folder that contains the .aspx page.  
  
 The first example shows a class acting as a provider. Notice that a method is designated as the callback method with the `ConnectionProviderAttribute` metadata element.  
  
 [!code-vb[UI.WebControls.WebParts.Connection#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_87_2.vb)]
 [!code-cs[UI.WebControls.WebParts.Connection#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_87_2.cs)]  
  
 The second example shows a class acting as a consumer.  
  
 [!code-vb[UI.WebControls.WebParts.Connection#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_87_3.vb)]
 [!code-cs[UI.WebControls.WebParts.Connection#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_87_3.cs)]  
  
 The final example shows the ASP.NET page that contains the two controls.  
  
 [!code-vb[UI.WebControls.WebParts.Connection#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_87_4.aspx)]
 [!code-cs[UI.WebControls.WebParts.Connection#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_87_4.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConnectionProviderAttribute (string displayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">A string that contains a friendly name for the provider connection point to display in the user interface (UI).</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" /> class, specifying a display name for the provider connection point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates an instance of the attribute that is used with a method of a Web Parts control acting as a provider. This method becomes the connection point between the provider and the consumer. Typically, the way you use this constructor is to declare a `ConnectionProviderAttribute` metadata element on a method that you want to designate as a callback method in a provider control.  
  
 The `displayName` parameter is a friendly name of the provider connection point that is used by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to represent a provider's connection point in the UI.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class, by showing how to declare the `ConnectionProviderAttribute` metadata element on a callback method in a provider control. Note that the simplest overload of the constructor is used; only the `displayName` parameter value is supplied. For the full code required to run the code example, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class overview.  
  
 [!code-vb[UI.WebControls.WebParts.Connection#6](~/add/codesnippet/visualbasic/a68bbc26-c6d4-42e4-b045-_1.vb)]
 [!code-cs[UI.WebControls.WebParts.Connection#6](~/add/codesnippet/csharp/a68bbc26-c6d4-42e4-b045-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="displayName" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConnectionProviderAttribute (string displayName, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string id) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">A string that contains a friendly name for the provider connection point to display in the user interface (UI).</param>
        <param name="id">The &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.ID%2A&gt;, a unique string value assigned to the provider connection point.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" /> class, specifying a display name and an ID for the provider connection point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `displayName` parameter is a friendly name of the provider connection point that is used by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to represent a provider's connection point in the UI.  
  
 The `id` parameter is used to specify the ID for the provider connection point associated with the specific callback method. A control can have multiple connection points, but the `id` for each must be unique. Therefore, this overload of the constructor is useful if you have multiple callback methods in your provider control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="displayName" /> or <paramref name="id" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConnectionProviderAttribute (string displayName, Type connectionPointType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, class System.Type connectionPointType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="connectionPointType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="displayName">A string that contains a friendly name for the provider connection point to display in the user interface (UI).</param>
        <param name="connectionPointType">A &lt;xref:System.Type&gt; that derives from <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />, and that you want to specify as the type of connection point object to use with a specific callback method.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" /> class, specifying a display name and a specific type of connection point object to use for the provider connection point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `displayName` parameter is a friendly name of the provider connection point that is used by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to represent a provider's connection point in the UI.  
  
 The `connectionPointType` parameter must be a <xref:System.Type> derived from <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>. If this parameter is specified, the <xref:System.Type> is used to create the connection point instead of the standard <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class provided with the Web Parts control set.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="displayName" /> or<paramref name=" connectionPointType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionPointType" /> is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConnectionProviderAttribute (string displayName, string id, Type connectionPointType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string id, class System.Type connectionPointType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="connectionPointType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="displayName">A string that contains a friendly name for the provider connection point to display in the user interface (UI).</param>
        <param name="id">The &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.ID%2A&gt;, a unique string value assigned to the provider connection point.</param>
        <param name="connectionPointType">A &lt;xref:System.Type&gt; that derives from <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />, and that you want to specify as the type of connection point object to use with a specific callback method.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" /> class, specifying a display name, an ID, and a specific type of connection point object to use for the provider connection point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `displayName` parameter is a friendly name of the provider connection point that is used by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to represent a provider's connection point in the UI.  
  
 The `id` parameter is used to specify the ID for the provider connection point associated with the specific callback method. A control can have multiple connection points, but the `id` for each must be unique. Therefore, this overload of the constructor is useful if you have multiple callback methods in your provider control.  
  
 The `connectionPointType` parameter must be a <xref:System.Type> derived from <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>. If this parameter is specified, the <xref:System.Type> is used to create the connection point instead of the standard <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class provided with the Web Parts control set.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="displayName" />, <paramref name="id, " />or<paramref name=" connectionPointType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionPointType" /> is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the connection point allows multiple connections.</summary>
        <value>
          <see langword="true" /> if the connection point accepts multiple connections; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Provider connection points can connect to multiple consumers by default, and this property on the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribute is set to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConnectionPointType">
      <MemberSignature Language="C#" Value="public Type ConnectionPointType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ConnectionPointType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the connection point associated with a provider control.</summary>
        <value>A &lt;xref:System.Type&gt; that indicates the type of the connection point.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the <xref:System.Type> of the provider connection point. The <xref:System.Type> must derive from <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>, and when you declare the `connectionPointType` parameter with a `ConnectionProviderAttribute` metadata element on a callback method, an instance of the type you declare is used to create a connection point instead of the standard <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An invalid connection point type (one that does not derive from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class) was used.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the friendly name of the provider connection point.</summary>
        <value>A string containing a friendly display name for the provider connection point.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is the friendly name of a provider connection point. Its value can be set declaratively, when you add the `displayName` parameter to a `ConnectionProviderAttribute` metadata element on a callback method. It can also be set programmatically by a derived class, by using the protected <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayNameValue%2A> property.  
  
 When you are searching through a connection point collection, you should use the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.ID%2A> property, because the ID property must be unique, but the DisplayName property need not be.  
  
 The DisplayName property of a provider connection point is displayed to users when a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control is on the page, the connection user interface (UI) is open, and the users are in a view where they are allowed to select connection points to establish a connection.  
  
   
  
## Examples  
 The following code example demonstrates using the DisplayName property, by showing how to declare the `ConnectionProviderAttribute` metadata element on a callback method in a provider control. Note that the simplest overload of the constructor is used; only the `displayName` parameter value is supplied. The value of the parameter will become the value of the DisplayName property. For the full code required to run the code example, see the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class overview.  
  
 [!code-vb[UI.WebControls.WebParts.Connection#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_888_1.vb)]
 [!code-cs[UI.WebControls.WebParts.Connection#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_888_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayNameValue">
      <MemberSignature Language="C#" Value="protected string DisplayNameValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayNameValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string used as the value of the &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A&gt; property, for use in localization scenarios.</summary>
        <value>A string that is used as the value of &lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This extra property exists so that you can derive from <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> and provide a localized version. The derived localizable <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribute will maintain a private Boolean field to indicate whether it has been localized. On the first access to the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A> property, it will look up the localized string, and then use the DisplayNameValue property to assign the localized value to the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a string that represents the unique identity of the provider connection point object.</summary>
        <value>The unique ID assigned to the provider connection point. The default value is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If searching through a connection point collection, you should use the ID property to locate a particular connection point. This property can be used to distinguish between two connection points of the same name. Provider connection points can have the same <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.DisplayName%2A> property value, but the ID property must be different.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>